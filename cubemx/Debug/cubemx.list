
cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6f4  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800d948  0800d948  0000e948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ddd0  0800ddd0  0000edd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ddd8  0800ddd8  0000edd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dddc  0800dddc  0000eddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d4  20000000  0800dde0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000904  200001d4  0800dfb4  0000f1d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000ad8  0800dfb4  0000fad8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020114  00000000  00000000  0000f20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038fa  00000000  00000000  0002f31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c98  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001641  00000000  00000000  000348b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392fe  00000000  00000000  00035ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002241b  00000000  00000000  0006f1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166c5b  00000000  00000000  0009160a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f8265  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008cc8  00000000  00000000  001f82a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  00200f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001d4 	.word	0x200001d4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800d92c 	.word	0x0800d92c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001d8 	.word	0x200001d8
 800028c:	0800d92c 	.word	0x0800d92c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b97e 	b.w	8000edc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14d      	bne.n	8000ca0 <__udivmoddi4+0xa8>
 8000c04:	428a      	cmp	r2, r1
 8000c06:	460f      	mov	r7, r1
 8000c08:	4684      	mov	ip, r0
 8000c0a:	4696      	mov	lr, r2
 8000c0c:	fab2 f382 	clz	r3, r2
 8000c10:	d960      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c12:	b14b      	cbz	r3, 8000c28 <__udivmoddi4+0x30>
 8000c14:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c22:	fa20 f202 	lsr.w	r2, r0, r2
 8000c26:	4317      	orrs	r7, r2
 8000c28:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c2c:	fa1f f48e 	uxth.w	r4, lr
 8000c30:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c34:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c38:	fb06 7711 	mls	r7, r6, r1, r7
 8000c3c:	fb01 f004 	mul.w	r0, r1, r4
 8000c40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c48:	eb1e 0202 	adds.w	r2, lr, r2
 8000c4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x60>
 8000c52:	4290      	cmp	r0, r2
 8000c54:	f200 812d 	bhi.w	8000eb2 <__udivmoddi4+0x2ba>
 8000c58:	4639      	mov	r1, r7
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	fa1f fc8c 	uxth.w	ip, ip
 8000c60:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c64:	fb06 2210 	mls	r2, r6, r0, r2
 8000c68:	fb00 f404 	mul.w	r4, r0, r4
 8000c6c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c70:	4564      	cmp	r4, ip
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c74:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7c:	d202      	bcs.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	4564      	cmp	r4, ip
 8000c80:	f200 811a 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000c84:	4610      	mov	r0, r2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	ebac 0c04 	sub.w	ip, ip, r4
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b125      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c92:	fa2c f303 	lsr.w	r3, ip, r3
 8000c96:	2200      	movs	r2, #0
 8000c98:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d905      	bls.n	8000cb0 <__udivmoddi4+0xb8>
 8000ca4:	b10d      	cbz	r5, 8000caa <__udivmoddi4+0xb2>
 8000ca6:	e9c5 0100 	strd	r0, r1, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	4608      	mov	r0, r1
 8000cae:	e7f5      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000cb0:	fab3 f183 	clz	r1, r3
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d14d      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb8:	42a3      	cmp	r3, r4
 8000cba:	f0c0 80f2 	bcc.w	8000ea2 <__udivmoddi4+0x2aa>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f080 80ef 	bcs.w	8000ea2 <__udivmoddi4+0x2aa>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	4608      	mov	r0, r1
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e6      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cce:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd2:	e7e3      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 80a2 	bne.w	8000e1e <__udivmoddi4+0x226>
 8000cda:	1a8a      	subs	r2, r1, r2
 8000cdc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ce0:	fa1f f68e 	uxth.w	r6, lr
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cea:	fb07 2014 	mls	r0, r7, r4, r2
 8000cee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb06 f004 	mul.w	r0, r6, r4
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d90f      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000cfe:	eb1e 0202 	adds.w	r2, lr, r2
 8000d02:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80c8 	beq.w	8000eac <__udivmoddi4+0x2b4>
 8000d1c:	4644      	mov	r4, r8
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	fa1f fc8c 	uxth.w	ip, ip
 8000d24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d28:	fb07 2210 	mls	r2, r7, r0, r2
 8000d2c:	fb00 f606 	mul.w	r6, r0, r6
 8000d30:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d34:	4566      	cmp	r6, ip
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d38:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x150>
 8000d42:	4566      	cmp	r6, ip
 8000d44:	f200 80bb 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000d48:	4610      	mov	r0, r2
 8000d4a:	ebac 0c06 	sub.w	ip, ip, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d66:	40f4      	lsrs	r4, r6
 8000d68:	408a      	lsls	r2, r1
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	ea4e 030c 	orr.w	r3, lr, ip
 8000d70:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fa1f fc87 	uxth.w	ip, r7
 8000d80:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d84:	fb08 4410 	mls	r4, r8, r0, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb00 f90c 	mul.w	r9, r0, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d90e      	bls.n	8000db2 <__udivmoddi4+0x1ba>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	bf2c      	ite	cs
 8000d9c:	f04f 0b01 	movcs.w	fp, #1
 8000da0:	f04f 0b00 	movcc.w	fp, #0
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	d903      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000da8:	f1bb 0f00 	cmp.w	fp, #0
 8000dac:	f000 8093 	beq.w	8000ed6 <__udivmoddi4+0x2de>
 8000db0:	4650      	mov	r0, sl
 8000db2:	eba4 0409 	sub.w	r4, r4, r9
 8000db6:	fa1f f983 	uxth.w	r9, r3
 8000dba:	fbb4 f3f8 	udiv	r3, r4, r8
 8000dbe:	fb08 4413 	mls	r4, r8, r3, r4
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d906      	bls.n	8000ddc <__udivmoddi4+0x1e4>
 8000dce:	193c      	adds	r4, r7, r4
 8000dd0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd4:	d201      	bcs.n	8000dda <__udivmoddi4+0x1e2>
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d87a      	bhi.n	8000ed0 <__udivmoddi4+0x2d8>
 8000dda:	4643      	mov	r3, r8
 8000ddc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000de0:	eba4 040c 	sub.w	r4, r4, ip
 8000de4:	fba0 9802 	umull	r9, r8, r0, r2
 8000de8:	4544      	cmp	r4, r8
 8000dea:	46cc      	mov	ip, r9
 8000dec:	4643      	mov	r3, r8
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0x1fe>
 8000df0:	d106      	bne.n	8000e00 <__udivmoddi4+0x208>
 8000df2:	45ce      	cmp	lr, r9
 8000df4:	d204      	bcs.n	8000e00 <__udivmoddi4+0x208>
 8000df6:	3801      	subs	r0, #1
 8000df8:	ebb9 0c02 	subs.w	ip, r9, r2
 8000dfc:	eb68 0307 	sbc.w	r3, r8, r7
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x222>
 8000e02:	ebbe 020c 	subs.w	r2, lr, ip
 8000e06:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e73e      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e1e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e22:	f1c3 0120 	rsb	r1, r3, #32
 8000e26:	fa04 f203 	lsl.w	r2, r4, r3
 8000e2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e2e:	40cc      	lsrs	r4, r1
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa20 f101 	lsr.w	r1, r0, r1
 8000e38:	fa1f f68e 	uxth.w	r6, lr
 8000e3c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fb07 4410 	mls	r4, r7, r0, r4
 8000e46:	0c11      	lsrs	r1, r2, #16
 8000e48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e4c:	fb00 f406 	mul.w	r4, r0, r6
 8000e50:	428c      	cmp	r4, r1
 8000e52:	d90e      	bls.n	8000e72 <__udivmoddi4+0x27a>
 8000e54:	eb1e 0101 	adds.w	r1, lr, r1
 8000e58:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5c:	bf2c      	ite	cs
 8000e5e:	f04f 0901 	movcs.w	r9, #1
 8000e62:	f04f 0900 	movcc.w	r9, #0
 8000e66:	428c      	cmp	r4, r1
 8000e68:	d902      	bls.n	8000e70 <__udivmoddi4+0x278>
 8000e6a:	f1b9 0f00 	cmp.w	r9, #0
 8000e6e:	d02c      	beq.n	8000eca <__udivmoddi4+0x2d2>
 8000e70:	4640      	mov	r0, r8
 8000e72:	1b09      	subs	r1, r1, r4
 8000e74:	b292      	uxth	r2, r2
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e82:	fb04 f106 	mul.w	r1, r4, r6
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x2a2>
 8000e8a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e8e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e92:	d201      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d815      	bhi.n	8000ec4 <__udivmoddi4+0x2cc>
 8000e98:	4644      	mov	r4, r8
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ea0:	e721      	b.n	8000ce6 <__udivmoddi4+0xee>
 8000ea2:	1a86      	subs	r6, r0, r2
 8000ea4:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	e70e      	b.n	8000cca <__udivmoddi4+0xd2>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e735      	b.n	8000d1e <__udivmoddi4+0x126>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4472      	add	r2, lr
 8000eb6:	e6d0      	b.n	8000c5a <__udivmoddi4+0x62>
 8000eb8:	44f4      	add	ip, lr
 8000eba:	3802      	subs	r0, #2
 8000ebc:	e6e3      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000ebe:	44f4      	add	ip, lr
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e742      	b.n	8000d4a <__udivmoddi4+0x152>
 8000ec4:	3c02      	subs	r4, #2
 8000ec6:	4472      	add	r2, lr
 8000ec8:	e7e7      	b.n	8000e9a <__udivmoddi4+0x2a2>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4471      	add	r1, lr
 8000ece:	e7d0      	b.n	8000e72 <__udivmoddi4+0x27a>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	e782      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	e76a      	b.n	8000db2 <__udivmoddi4+0x1ba>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fea3 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f829 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 fa53 	bl	8001398 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000ef2:	f000 f883 	bl	8000ffc <MX_GPDMA1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000ef6:	f000 fa21 	bl	800133c <MX_USB_OTG_HS_PCD_Init>
  MX_RTC_Init();
 8000efa:	f000 f8dd 	bl	80010b8 <MX_RTC_Init>
  MX_ICACHE_Init();
 8000efe:	f000 f8cf 	bl	80010a0 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 8000f02:	f000 f9cf 	bl	80012a4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f06:	f000 f959 	bl	80011bc <MX_TIM2_Init>
  MX_TIM17_Init();
 8000f0a:	f000 f9a5 	bl	8001258 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  char message[] = "Hello World...\r\n";
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <main+0x58>)
 8000f10:	1d3c      	adds	r4, r7, #4
 8000f12:	461d      	mov	r5, r3
 8000f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0);
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f9b6 	bl	8000290 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	1d39      	adds	r1, r7, #4
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <main+0x5c>)
 8000f2e:	f008 fd1f 	bl	8009970 <HAL_UART_Transmit>
  {
 8000f32:	bf00      	nop
 8000f34:	e7f2      	b.n	8000f1c <main+0x3c>
 8000f36:	bf00      	nop
 8000f38:	0800d948 	.word	0x0800d948
 8000f3c:	20000330 	.word	0x20000330

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b09e      	sub	sp, #120	@ 0x78
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	2260      	movs	r2, #96	@ 0x60
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00a fdb3 	bl	800baba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]
 8000f62:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f64:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000f68:	f003 fb94 	bl	8004694 <HAL_PWREx_ControlVoltageScaling>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000f72:	f000 fa8d 	bl	8001490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f76:	2309      	movs	r3, #9
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f80:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000faa:	230c      	movs	r3, #12
 8000fac:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fc36 	bl	8004828 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000fc2:	f000 fa65 	bl	8001490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	231f      	movs	r3, #31
 8000fc8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 fafc 	bl	80055e0 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000fee:	f000 fa4f 	bl	8001490 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3778      	adds	r7, #120	@ 0x78
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001002:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <MX_GPDMA1_Init+0x98>)
 8001004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_GPDMA1_Init+0x98>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001012:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <MX_GPDMA1_Init+0x98>)
 8001014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	201d      	movs	r0, #29
 8001026:	f000 ffae 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800102a:	201d      	movs	r0, #29
 800102c:	f000 ffc5 	bl	8001fba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2055      	movs	r0, #85	@ 0x55
 8001036:	f000 ffa6 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 800103a:	2055      	movs	r0, #85	@ 0x55
 800103c:	f000 ffbd 	bl	8001fba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_GPDMA1_Init+0x9c>)
 8001042:	4a16      	ldr	r2, [pc, #88]	@ (800109c <MX_GPDMA1_Init+0xa0>)
 8001044:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_GPDMA1_Init+0x9c>)
 8001048:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800104c:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_GPDMA1_Init+0x9c>)
 8001050:	2200      	movs	r2, #0
 8001052:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_GPDMA1_Init+0x9c>)
 8001056:	2200      	movs	r2, #0
 8001058:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_GPDMA1_Init+0x9c>)
 800105c:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001060:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <MX_GPDMA1_Init+0x9c>)
 8001064:	2280      	movs	r2, #128	@ 0x80
 8001066:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8001068:	480b      	ldr	r0, [pc, #44]	@ (8001098 <MX_GPDMA1_Init+0x9c>)
 800106a:	f001 f979 	bl	8002360 <HAL_DMAEx_List_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_GPDMA1_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 fa0c 	bl	8001490 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001078:	2110      	movs	r1, #16
 800107a:	4807      	ldr	r0, [pc, #28]	@ (8001098 <MX_GPDMA1_Init+0x9c>)
 800107c:	f001 f933 	bl	80022e6 <HAL_DMA_ConfigChannelAttributes>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_GPDMA1_Init+0x8e>
  {
    Error_Handler();
 8001086:	f000 fa03 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	46020c00 	.word	0x46020c00
 8001098:	200001f0 	.word	0x200001f0
 800109c:	400206d0 	.word	0x400206d0

080010a0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80010a4:	f002 fa70 	bl	8003588 <HAL_ICACHE_Enable>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80010ae:	f000 f9ef 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	@ 0x38
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010e6:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <MX_RTC_Init+0xfc>)
 80010e8:	4a33      	ldr	r2, [pc, #204]	@ (80011b8 <MX_RTC_Init+0x100>)
 80010ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ec:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <MX_RTC_Init+0xfc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010f2:	4b30      	ldr	r3, [pc, #192]	@ (80011b4 <MX_RTC_Init+0xfc>)
 80010f4:	227f      	movs	r2, #127	@ 0x7f
 80010f6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010f8:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <MX_RTC_Init+0xfc>)
 80010fa:	22ff      	movs	r2, #255	@ 0xff
 80010fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010fe:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <MX_RTC_Init+0xfc>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001104:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <MX_RTC_Init+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800110a:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <MX_RTC_Init+0xfc>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <MX_RTC_Init+0xfc>)
 8001112:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001116:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001118:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <MX_RTC_Init+0xfc>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800111e:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <MX_RTC_Init+0xfc>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001124:	4823      	ldr	r0, [pc, #140]	@ (80011b4 <MX_RTC_Init+0xfc>)
 8001126:	f007 fd83 	bl	8008c30 <HAL_RTC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001130:	f000 f9ae 	bl	8001490 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001140:	2300      	movs	r3, #0
 8001142:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	481a      	ldr	r0, [pc, #104]	@ (80011b4 <MX_RTC_Init+0xfc>)
 800114c:	f007 ffe0 	bl	8009110 <HAL_RTCEx_PrivilegeModeSet>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001156:	f000 f99b 	bl	8001490 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800115a:	2300      	movs	r3, #0
 800115c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800115e:	2300      	movs	r3, #0
 8001160:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001162:	2300      	movs	r3, #0
 8001164:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2201      	movs	r2, #1
 8001174:	4619      	mov	r1, r3
 8001176:	480f      	ldr	r0, [pc, #60]	@ (80011b4 <MX_RTC_Init+0xfc>)
 8001178:	f007 fddc 	bl	8008d34 <HAL_RTC_SetTime>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001182:	f000 f985 	bl	8001490 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001186:	2301      	movs	r3, #1
 8001188:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800118a:	2301      	movs	r3, #1
 800118c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800118e:	2301      	movs	r3, #1
 8001190:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2201      	movs	r2, #1
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_RTC_Init+0xfc>)
 800119e:	f007 fe65 	bl	8008e6c <HAL_RTC_SetDate>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80011a8:	f000 f972 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3738      	adds	r7, #56	@ 0x38
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000268 	.word	0x20000268
 80011b8:	46007800 	.word	0x46007800

080011bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011da:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011e4:	229f      	movs	r2, #159	@ 0x9f
 80011e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001202:	4814      	ldr	r0, [pc, #80]	@ (8001254 <MX_TIM2_Init+0x98>)
 8001204:	f007 ffb2 	bl	800916c <HAL_TIM_Base_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800120e:	f000 f93f 	bl	8001490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001216:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	@ (8001254 <MX_TIM2_Init+0x98>)
 8001220:	f007 fffc 	bl	800921c <HAL_TIM_ConfigClockSource>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800122a:	f000 f931 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	@ (8001254 <MX_TIM2_Init+0x98>)
 800123c:	f008 fa86 	bl	800974c <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001246:	f000 f923 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000298 	.word	0x20000298

08001258 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_TIM17_Init+0x44>)
 800125e:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <MX_TIM17_Init+0x48>)
 8001260:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_TIM17_Init+0x44>)
 8001264:	2213      	movs	r2, #19
 8001266:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_TIM17_Init+0x44>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <MX_TIM17_Init+0x44>)
 8001270:	2263      	movs	r2, #99	@ 0x63
 8001272:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_TIM17_Init+0x44>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <MX_TIM17_Init+0x44>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_TIM17_Init+0x44>)
 8001282:	2280      	movs	r2, #128	@ 0x80
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_TIM17_Init+0x44>)
 8001288:	f007 ff70 	bl	800916c <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001292:	f000 f8fd 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002e4 	.word	0x200002e4
 80012a0:	40014800 	.word	0x40014800

080012a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012aa:	4a23      	ldr	r2, [pc, #140]	@ (8001338 <MX_USART1_UART_Init+0x94>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ec:	4811      	ldr	r0, [pc, #68]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012ee:	f008 faef 	bl	80098d0 <HAL_UART_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012f8:	f000 f8ca 	bl	8001490 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	480d      	ldr	r0, [pc, #52]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001300:	f008 ffc4 	bl	800a28c <HAL_UARTEx_SetTxFifoThreshold>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800130a:	f000 f8c1 	bl	8001490 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4808      	ldr	r0, [pc, #32]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001312:	f008 fff9 	bl	800a308 <HAL_UARTEx_SetRxFifoThreshold>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800131c:	f000 f8b8 	bl	8001490 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001322:	f008 ff7a 	bl	800a21a <HAL_UARTEx_DisableFifoMode>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800132c:	f000 f8b0 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000330 	.word	0x20000330
 8001338:	40013800 	.word	0x40013800

0800133c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001342:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001344:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001348:	2209      	movs	r2, #9
 800134a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001354:	2203      	movs	r2, #3
 8001356:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001358:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001372:	2200      	movs	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	@ (8001390 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800137e:	f002 f913 	bl	80035a8 <HAL_PCD_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001388:	f000 f882 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000478 	.word	0x20000478
 8001394:	42040000 	.word	0x42040000

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013be:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f0:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <MX_GPIO_Init+0xe8>)
 80013fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <MX_GPIO_Init+0xe8>)
 800140a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140e:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <MX_GPIO_Init+0xe8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <MX_GPIO_Init+0xe8>)
 800141a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2104      	movs	r1, #4
 800142a:	4816      	ldr	r0, [pc, #88]	@ (8001484 <MX_GPIO_Init+0xec>)
 800142c:	f002 f858 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_GPIO_Init+0xf0>)
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4811      	ldr	r0, [pc, #68]	@ (800148c <MX_GPIO_Init+0xf4>)
 8001446:	f001 fe73 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800144a:	2304      	movs	r3, #4
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_GPIO_Init+0xec>)
 8001462:	f001 fe65 	bl	8003130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 6, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2106      	movs	r1, #6
 800146a:	2018      	movs	r0, #24
 800146c:	f000 fd8b 	bl	8001f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001470:	2018      	movs	r0, #24
 8001472:	f000 fda2 	bl	8001fba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	46020c00 	.word	0x46020c00
 8001484:	42021800 	.word	0x42021800
 8001488:	10110000 	.word	0x10110000
 800148c:	42020800 	.word	0x42020800

08001490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001494:	b672      	cpsid	i
}
 8001496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <Error_Handler+0x8>

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_MspInit+0x34>)
 80014a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a8:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <HAL_MspInit+0x34>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <HAL_MspInit+0x34>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 80014c0:	f003 f974 	bl	80047ac <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 80014c4:	f003 f982 	bl	80047cc <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	46020c00 	.word	0x46020c00

080014d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0ba      	sub	sp, #232	@ 0xe8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	22d8      	movs	r2, #216	@ 0xd8
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00a fae8 	bl	800baba <memset>
  if(hrtc->Instance==RTC)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_RTC_MspInit+0x90>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d132      	bne.n	800155a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4618      	mov	r0, r3
 800150e:	f004 fc37 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001518:	f7ff ffba 	bl	8001490 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_RTC_MspInit+0x94>)
 800151e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001522:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <HAL_RTC_MspInit+0x94>)
 8001524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001528:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_RTC_MspInit+0x94>)
 800152e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001532:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <HAL_RTC_MspInit+0x94>)
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001538:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_RTC_MspInit+0x94>)
 800153e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <HAL_RTC_MspInit+0x94>)
 800154c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001550:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <HAL_RTC_MspInit+0x94>)
 8001552:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001556:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800155a:	bf00      	nop
 800155c:	37e8      	adds	r7, #232	@ 0xe8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	46007800 	.word	0x46007800
 8001568:	46020c00 	.word	0x46020c00

0800156c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800157c:	d10f      	bne.n	800159e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 8001580:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001584:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 8001590:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800159c:	e013      	b.n	80015c6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM17)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a0d      	ldr	r2, [pc, #52]	@ (80015d8 <HAL_TIM_Base_MspInit+0x6c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d10e      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 80015aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015ae:	4a09      	ldr	r2, [pc, #36]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 80015ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	46020c00 	.word	0x46020c00
 80015d8:	40014800 	.word	0x40014800

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0da      	sub	sp, #360	@ 0x168
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015e6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015ea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001600:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001604:	4618      	mov	r0, r3
 8001606:	23d8      	movs	r3, #216	@ 0xd8
 8001608:	461a      	mov	r2, r3
 800160a:	2100      	movs	r1, #0
 800160c:	f00a fa55 	bl	800baba <memset>
  if(huart->Instance==USART1)
 8001610:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001614:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a77      	ldr	r2, [pc, #476]	@ (80017fc <HAL_UART_MspInit+0x220>)
 800161e:	4293      	cmp	r3, r2
 8001620:	f040 80e7 	bne.w	80017f2 <HAL_UART_MspInit+0x216>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001624:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001628:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 800162c:	f04f 0201 	mov.w	r2, #1
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001638:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800163c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001640:	2200      	movs	r2, #0
 8001642:	651a      	str	r2, [r3, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4618      	mov	r0, r3
 800164a:	f004 fb99 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001654:	f7ff ff1c 	bl	8001490 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001658:	4b69      	ldr	r3, [pc, #420]	@ (8001800 <HAL_UART_MspInit+0x224>)
 800165a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800165e:	4a68      	ldr	r2, [pc, #416]	@ (8001800 <HAL_UART_MspInit+0x224>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001668:	4b65      	ldr	r3, [pc, #404]	@ (8001800 <HAL_UART_MspInit+0x224>)
 800166a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800166e:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001672:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001676:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001680:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001684:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b5e      	ldr	r3, [pc, #376]	@ (8001800 <HAL_UART_MspInit+0x224>)
 8001688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168c:	4a5c      	ldr	r2, [pc, #368]	@ (8001800 <HAL_UART_MspInit+0x224>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001696:	4b5a      	ldr	r3, [pc, #360]	@ (8001800 <HAL_UART_MspInit+0x224>)
 8001698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169c:	f003 0201 	and.w	r2, r3, #1
 80016a0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80016a4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80016ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016b2:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016b8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ce:	2307      	movs	r3, #7
 80016d0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80016d8:	4619      	mov	r1, r3
 80016da:	484a      	ldr	r0, [pc, #296]	@ (8001804 <HAL_UART_MspInit+0x228>)
 80016dc:	f001 fd28 	bl	8003130 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80016e0:	2321      	movs	r3, #33	@ 0x21
 80016e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.Request = GPDMA1_REQUEST_USART1_RX;
 80016e6:	2318      	movs	r3, #24
 80016e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80016fe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001702:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcBurstLength = 1;
 8001712:	2301      	movs	r3, #1
 8001714:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.DestBurstLength = 1;
 8001718:	2301      	movs	r3, #1
 800171a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.Mode = DMA_NORMAL;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001742:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001746:	4930      	ldr	r1, [pc, #192]	@ (8001808 <HAL_UART_MspInit+0x22c>)
 8001748:	4618      	mov	r0, r3
 800174a:	f000 ff35 	bl	80025b8 <HAL_DMAEx_List_BuildNode>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_UART_MspInit+0x17c>
    {
      Error_Handler();
 8001754:	f7ff fe9c 	bl	8001490 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001758:	4a2b      	ldr	r2, [pc, #172]	@ (8001808 <HAL_UART_MspInit+0x22c>)
 800175a:	2100      	movs	r1, #0
 800175c:	482b      	ldr	r0, [pc, #172]	@ (800180c <HAL_UART_MspInit+0x230>)
 800175e:	f000 ff41 	bl	80025e4 <HAL_DMAEx_List_InsertNode>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_MspInit+0x190>
    {
      Error_Handler();
 8001768:	f7ff fe92 	bl	8001490 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800176c:	4827      	ldr	r0, [pc, #156]	@ (800180c <HAL_UART_MspInit+0x230>)
 800176e:	f001 f802 	bl	8002776 <HAL_DMAEx_List_SetCircularMode>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_UART_MspInit+0x1a0>
    {
      Error_Handler();
 8001778:	f7ff fe8a 	bl	8001490 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800177c:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <HAL_UART_MspInit+0x234>)
 800177e:	4a25      	ldr	r2, [pc, #148]	@ (8001814 <HAL_UART_MspInit+0x238>)
 8001780:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001782:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <HAL_UART_MspInit+0x234>)
 8001784:	2200      	movs	r2, #0
 8001786:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001788:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <HAL_UART_MspInit+0x234>)
 800178a:	2200      	movs	r2, #0
 800178c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800178e:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_UART_MspInit+0x234>)
 8001790:	2200      	movs	r2, #0
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001794:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <HAL_UART_MspInit+0x234>)
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800179a:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <HAL_UART_MspInit+0x234>)
 800179c:	2281      	movs	r2, #129	@ 0x81
 800179e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80017a0:	481b      	ldr	r0, [pc, #108]	@ (8001810 <HAL_UART_MspInit+0x234>)
 80017a2:	f000 fddd 	bl	8002360 <HAL_DMAEx_List_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_UART_MspInit+0x1d4>
    {
      Error_Handler();
 80017ac:	f7ff fe70 	bl	8001490 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80017b0:	4916      	ldr	r1, [pc, #88]	@ (800180c <HAL_UART_MspInit+0x230>)
 80017b2:	4817      	ldr	r0, [pc, #92]	@ (8001810 <HAL_UART_MspInit+0x234>)
 80017b4:	f001 f840 	bl	8002838 <HAL_DMAEx_List_LinkQ>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_UART_MspInit+0x1e6>
    {
      Error_Handler();
 80017be:	f7ff fe67 	bl	8001490 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel0);
 80017c2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80017c6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <HAL_UART_MspInit+0x234>)
 80017ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001810 <HAL_UART_MspInit+0x234>)
 80017d4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80017d8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80017e0:	2110      	movs	r1, #16
 80017e2:	480b      	ldr	r0, [pc, #44]	@ (8001810 <HAL_UART_MspInit+0x234>)
 80017e4:	f000 fd7f 	bl	80022e6 <HAL_DMA_ConfigChannelAttributes>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_UART_MspInit+0x216>
    {
      Error_Handler();
 80017ee:	f7ff fe4f 	bl	8001490 <Error_Handler>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017f2:	bf00      	nop
 80017f4:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40013800 	.word	0x40013800
 8001800:	46020c00 	.word	0x46020c00
 8001804:	42020000 	.word	0x42020000
 8001808:	200003c4 	.word	0x200003c4
 800180c:	200003e8 	.word	0x200003e8
 8001810:	20000400 	.word	0x20000400
 8001814:	40020050 	.word	0x40020050

08001818 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0bc      	sub	sp, #240	@ 0xf0
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	22d8      	movs	r2, #216	@ 0xd8
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f00a f946 	bl	800baba <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a3e      	ldr	r2, [pc, #248]	@ (800192c <HAL_PCD_MspInit+0x114>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d174      	bne.n	8001922 <HAL_PCD_MspInit+0x10a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001838:	4b3d      	ldr	r3, [pc, #244]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 800183a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800183e:	4a3c      	ldr	r2, [pc, #240]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 800184a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0308 	mov.w	r3, #8
 800185e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_HSE;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	4618      	mov	r0, r3
 800186e:	f004 fa87 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8001878:	f7ff fe0a 	bl	8001490 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 800187c:	200c      	movs	r0, #12
 800187e:	f000 fa93 	bl	8001da8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001882:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 8001884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001888:	4a29      	ldr	r2, [pc, #164]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001892:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 8001894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80018a0:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a6:	4a22      	ldr	r2, [pc, #136]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d11b      	bne.n	8001904 <HAL_PCD_MspInit+0xec>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d2:	4a17      	ldr	r2, [pc, #92]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80018ea:	f002 ff5f 	bl	80047ac <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80018ee:	f002 ff7d 	bl	80047ec <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <HAL_PCD_MspInit+0x118>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001902:	e003      	b.n	800190c <HAL_PCD_MspInit+0xf4>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001904:	f002 ff52 	bl	80047ac <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8001908:	f002 ff70 	bl	80047ec <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800190c:	2001      	movs	r0, #1
 800190e:	f000 fa37 	bl	8001d80 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2106      	movs	r1, #6
 8001916:	2049      	movs	r0, #73	@ 0x49
 8001918:	f000 fb35 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800191c:	2049      	movs	r0, #73	@ 0x49
 800191e:	f000 fb4c 	bl	8001fba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8001922:	bf00      	nop
 8001924:	37f0      	adds	r7, #240	@ 0xf0
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	42040000 	.word	0x42040000
 8001930:	46020c00 	.word	0x46020c00

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <NMI_Handler+0x4>

0800193c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <MemManage_Handler+0x4>

0800194c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <UsageFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198a:	f000 f9b5 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}

08001992 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001996:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800199a:	f001 fdb9 	bl	8003510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <GPDMA1_Channel0_IRQHandler+0x10>)
 80019aa:	f000 fb20 	bl	8001fee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000400 	.word	0x20000400

080019b8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <OTG_HS_IRQHandler+0x10>)
 80019be:	f001 ff0b 	bl	80037d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000478 	.word	0x20000478

080019cc <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <GPDMA1_Channel13_IRQHandler+0x10>)
 80019d2:	f000 fb0c 	bl	8001fee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200001f0 	.word	0x200001f0

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fa:	f00a f8b1 	bl	800bb60 <__errno>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
  return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe7 	bl	80019f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a22:	bf00      	nop
 8001a24:	e7fd      	b.n	8001a22 <_exit+0x12>

08001a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e00a      	b.n	8001a4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a38:	f3af 8000 	nop.w
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	b2ca      	uxtb	r2, r1
 8001a46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbf0      	blt.n	8001a38 <_read+0x12>
  }

  return len;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e009      	b.n	8001a86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbf1      	blt.n	8001a72 <_write+0x12>
  }
  return len;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_close>:

int _close(int file)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_isatty>:

int _isatty(int file)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f00a f816 	bl	800bb60 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20270000 	.word	0x20270000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	20000984 	.word	0x20000984
 8001b68:	20000ad8 	.word	0x20000ad8

08001b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b70:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <SystemInit+0x68>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b76:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <SystemInit+0x68>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <SystemInit+0x6c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <SystemInit+0x6c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <SystemInit+0x6c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <SystemInit+0x6c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <SystemInit+0x6c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <SystemInit+0x6c>)
 8001b9e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001ba2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <SystemInit+0x6c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <SystemInit+0x6c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <SystemInit+0x6c>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <SystemInit+0x6c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <SystemInit+0x68>)
 8001bc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bc6:	609a      	str	r2, [r3, #8]
  #endif
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00
 8001bd8:	46020c00 	.word	0x46020c00

08001bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c14 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001be0:	f7ff ffc4 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001be4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001be6:	e003      	b.n	8001bf0 <LoopCopyDataInit>

08001be8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bee:	3104      	adds	r1, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bf0:	480a      	ldr	r0, [pc, #40]	@ (8001c1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bf8:	d3f6      	bcc.n	8001be8 <CopyDataInit>
	ldr	r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bfc:	e002      	b.n	8001c04 <LoopFillZerobss>

08001bfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c00:	f842 3b04 	str.w	r3, [r2], #4

08001c04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <LoopForever+0x16>)
	cmp	r2, r3
 8001c06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c08:	d3f9      	bcc.n	8001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f009 ffaf 	bl	800bb6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0e:	f7ff f967 	bl	8000ee0 <main>

08001c12 <LoopForever>:

LoopForever:
    b LoopForever
 8001c12:	e7fe      	b.n	8001c12 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001c14:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001c18:	0800dde0 	.word	0x0800dde0
	ldr	r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c20:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8001c24:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8001c28:	20000ad8 	.word	0x20000ad8

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_Init+0x4c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a10      	ldr	r2, [pc, #64]	@ (8001c7c <HAL_Init+0x4c>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f995 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c46:	f003 febd 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <HAL_Init+0x50>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	490b      	ldr	r1, [pc, #44]	@ (8001c84 <HAL_Init+0x54>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_Init+0x58>)
 8001c5e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c60:	200f      	movs	r0, #15
 8001c62:	f000 f813 	bl	8001c8c <HAL_InitTick>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e002      	b.n	8001c76 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c70:	f7ff fc14 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	46020c00 	.word	0x46020c00
 8001c84:	0800d95c 	.word	0x0800d95c
 8001c88:	20000000 	.word	0x20000000

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c94:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_InitTick+0x60>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e021      	b.n	8001ce4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_InitTick+0x64>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_InitTick+0x60>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f98d 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 f957 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_InitTick+0x68>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004

08001cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	20000988 	.word	0x20000988

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000988 	.word	0x20000988

08001d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff ffee 	bl	8001d20 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d005      	beq.n	8001d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_Delay+0x44>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d5e:	bf00      	nop
 8001d60:	f7ff ffde 	bl	8001d20 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <HAL_Delay+0x28>
  {
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008

08001d80 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d8c:	f023 0201 	bic.w	r2, r3, #1
 8001d90:	4904      	ldr	r1, [pc, #16]	@ (8001da4 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	46000400 	.word	0x46000400

08001da8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db4:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8001db8:	4904      	ldr	r1, [pc, #16]	@ (8001dcc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	46000400 	.word	0x46000400

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	@ (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	@ 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff29 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff40 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff90 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5f 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff33 	bl	8001e34 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa4 	bl	8001f2c <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001ffe:	f023 030f 	bic.w	r3, r3, #15
 8002002:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	3b50      	subs	r3, #80	@ 0x50
 800200e:	09db      	lsrs	r3, r3, #7
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2201      	movs	r2, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8156 	beq.w	80022da <HAL_DMA_IRQHandler+0x2ec>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d011      	beq.n	8002060 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002052:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800206a:	2b00      	cmp	r3, #0
 800206c:	d011      	beq.n	8002092 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002084:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d011      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020b6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d011      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020e8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ee:	f043 0208 	orr.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d05a      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x202>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d053      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x202>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002150:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b04      	cmp	r3, #4
 800215c:	d13c      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x1ea>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800216c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0202 	orr.w	r2, r2, #2
 800217c:	615a      	str	r2, [r3, #20]

        /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
        __NOP();
 800217e:	bf00      	nop

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_DMA_IRQHandler+0x1aa>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002196:	e003      	b.n	80021a0 <HAL_DMA_IRQHandler+0x1b2>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_DMA_IRQHandler+0x1ce>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b0:	2201      	movs	r2, #1
 80021b2:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2200      	movs	r2, #0
 80021ba:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8088 	beq.w	80022de <HAL_DMA_IRQHandler+0x2f0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
        }

        return;
 80021d6:	e082      	b.n	80022de <HAL_DMA_IRQHandler+0x2f0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2205      	movs	r2, #5
 80021dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x202>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d039      	beq.n	8002272 <HAL_DMA_IRQHandler+0x284>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d032      	beq.n	8002272 <HAL_DMA_IRQHandler+0x284>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002214:	2b00      	cmp	r3, #0
 8002216:	d012      	beq.n	800223e <HAL_DMA_IRQHandler+0x250>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_DMA_IRQHandler+0x262>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002228:	2b00      	cmp	r3, #0
 800222a:	d111      	bne.n	8002250 <HAL_DMA_IRQHandler+0x262>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002238:	2201      	movs	r2, #1
 800223a:	731a      	strb	r2, [r3, #12]
 800223c:	e008      	b.n	8002250 <HAL_DMA_IRQHandler+0x262>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <HAL_DMA_IRQHandler+0x262>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002258:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_DMA_IRQHandler+0x284>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	2b00      	cmp	r3, #0
 8002278:	d032      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x2f2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0202 	orr.w	r2, r2, #2
 8002288:	615a      	str	r2, [r3, #20]

    /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
    __NOP();
 800228a:	bf00      	nop

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x2b6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80022a2:	e003      	b.n	80022ac <HAL_DMA_IRQHandler+0x2be>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2d2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022bc:	2201      	movs	r2, #1
 80022be:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x2f2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
 80022d8:	e002      	b.n	80022e0 <HAL_DMA_IRQHandler+0x2f2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80022da:	bf00      	nop
 80022dc:	e000      	b.n	80022e0 <HAL_DMA_IRQHandler+0x2f2>
        return;
 80022de:	bf00      	nop
    }
  }
}
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e02b      	b.n	8002352 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002302:	f023 030f 	bic.w	r3, r3, #15
 8002306:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	3b50      	subs	r3, #80	@ 0x50
 8002312:	09db      	lsrs	r3, r3, #7
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2201      	movs	r2, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d012      	beq.n	8002350 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f003 0311 	and.w	r3, r3, #17
 8002330:	2b11      	cmp	r3, #17
 8002332:	d106      	bne.n	8002342 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	431a      	orrs	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	e006      	b.n	8002350 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff fcda 	bl	8001d20 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0db      	b.n	8002530 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6e      	ldr	r2, [pc, #440]	@ (8002538 <HAL_DMAEx_List_Init+0x1d8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	f000 809f 	beq.w	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6c      	ldr	r2, [pc, #432]	@ (800253c <HAL_DMAEx_List_Init+0x1dc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	f000 8099 	beq.w	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6a      	ldr	r2, [pc, #424]	@ (8002540 <HAL_DMAEx_List_Init+0x1e0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f000 8093 	beq.w	80024c2 <HAL_DMAEx_List_Init+0x162>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a68      	ldr	r2, [pc, #416]	@ (8002544 <HAL_DMAEx_List_Init+0x1e4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	f000 808d 	beq.w	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a66      	ldr	r2, [pc, #408]	@ (8002548 <HAL_DMAEx_List_Init+0x1e8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f000 8087 	beq.w	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a64      	ldr	r2, [pc, #400]	@ (800254c <HAL_DMAEx_List_Init+0x1ec>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	f000 8081 	beq.w	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a62      	ldr	r2, [pc, #392]	@ (8002550 <HAL_DMAEx_List_Init+0x1f0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d07b      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a61      	ldr	r2, [pc, #388]	@ (8002554 <HAL_DMAEx_List_Init+0x1f4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d076      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002558 <HAL_DMAEx_List_Init+0x1f8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d071      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5e      	ldr	r2, [pc, #376]	@ (800255c <HAL_DMAEx_List_Init+0x1fc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d06c      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5c      	ldr	r2, [pc, #368]	@ (8002560 <HAL_DMAEx_List_Init+0x200>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d067      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002564 <HAL_DMAEx_List_Init+0x204>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d062      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a59      	ldr	r2, [pc, #356]	@ (8002568 <HAL_DMAEx_List_Init+0x208>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d05d      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a58      	ldr	r2, [pc, #352]	@ (800256c <HAL_DMAEx_List_Init+0x20c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d058      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a56      	ldr	r2, [pc, #344]	@ (8002570 <HAL_DMAEx_List_Init+0x210>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d053      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a55      	ldr	r2, [pc, #340]	@ (8002574 <HAL_DMAEx_List_Init+0x214>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d04e      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a53      	ldr	r2, [pc, #332]	@ (8002578 <HAL_DMAEx_List_Init+0x218>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d049      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a52      	ldr	r2, [pc, #328]	@ (800257c <HAL_DMAEx_List_Init+0x21c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d044      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a50      	ldr	r2, [pc, #320]	@ (8002580 <HAL_DMAEx_List_Init+0x220>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d03f      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4f      	ldr	r2, [pc, #316]	@ (8002584 <HAL_DMAEx_List_Init+0x224>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d03a      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a4d      	ldr	r2, [pc, #308]	@ (8002588 <HAL_DMAEx_List_Init+0x228>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d035      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4c      	ldr	r2, [pc, #304]	@ (800258c <HAL_DMAEx_List_Init+0x22c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d030      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a4a      	ldr	r2, [pc, #296]	@ (8002590 <HAL_DMAEx_List_Init+0x230>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d02b      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a49      	ldr	r2, [pc, #292]	@ (8002594 <HAL_DMAEx_List_Init+0x234>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d026      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a47      	ldr	r2, [pc, #284]	@ (8002598 <HAL_DMAEx_List_Init+0x238>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d021      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_DMAEx_List_Init+0x23c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d01c      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a44      	ldr	r2, [pc, #272]	@ (80025a0 <HAL_DMAEx_List_Init+0x240>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d017      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a43      	ldr	r2, [pc, #268]	@ (80025a4 <HAL_DMAEx_List_Init+0x244>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d012      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a41      	ldr	r2, [pc, #260]	@ (80025a8 <HAL_DMAEx_List_Init+0x248>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a40      	ldr	r2, [pc, #256]	@ (80025ac <HAL_DMAEx_List_Init+0x24c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d008      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3e      	ldr	r2, [pc, #248]	@ (80025b0 <HAL_DMAEx_List_Init+0x250>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d003      	beq.n	80024c2 <HAL_DMAEx_List_Init+0x162>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a3d      	ldr	r2, [pc, #244]	@ (80025b4 <HAL_DMAEx_List_Init+0x254>)
 80024c0:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0206 	orr.w	r2, r2, #6
 80024e0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80024e2:	e00f      	b.n	8002504 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80024e4:	f7ff fc1c 	bl	8001d20 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d908      	bls.n	8002504 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2210      	movs	r2, #16
 80024f6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2203      	movs	r2, #3
 80024fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e015      	b.n	8002530 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e8      	bne.n	80024e4 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa26 	bl	8002964 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40020050 	.word	0x40020050
 800253c:	50020050 	.word	0x50020050
 8002540:	400200d0 	.word	0x400200d0
 8002544:	500200d0 	.word	0x500200d0
 8002548:	40020150 	.word	0x40020150
 800254c:	50020150 	.word	0x50020150
 8002550:	400201d0 	.word	0x400201d0
 8002554:	500201d0 	.word	0x500201d0
 8002558:	40020250 	.word	0x40020250
 800255c:	50020250 	.word	0x50020250
 8002560:	400202d0 	.word	0x400202d0
 8002564:	500202d0 	.word	0x500202d0
 8002568:	40020350 	.word	0x40020350
 800256c:	50020350 	.word	0x50020350
 8002570:	400203d0 	.word	0x400203d0
 8002574:	500203d0 	.word	0x500203d0
 8002578:	40020450 	.word	0x40020450
 800257c:	50020450 	.word	0x50020450
 8002580:	400204d0 	.word	0x400204d0
 8002584:	500204d0 	.word	0x500204d0
 8002588:	40020550 	.word	0x40020550
 800258c:	50020550 	.word	0x50020550
 8002590:	400205d0 	.word	0x400205d0
 8002594:	500205d0 	.word	0x500205d0
 8002598:	40020650 	.word	0x40020650
 800259c:	50020650 	.word	0x50020650
 80025a0:	400206d0 	.word	0x400206d0
 80025a4:	500206d0 	.word	0x500206d0
 80025a8:	40020750 	.word	0x40020750
 80025ac:	50020750 	.word	0x50020750
 80025b0:	400207d0 	.word	0x400207d0
 80025b4:	500207d0 	.word	0x500207d0

080025b8 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_DMAEx_List_BuildNode+0x16>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e004      	b.n	80025dc <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb1d 	bl	8002c14 <DMA_List_BuildNode>

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	@ 0x30
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_DMAEx_List_InsertNode+0x18>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b6      	b.n	800276e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d104      	bne.n	8002612 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2204      	movs	r2, #4
 800260c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0ad      	b.n	800276e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fc4c 	bl	8002eb8 <DMA_List_CheckNodesBaseAddresses>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2205      	movs	r2, #5
 800262a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e09e      	b.n	800276e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fc6d 	bl	8002f18 <DMA_List_CheckNodesTypes>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2204      	movs	r2, #4
 8002648:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e08f      	b.n	800276e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2202      	movs	r2, #2
 8002652:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800265a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800265e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fc93 	bl	8002f90 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11a      	bne.n	80026a8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	e06c      	b.n	8002760 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002692:	4013      	ands	r3, r2
 8002694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002698:	4319      	orrs	r1, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2202      	movs	r2, #2
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	e05b      	b.n	8002760 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80026b8:	4013      	ands	r3, r2
 80026ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026be:	4319      	orrs	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e043      	b.n	8002756 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80026ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	461a      	mov	r2, r3
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fc88 	bl	8002ff0 <DMA_List_FindNode>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d132      	bne.n	800274c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d11a      	bne.n	8002726 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002702:	4013      	ands	r3, r2
 8002704:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002708:	4319      	orrs	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002716:	4013      	ands	r3, r2
 8002718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800271a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800271c:	4319      	orrs	r1, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002724:	e017      	b.n	8002756 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8002726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800273c:	4013      	ands	r3, r2
 800273e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002742:	4319      	orrs	r1, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800274a:	e004      	b.n	8002756 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2206      	movs	r2, #6
 8002750:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00b      	b.n	800276e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3730      	adds	r7, #48	@ 0x30
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b08a      	sub	sp, #40	@ 0x28
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e052      	b.n	800282e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e049      	b.n	800282e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d101      	bne.n	80027b2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e03d      	b.n	800282e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2204      	movs	r2, #4
 80027b6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e038      	b.n	800282e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d104      	bne.n	80027ce <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e02f      	b.n	800282e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f107 0220 	add.w	r2, r7, #32
 80027e2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fbd2 	bl	8002f90 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	461a      	mov	r2, r3
 80027f6:	2100      	movs	r1, #0
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fbf9 	bl	8002ff0 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002808:	4013      	ands	r3, r2
 800280a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4610      	mov	r0, r2
 8002810:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002812:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8002814:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3728      	adds	r7, #40	@ 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_DMAEx_List_LinkQ+0x16>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e072      	b.n	8002938 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002858:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d002      	beq.n	800286c <HAL_DMAEx_List_LinkQ+0x34>
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b05      	cmp	r3, #5
 800286a:	d108      	bne.n	800287e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2240      	movs	r2, #64	@ 0x40
 8002870:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e05c      	b.n	8002938 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7b1b      	ldrb	r3, [r3, #12]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d104      	bne.n	8002892 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e052      	b.n	8002938 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2b      	ldr	r2, [pc, #172]	@ (8002944 <HAL_DMAEx_List_LinkQ+0x10c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_DMAEx_List_LinkQ+0xaa>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a29      	ldr	r2, [pc, #164]	@ (8002948 <HAL_DMAEx_List_LinkQ+0x110>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01d      	beq.n	80028e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a28      	ldr	r2, [pc, #160]	@ (800294c <HAL_DMAEx_List_LinkQ+0x114>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <HAL_DMAEx_List_LinkQ+0x118>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a25      	ldr	r2, [pc, #148]	@ (8002954 <HAL_DMAEx_List_LinkQ+0x11c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a23      	ldr	r2, [pc, #140]	@ (8002958 <HAL_DMAEx_List_LinkQ+0x120>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a22      	ldr	r2, [pc, #136]	@ (800295c <HAL_DMAEx_List_LinkQ+0x124>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_DMAEx_List_LinkQ+0xaa>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a20      	ldr	r2, [pc, #128]	@ (8002960 <HAL_DMAEx_List_LinkQ+0x128>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_DMAEx_List_LinkQ+0xae>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_DMAEx_List_LinkQ+0xb0>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2203      	movs	r2, #3
 80028fe:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e019      	b.n	8002938 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002908:	2b81      	cmp	r3, #129	@ 0x81
 800290a:	d108      	bne.n	800291e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2204      	movs	r2, #4
 8002918:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e00c      	b.n	8002938 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2204      	movs	r2, #4
 800292a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e003      	b.n	8002938 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40020650 	.word	0x40020650
 8002948:	50020650 	.word	0x50020650
 800294c:	400206d0 	.word	0x400206d0
 8002950:	500206d0 	.word	0x500206d0
 8002954:	40020750 	.word	0x40020750
 8002958:	50020750 	.word	0x50020750
 800295c:	400207d0 	.word	0x400207d0
 8002960:	500207d0 	.word	0x500207d0

08002964 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a85      	ldr	r2, [pc, #532]	@ (8002b94 <DMA_List_Init+0x230>)
 800297e:	4293      	cmp	r3, r2
 8002980:	f000 80a0 	beq.w	8002ac4 <DMA_List_Init+0x160>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a83      	ldr	r2, [pc, #524]	@ (8002b98 <DMA_List_Init+0x234>)
 800298a:	4293      	cmp	r3, r2
 800298c:	f000 809a 	beq.w	8002ac4 <DMA_List_Init+0x160>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a81      	ldr	r2, [pc, #516]	@ (8002b9c <DMA_List_Init+0x238>)
 8002996:	4293      	cmp	r3, r2
 8002998:	f000 8094 	beq.w	8002ac4 <DMA_List_Init+0x160>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ba0 <DMA_List_Init+0x23c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	f000 808e 	beq.w	8002ac4 <DMA_List_Init+0x160>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a7d      	ldr	r2, [pc, #500]	@ (8002ba4 <DMA_List_Init+0x240>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	f000 8088 	beq.w	8002ac4 <DMA_List_Init+0x160>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ba8 <DMA_List_Init+0x244>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	f000 8082 	beq.w	8002ac4 <DMA_List_Init+0x160>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a79      	ldr	r2, [pc, #484]	@ (8002bac <DMA_List_Init+0x248>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d07c      	beq.n	8002ac4 <DMA_List_Init+0x160>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a78      	ldr	r2, [pc, #480]	@ (8002bb0 <DMA_List_Init+0x24c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d077      	beq.n	8002ac4 <DMA_List_Init+0x160>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a76      	ldr	r2, [pc, #472]	@ (8002bb4 <DMA_List_Init+0x250>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d072      	beq.n	8002ac4 <DMA_List_Init+0x160>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a75      	ldr	r2, [pc, #468]	@ (8002bb8 <DMA_List_Init+0x254>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d06d      	beq.n	8002ac4 <DMA_List_Init+0x160>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a73      	ldr	r2, [pc, #460]	@ (8002bbc <DMA_List_Init+0x258>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d068      	beq.n	8002ac4 <DMA_List_Init+0x160>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a72      	ldr	r2, [pc, #456]	@ (8002bc0 <DMA_List_Init+0x25c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d063      	beq.n	8002ac4 <DMA_List_Init+0x160>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a70      	ldr	r2, [pc, #448]	@ (8002bc4 <DMA_List_Init+0x260>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d05e      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6f      	ldr	r2, [pc, #444]	@ (8002bc8 <DMA_List_Init+0x264>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d059      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a6d      	ldr	r2, [pc, #436]	@ (8002bcc <DMA_List_Init+0x268>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d054      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6c      	ldr	r2, [pc, #432]	@ (8002bd0 <DMA_List_Init+0x26c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d04f      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd4 <DMA_List_Init+0x270>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d04a      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a69      	ldr	r2, [pc, #420]	@ (8002bd8 <DMA_List_Init+0x274>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d045      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a67      	ldr	r2, [pc, #412]	@ (8002bdc <DMA_List_Init+0x278>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d040      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a66      	ldr	r2, [pc, #408]	@ (8002be0 <DMA_List_Init+0x27c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d03b      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a64      	ldr	r2, [pc, #400]	@ (8002be4 <DMA_List_Init+0x280>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d036      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a63      	ldr	r2, [pc, #396]	@ (8002be8 <DMA_List_Init+0x284>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d031      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a61      	ldr	r2, [pc, #388]	@ (8002bec <DMA_List_Init+0x288>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02c      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a60      	ldr	r2, [pc, #384]	@ (8002bf0 <DMA_List_Init+0x28c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d027      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf4 <DMA_List_Init+0x290>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf8 <DMA_List_Init+0x294>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01d      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a5b      	ldr	r2, [pc, #364]	@ (8002bfc <DMA_List_Init+0x298>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a5a      	ldr	r2, [pc, #360]	@ (8002c00 <DMA_List_Init+0x29c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	@ (8002c04 <DMA_List_Init+0x2a0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a57      	ldr	r2, [pc, #348]	@ (8002c08 <DMA_List_Init+0x2a4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a55      	ldr	r2, [pc, #340]	@ (8002c0c <DMA_List_Init+0x2a8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <DMA_List_Init+0x160>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a54      	ldr	r2, [pc, #336]	@ (8002c10 <DMA_List_Init+0x2ac>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <DMA_List_Init+0x164>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <DMA_List_Init+0x166>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a36      	ldr	r2, [pc, #216]	@ (8002bf4 <DMA_List_Init+0x290>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <DMA_List_Init+0x202>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a34      	ldr	r2, [pc, #208]	@ (8002bf8 <DMA_List_Init+0x294>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01d      	beq.n	8002b66 <DMA_List_Init+0x202>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a33      	ldr	r2, [pc, #204]	@ (8002bfc <DMA_List_Init+0x298>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d018      	beq.n	8002b66 <DMA_List_Init+0x202>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a31      	ldr	r2, [pc, #196]	@ (8002c00 <DMA_List_Init+0x29c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <DMA_List_Init+0x202>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a30      	ldr	r2, [pc, #192]	@ (8002c04 <DMA_List_Init+0x2a0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00e      	beq.n	8002b66 <DMA_List_Init+0x202>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c08 <DMA_List_Init+0x2a4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <DMA_List_Init+0x202>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2d      	ldr	r2, [pc, #180]	@ (8002c0c <DMA_List_Init+0x2a8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <DMA_List_Init+0x202>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2b      	ldr	r2, [pc, #172]	@ (8002c10 <DMA_List_Init+0x2ac>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <DMA_List_Init+0x206>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <DMA_List_Init+0x208>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40020050 	.word	0x40020050
 8002b98:	50020050 	.word	0x50020050
 8002b9c:	400200d0 	.word	0x400200d0
 8002ba0:	500200d0 	.word	0x500200d0
 8002ba4:	40020150 	.word	0x40020150
 8002ba8:	50020150 	.word	0x50020150
 8002bac:	400201d0 	.word	0x400201d0
 8002bb0:	500201d0 	.word	0x500201d0
 8002bb4:	40020250 	.word	0x40020250
 8002bb8:	50020250 	.word	0x50020250
 8002bbc:	400202d0 	.word	0x400202d0
 8002bc0:	500202d0 	.word	0x500202d0
 8002bc4:	40020350 	.word	0x40020350
 8002bc8:	50020350 	.word	0x50020350
 8002bcc:	400203d0 	.word	0x400203d0
 8002bd0:	500203d0 	.word	0x500203d0
 8002bd4:	40020450 	.word	0x40020450
 8002bd8:	50020450 	.word	0x50020450
 8002bdc:	400204d0 	.word	0x400204d0
 8002be0:	500204d0 	.word	0x500204d0
 8002be4:	40020550 	.word	0x40020550
 8002be8:	50020550 	.word	0x50020550
 8002bec:	400205d0 	.word	0x400205d0
 8002bf0:	500205d0 	.word	0x500205d0
 8002bf4:	40020650 	.word	0x40020650
 8002bf8:	50020650 	.word	0x50020650
 8002bfc:	400206d0 	.word	0x400206d0
 8002c00:	500206d0 	.word	0x500206d0
 8002c04:	40020750 	.word	0x40020750
 8002c08:	50020750 	.word	0x50020750
 8002c0c:	400207d0 	.word	0x400207d0
 8002c10:	500207d0 	.word	0x500207d0

08002c14 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002c26:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8002c2c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8002c32:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8002c38:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d017      	beq.n	8002c7a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	051b      	lsls	r3, r3, #20
 8002c60:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8002c64:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8002c72:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8002c74:	431a      	orrs	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	f240 237f 	movw	r3, #639	@ 0x27f
 8002c86:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c96:	d10c      	bne.n	8002cb2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d011      	beq.n	8002cc8 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	e00a      	b.n	8002cc8 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cba:	d105      	bne.n	8002cc8 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00f      	beq.n	8002cf0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8002ce8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8002cea:	431a      	orrs	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d04e      	beq.n	8002da4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	0419      	lsls	r1, r3, #16
 8002d12:	4b67      	ldr	r3, [pc, #412]	@ (8002eb0 <DMA_List_BuildNode+0x29c>)
 8002d14:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8002d16:	431a      	orrs	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da06      	bge.n	8002d32 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e005      	b.n	8002d3e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da06      	bge.n	8002d54 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	e005      	b.n	8002d60 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da06      	bge.n	8002d76 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e005      	b.n	8002d82 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da06      	bge.n	8002d98 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	e005      	b.n	8002da4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d059      	beq.n	8002e74 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da09      	bge.n	8002ddc <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dcc:	425b      	negs	r3, r3
 8002dce:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	615a      	str	r2, [r3, #20]
 8002dda:	e005      	b.n	8002de8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	da0d      	bge.n	8002e0c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	425b      	negs	r3, r3
 8002df6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	0419      	lsls	r1, r3, #16
 8002e00:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb4 <DMA_List_BuildNode+0x2a0>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	615a      	str	r2, [r3, #20]
 8002e0a:	e009      	b.n	8002e20 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	0419      	lsls	r1, r3, #16
 8002e16:	4b27      	ldr	r3, [pc, #156]	@ (8002eb4 <DMA_List_BuildNode+0x2a0>)
 8002e18:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	da08      	bge.n	8002e3a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	619a      	str	r2, [r3, #24]
 8002e38:	e004      	b.n	8002e44 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da0b      	bge.n	8002e64 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	425b      	negs	r3, r3
 8002e52:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	619a      	str	r2, [r3, #24]
 8002e62:	e007      	b.n	8002e74 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8002e94:	e005      	b.n	8002ea2 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	07ff0000 	.word	0x07ff0000
 8002eb4:	1fff0000 	.word	0x1fff0000

08002eb8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e00a      	b.n	8002efa <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e004      	b.n	8002efa <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e00e      	b.n	8002f56 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d004      	beq.n	8002f48 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e006      	b.n	8002f56 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e00b      	b.n	8002f84 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d001      	beq.n	8002f82 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e000      	b.n	8002f84 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00c      	beq.n	8002fc2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe8 <DMA_List_GetCLLRNodeInfo+0x58>)
 8002fb2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00f      	beq.n	8002fda <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002fc0:	e00b      	b.n	8002fda <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4a08      	ldr	r2, [pc, #32]	@ (8002fec <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002fcc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2205      	movs	r2, #5
 8002fd8:	601a      	str	r2, [r3, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	fe010000 	.word	0xfe010000
 8002fec:	f8010000 	.word	0xf8010000

08002ff0 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	@ 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d142      	bne.n	800309a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003014:	e01d      	b.n	8003052 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e00f      	b.n	800304c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003044:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	3301      	adds	r3, #1
 8003050:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3dc      	bcc.n	8003016 <DMA_List_FindNode+0x26>
 800305c:	e029      	b.n	80030b2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	e00f      	b.n	8003094 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4413      	add	r3, r2
 8003084:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800308c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d206      	bcs.n	80030b2 <DMA_List_FindNode+0xc2>
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80030aa:	4013      	ands	r3, r2
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d1d5      	bne.n	800305e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80030be:	4013      	ands	r3, r2
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d001      	beq.n	80030ca <DMA_List_FindNode+0xda>
    {
      return 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e02b      	b.n	8003122 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	041b      	lsls	r3, r3, #16
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	461a      	mov	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00f      	beq.n	8003120 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	461a      	mov	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003110:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	@ 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003142:	e1ba      	b.n	80034ba <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 81aa 	beq.w	80034b4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a55      	ldr	r2, [pc, #340]	@ (80032b8 <HAL_GPIO_Init+0x188>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d15d      	bne.n	8003224 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800316e:	2201      	movs	r2, #1
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	4013      	ands	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	4313      	orrs	r3, r2
 8003190:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003198:	4a48      	ldr	r2, [pc, #288]	@ (80032bc <HAL_GPIO_Init+0x18c>)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031a0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80031a2:	4a46      	ldr	r2, [pc, #280]	@ (80032bc <HAL_GPIO_Init+0x18c>)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	3208      	adds	r2, #8
 80031b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	220b      	movs	r2, #11
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3208      	adds	r2, #8
 80031ee:	69f9      	ldr	r1, [r7, #28]
 80031f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	4013      	ands	r3, r2
 800320a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	2202      	movs	r2, #2
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	4313      	orrs	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e067      	b.n	80032f4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x104>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b12      	cmp	r3, #18
 8003232:	d145      	bne.n	80032c0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	4013      	ands	r3, r2
 8003256:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	4313      	orrs	r3, r2
 8003270:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	08da      	lsrs	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3208      	adds	r2, #8
 800327a:	69f9      	ldr	r1, [r7, #28]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	4013      	ands	r3, r2
 8003296:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e01e      	b.n	80032f4 <HAL_GPIO_Init+0x1c4>
 80032b6:	bf00      	nop
 80032b8:	46020000 	.word	0x46020000
 80032bc:	0800d9b4 	.word	0x0800d9b4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0203 	and.w	r2, r3, #3
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d00b      	beq.n	8003314 <HAL_GPIO_Init+0x1e4>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d007      	beq.n	8003314 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003308:	2b11      	cmp	r3, #17
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b12      	cmp	r3, #18
 8003312:	d130      	bne.n	8003376 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	4013      	ands	r3, r2
 800332a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	4313      	orrs	r3, r2
 800333c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800334a:	2201      	movs	r2, #1
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	4013      	ands	r3, r2
 8003358:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 0201 	and.w	r2, r3, #1
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	4313      	orrs	r3, r2
 800336e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d017      	beq.n	80033ae <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	4013      	ands	r3, r2
 8003394:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d07c      	beq.n	80034b4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80033ba:	4a47      	ldr	r2, [pc, #284]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3318      	adds	r3, #24
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	4013      	ands	r3, r2
 80033dc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0a9a      	lsrs	r2, r3, #10
 80033e2:	4b3e      	ldr	r3, [pc, #248]	@ (80034dc <HAL_GPIO_Init+0x3ac>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	f002 0203 	and.w	r2, r2, #3
 80033ec:	00d2      	lsls	r2, r2, #3
 80033ee:	4093      	lsls	r3, r2
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80033f6:	4938      	ldr	r1, [pc, #224]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3318      	adds	r3, #24
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003404:	4b34      	ldr	r3, [pc, #208]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	43db      	mvns	r3, r3
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	4013      	ands	r3, r2
 8003412:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003428:	4a2b      	ldr	r2, [pc, #172]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800342e:	4b2a      	ldr	r3, [pc, #168]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	43db      	mvns	r3, r3
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	4013      	ands	r3, r2
 800343c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003452:	4a21      	ldr	r2, [pc, #132]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 800345a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800345e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43db      	mvns	r3, r3
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	4013      	ands	r3, r2
 8003468:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800347e:	4a16      	ldr	r2, [pc, #88]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003486:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 8003488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800348c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43db      	mvns	r3, r3
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	4013      	ands	r3, r2
 8003496:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80034ac:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <HAL_GPIO_Init+0x3a8>)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3301      	adds	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f ae3d 	bne.w	8003144 <HAL_GPIO_Init+0x14>
  }
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	3724      	adds	r7, #36	@ 0x24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	46022000 	.word	0x46022000
 80034dc:	002f7f7f 	.word	0x002f7f7f

080034e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034f0:	787b      	ldrb	r3, [r7, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80034fc:	e002      	b.n	8003504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800351a:	4b0f      	ldr	r3, [pc, #60]	@ (8003558 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003526:	4a0c      	ldr	r2, [pc, #48]	@ (8003558 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f814 	bl	800355c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003534:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d006      	beq.n	800354e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003540:	4a05      	ldr	r2, [pc, #20]	@ (8003558 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f812 	bl	8003572 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	46022000 	.word	0x46022000

0800355c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_ICACHE_Enable+0x1c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a04      	ldr	r2, [pc, #16]	@ (80035a4 <HAL_ICACHE_Enable+0x1c>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40030400 	.word	0x40030400

080035a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	b08f      	sub	sp, #60	@ 0x3c
 80035ac:	af0a      	add	r7, sp, #40	@ 0x28
 80035ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e10a      	b.n	80037d0 <HAL_PCD_Init+0x228>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe f922 	bl	8001818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2203      	movs	r2, #3
 80035d8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f006 ffed 	bl	800a5c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	687e      	ldr	r6, [r7, #4]
 80035ee:	466d      	mov	r5, sp
 80035f0:	f106 0410 	add.w	r4, r6, #16
 80035f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003600:	e885 0003 	stmia.w	r5, {r0, r1}
 8003604:	1d33      	adds	r3, r6, #4
 8003606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003608:	6838      	ldr	r0, [r7, #0]
 800360a:	f006 ff09 	bl	800a420 <USB_CoreInit>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0d7      	b.n	80037d0 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f006 ffdb 	bl	800a5e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e04a      	b.n	80036c8 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	333d      	adds	r3, #61	@ 0x3d
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	333c      	adds	r3, #60	@ 0x3c
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	b298      	uxth	r0, r3
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3356      	adds	r3, #86	@ 0x56
 800366e:	4602      	mov	r2, r0
 8003670:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3340      	adds	r3, #64	@ 0x40
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3344      	adds	r3, #68	@ 0x44
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	3348      	adds	r3, #72	@ 0x48
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	334c      	adds	r3, #76	@ 0x4c
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	3301      	adds	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d3af      	bcc.n	8003632 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	e044      	b.n	8003762 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	3301      	adds	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d3b5      	bcc.n	80036d8 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	687e      	ldr	r6, [r7, #4]
 8003774:	466d      	mov	r5, sp
 8003776:	f106 0410 	add.w	r4, r6, #16
 800377a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800377c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800377e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003782:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003786:	e885 0003 	stmia.w	r5, {r0, r1}
 800378a:	1d33      	adds	r3, r6, #4
 800378c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378e:	6838      	ldr	r0, [r7, #0]
 8003790:	f006 ff74 	bl	800a67c <USB_DevInit>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e014      	b.n	80037d0 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d102      	bne.n	80037c4 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 ff38 	bl	8004634 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f007 fa9f 	bl	800ad0c <USB_DevDisconnect>

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b08d      	sub	sp, #52	@ 0x34
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f007 fb40 	bl	800ae74 <USB_GetMode>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 84b7 	bne.w	800416a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f007 faa4 	bl	800ad4e <USB_ReadInterrupts>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 84ad 	beq.w	8004168 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f007 fa91 	bl	800ad4e <USB_ReadInterrupts>
 800382c:	4603      	mov	r3, r0
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d107      	bne.n	8003846 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f002 0202 	and.w	r2, r2, #2
 8003844:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f007 fa7f 	bl	800ad4e <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b10      	cmp	r3, #16
 8003858:	d161      	bne.n	800391e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0210 	bic.w	r2, r2, #16
 8003868:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	0c5b      	lsrs	r3, r3, #17
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	2b02      	cmp	r3, #2
 8003894:	d124      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d035      	beq.n	800390e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	6a38      	ldr	r0, [r7, #32]
 80038b6:	f007 f9d1 	bl	800ac5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c6:	441a      	add	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d8:	441a      	add	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	615a      	str	r2, [r3, #20]
 80038de:	e016      	b.n	800390e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	0c5b      	lsrs	r3, r3, #17
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d110      	bne.n	800390e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80038f2:	2208      	movs	r2, #8
 80038f4:	4619      	mov	r1, r3
 80038f6:	6a38      	ldr	r0, [r7, #32]
 80038f8:	f007 f9b0 	bl	800ac5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003908:	441a      	add	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0210 	orr.w	r2, r2, #16
 800391c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f007 fa13 	bl	800ad4e <USB_ReadInterrupts>
 8003928:	4603      	mov	r3, r0
 800392a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800392e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003932:	f040 80a7 	bne.w	8003a84 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f007 fa18 	bl	800ad74 <USB_ReadDevAllOutEpInterrupt>
 8003944:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003946:	e099      	b.n	8003a7c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 808e 	beq.w	8003a70 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f007 fa3c 	bl	800addc <USB_ReadDevOutEPInterrupt>
 8003964:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00c      	beq.n	800398a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397c:	461a      	mov	r2, r3
 800397e:	2301      	movs	r3, #1
 8003980:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fd27 	bl	80043d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00c      	beq.n	80039ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a0:	461a      	mov	r2, r3
 80039a2:	2308      	movs	r3, #8
 80039a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fdfd 	bl	80045a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c4:	461a      	mov	r2, r3
 80039c6:	2310      	movs	r3, #16
 80039c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d030      	beq.n	8003a36 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b80      	cmp	r3, #128	@ 0x80
 80039de:	d109      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	3304      	adds	r3, #4
 8003a08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	78db      	ldrb	r3, [r3, #3]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fbf0 	bl	8004204 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	2302      	movs	r3, #2
 8003a34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2320      	movs	r3, #32
 8003a50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	3301      	adds	r3, #1
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f47f af62 	bne.w	8003948 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f007 f960 	bl	800ad4e <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a98:	f040 80db 	bne.w	8003c52 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f007 f981 	bl	800ada8 <USB_ReadDevAllInEpInterrupt>
 8003aa6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003aac:	e0cd      	b.n	8003c4a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80c2 	beq.w	8003c3e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f007 f9a7 	bl	800ae18 <USB_ReadDevInEPInterrupt>
 8003aca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d057      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	2201      	movs	r2, #1
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69f9      	ldr	r1, [r7, #28]
 8003af2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003af6:	4013      	ands	r3, r2
 8003af8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b06:	461a      	mov	r2, r3
 8003b08:	2301      	movs	r3, #1
 8003b0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d132      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3348      	adds	r3, #72	@ 0x48
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4403      	add	r3, r0
 8003b34:	3344      	adds	r3, #68	@ 0x44
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4419      	add	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4403      	add	r3, r0
 8003b48:	3348      	adds	r3, #72	@ 0x48
 8003b4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d113      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x3a2>
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	334c      	adds	r3, #76	@ 0x4c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d108      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003b72:	461a      	mov	r2, r3
 8003b74:	2101      	movs	r1, #1
 8003b76:	f007 f9af 	bl	800aed8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb01 	bl	8004188 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2310      	movs	r3, #16
 8003bbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2340      	movs	r3, #64	@ 0x40
 8003bd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d023      	beq.n	8003c2c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003be4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003be6:	6a38      	ldr	r0, [r7, #32]
 8003be8:	f006 feae 	bl	800a948 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	3338      	adds	r3, #56	@ 0x38
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	78db      	ldrb	r3, [r3, #3]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d108      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fb01 	bl	800421c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c26:	461a      	mov	r2, r3
 8003c28:	2302      	movs	r3, #2
 8003c2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fb40 	bl	80042be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	3301      	adds	r3, #1
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f47f af2e 	bne.w	8003aae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f007 f879 	bl	800ad4e <USB_ReadInterrupts>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c66:	d122      	bne.n	8003cae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d108      	bne.n	8003c98 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fcf3 	bl	800467c <HAL_PCDEx_LPM_Callback>
 8003c96:	e002      	b.n	8003c9e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 faa9 	bl	80041f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f007 f84b 	bl	800ad4e <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc2:	d112      	bne.n	8003cea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d102      	bne.n	8003cda <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fa81 	bl	80041dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f007 f82d 	bl	800ad4e <USB_ReadInterrupts>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cfe:	d121      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003d0e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d111      	bne.n	8003d3e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	f003 020f 	and.w	r2, r3, #15
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d34:	2101      	movs	r1, #1
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fca0 	bl	800467c <HAL_PCDEx_LPM_Callback>
 8003d3c:	e002      	b.n	8003d44 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fa4c 	bl	80041dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f007 f800 	bl	800ad4e <USB_ReadInterrupts>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d58:	f040 80b7 	bne.w	8003eca <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2110      	movs	r1, #16
 8003d76:	4618      	mov	r0, r3
 8003d78:	f006 fde6 	bl	800a948 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d80:	e046      	b.n	8003e10 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da6:	0151      	lsls	r1, r2, #5
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	440a      	add	r2, r1
 8003dac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003db0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d3b3      	bcc.n	8003d82 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e28:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e46:	f043 030b 	orr.w	r3, r3, #11
 8003e4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e5c:	f043 030b 	orr.w	r3, r3, #11
 8003e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e62:	e015      	b.n	8003e90 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e76:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e8a:	f043 030b 	orr.w	r3, r3, #11
 8003e8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003ea2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f007 f80f 	bl	800aed8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f006 ff3d 	bl	800ad4e <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ede:	d124      	bne.n	8003f2a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f006 ffd3 	bl	800ae90 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f006 fda7 	bl	800aa42 <USB_GetDevSpeed>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681c      	ldr	r4, [r3, #0]
 8003f00:	f001 fe62 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8003f04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f006 fab4 	bl	800a47c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f957 	bl	80041c8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f006 ff0d 	bl	800ad4e <USB_ReadInterrupts>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d10a      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f938 	bl	80041b4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 0208 	and.w	r2, r2, #8
 8003f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f006 fef8 	bl	800ad4e <USB_ReadInterrupts>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f64:	2b80      	cmp	r3, #128	@ 0x80
 8003f66:	d122      	bne.n	8003fae <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f74:	2301      	movs	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f78:	e014      	b.n	8003fa4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d105      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f95f 	bl	800425c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d3e5      	bcc.n	8003f7a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f006 fecb 	bl	800ad4e <USB_ReadInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc2:	d13b      	bne.n	800403c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc8:	e02b      	b.n	8004022 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3340      	adds	r3, #64	@ 0x40
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d115      	bne.n	800401c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ff0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da12      	bge.n	800401c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	333f      	adds	r3, #63	@ 0x3f
 8004006:	2201      	movs	r2, #1
 8004008:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f920 	bl	800425c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	3301      	adds	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004028:	429a      	cmp	r2, r3
 800402a:	d3ce      	bcc.n	8003fca <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800403a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f006 fe84 	bl	800ad4e <USB_ReadInterrupts>
 8004046:	4603      	mov	r3, r0
 8004048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800404c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004050:	d155      	bne.n	80040fe <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004052:	2301      	movs	r3, #1
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
 8004056:	e045      	b.n	80040e4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d12e      	bne.n	80040de <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004080:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004082:	2b00      	cmp	r3, #0
 8004084:	da2b      	bge.n	80040de <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004092:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004096:	429a      	cmp	r2, r3
 8004098:	d121      	bne.n	80040de <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040da:	6053      	str	r3, [r2, #4]
            break;
 80040dc:	e007      	b.n	80040ee <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	3301      	adds	r3, #1
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d3b4      	bcc.n	8004058 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80040fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f006 fe23 	bl	800ad4e <USB_ReadInterrupts>
 8004108:	4603      	mov	r3, r0
 800410a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d10a      	bne.n	800412a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f88d 	bl	8004234 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f006 fe0d 	bl	800ad4e <USB_ReadInterrupts>
 8004134:	4603      	mov	r3, r0
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b04      	cmp	r3, #4
 800413c:	d115      	bne.n	800416a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f879 	bl	8004248 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6859      	ldr	r1, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	e000      	b.n	800416a <HAL_PCD_IRQHandler+0x992>
      return;
 8004168:	bf00      	nop
    }
  }
}
 800416a:	3734      	adds	r7, #52	@ 0x34
 800416c:	46bd      	mov	sp, r7
 800416e:	bd90      	pop	{r4, r7, pc}

08004170 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800426c:	2b00      	cmp	r3, #0
 800426e:	da0c      	bge.n	800428a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	f003 020f 	and.w	r2, r3, #15
 8004276:	4613      	mov	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	3338      	adds	r3, #56	@ 0x38
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	4413      	add	r3, r2
 8004284:	3304      	adds	r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e00c      	b.n	80042a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 020f 	and.w	r2, r3, #15
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	3304      	adds	r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f006 fbee 	bl	800aa8c <USB_EPStopXfer>
 80042b0:	4603      	mov	r3, r0
 80042b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042b4:	7afb      	ldrb	r3, [r7, #11]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b08a      	sub	sp, #40	@ 0x28
 80042c2:	af02      	add	r7, sp, #8
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	3338      	adds	r3, #56	@ 0x38
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	3304      	adds	r3, #4
 80042e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d901      	bls.n	80042f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e06c      	b.n	80043d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	429a      	cmp	r2, r3
 800430a:	d902      	bls.n	8004312 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3303      	adds	r3, #3
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800431a:	e02b      	b.n	8004374 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	429a      	cmp	r2, r3
 8004330:	d902      	bls.n	8004338 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3303      	adds	r3, #3
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68d9      	ldr	r1, [r3, #12]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004350:	b2db      	uxtb	r3, r3
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	4603      	mov	r3, r0
 8004356:	6978      	ldr	r0, [r7, #20]
 8004358:	f006 fc42 	bl	800abe0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	441a      	add	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	441a      	add	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	429a      	cmp	r2, r3
 8004388:	d809      	bhi.n	800439e <PCD_WriteEmptyTxFifo+0xe0>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004392:	429a      	cmp	r2, r3
 8004394:	d203      	bcs.n	800439e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1be      	bne.n	800431c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d811      	bhi.n	80043ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	2201      	movs	r2, #1
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	6939      	ldr	r1, [r7, #16]
 80043c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043ca:	4013      	ands	r3, r2
 80043cc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	333c      	adds	r3, #60	@ 0x3c
 80043f0:	3304      	adds	r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d17b      	bne.n	8004506 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d015      	beq.n	8004444 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4a61      	ldr	r2, [pc, #388]	@ (80045a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	f240 80b9 	bls.w	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80b3 	beq.w	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443a:	461a      	mov	r2, r3
 800443c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004440:	6093      	str	r3, [r2, #8]
 8004442:	e0a7      	b.n	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	2320      	movs	r3, #32
 800445e:	6093      	str	r3, [r2, #8]
 8004460:	e098      	b.n	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	f040 8093 	bne.w	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4a4b      	ldr	r2, [pc, #300]	@ (80045a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d90f      	bls.n	8004496 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448c:	461a      	mov	r2, r3
 800448e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004492:	6093      	str	r3, [r2, #8]
 8004494:	e07e      	b.n	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	3304      	adds	r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1a      	ldr	r2, [r3, #32]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	0159      	lsls	r1, r3, #5
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	440b      	add	r3, r1
 80044b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d114      	bne.n	80044f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80044e0:	461a      	mov	r2, r3
 80044e2:	2101      	movs	r1, #1
 80044e4:	f006 fcf8 	bl	800aed8 <USB_EP0_OutStart>
 80044e8:	e006      	b.n	80044f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	441a      	add	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fe36 	bl	8004170 <HAL_PCD_DataOutStageCallback>
 8004504:	e046      	b.n	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	4a26      	ldr	r2, [pc, #152]	@ (80045a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d124      	bne.n	8004558 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004524:	461a      	mov	r2, r3
 8004526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800452a:	6093      	str	r3, [r2, #8]
 800452c:	e032      	b.n	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	2320      	movs	r3, #32
 8004548:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	4619      	mov	r1, r3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fe0d 	bl	8004170 <HAL_PCD_DataOutStageCallback>
 8004556:	e01d      	b.n	8004594 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d114      	bne.n	8004588 <PCD_EP_OutXfrComplete_int+0x1b0>
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004580:	461a      	mov	r2, r3
 8004582:	2100      	movs	r1, #0
 8004584:	f006 fca8 	bl	800aed8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fdee 	bl	8004170 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	4f54300a 	.word	0x4f54300a
 80045a4:	4f54310a 	.word	0x4f54310a

080045a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	333c      	adds	r3, #60	@ 0x3c
 80045c0:	3304      	adds	r3, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a15      	ldr	r2, [pc, #84]	@ (8004630 <PCD_EP_OutSetupPacket_int+0x88>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d90e      	bls.n	80045fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f4:	461a      	mov	r2, r3
 80045f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fdcf 	bl	80041a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a0a      	ldr	r2, [pc, #40]	@ (8004630 <PCD_EP_OutSetupPacket_int+0x88>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d90c      	bls.n	8004624 <PCD_EP_OutSetupPacket_int+0x7c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d108      	bne.n	8004624 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800461c:	461a      	mov	r2, r3
 800461e:	2101      	movs	r1, #1
 8004620:	f006 fc5a 	bl	800aed8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	4f54300a 	.word	0x4f54300a

08004634 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004666:	f043 0303 	orr.w	r3, r3, #3
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800469c:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800469e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046a4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d10b      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b4:	d905      	bls.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80046b6:	4b33      	ldr	r3, [pc, #204]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4a32      	ldr	r2, [pc, #200]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80046bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046c0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e057      	b.n	8004776 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046cc:	d90a      	bls.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80046ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4313      	orrs	r3, r2
 80046da:	4a2a      	ldr	r2, [pc, #168]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046e0:	60d3      	str	r3, [r2, #12]
 80046e2:	e007      	b.n	80046f4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80046ec:	4925      	ldr	r1, [pc, #148]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80046f4:	4b24      	ldr	r3, [pc, #144]	@ (8004788 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a24      	ldr	r2, [pc, #144]	@ (800478c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	099b      	lsrs	r3, r3, #6
 8004700:	2232      	movs	r2, #50	@ 0x32
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a21      	ldr	r2, [pc, #132]	@ (800478c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004712:	e002      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800471a:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <HAL_PWREx_ControlVoltageScaling+0x98>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f3      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01b      	beq.n	800476a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004732:	4b15      	ldr	r3, [pc, #84]	@ (8004788 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a15      	ldr	r2, [pc, #84]	@ (800478c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	2232      	movs	r2, #50	@ 0x32
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	4a11      	ldr	r2, [pc, #68]	@ (800478c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	3301      	adds	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004750:	e002      	b.n	8004758 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3b01      	subs	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004758:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800475a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f3      	bne.n	8004752 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e000      	b.n	8004776 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	46020800 	.word	0x46020800
 8004788:	20000000 	.word	0x20000000
 800478c:	10624dd3 	.word	0x10624dd3

08004790 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004794:	4b04      	ldr	r3, [pc, #16]	@ (80047a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	46020800 	.word	0x46020800

080047ac <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	6113      	str	r3, [r2, #16]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	46020800 	.word	0x46020800

080047cc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80047d0:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047da:	6113      	str	r3, [r2, #16]
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	46020800 	.word	0x46020800

080047ec <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80047f2:	f7ff ffcd 	bl	8004790 <HAL_PWREx_GetVoltageRange>
 80047f6:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047fe:	d003      	beq.n	8004808 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004806:	d107      	bne.n	8004818 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a05      	ldr	r2, [pc, #20]	@ (8004824 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800480e:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8004812:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	e000      	b.n	800481a <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	46020800 	.word	0x46020800

08004828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08e      	sub	sp, #56	@ 0x38
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004830:	2300      	movs	r3, #0
 8004832:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f000 bec8 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004842:	4b99      	ldr	r3, [pc, #612]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800484c:	4b96      	ldr	r3, [pc, #600]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 816c 	beq.w	8004b3c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_RCC_OscConfig+0x52>
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	2b0c      	cmp	r3, #12
 800486e:	f040 80de 	bne.w	8004a2e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	2b01      	cmp	r3, #1
 8004876:	f040 80da 	bne.w	8004a2e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f000 bea5 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800488c:	4b86      	ldr	r3, [pc, #536]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <HAL_RCC_OscConfig+0x7a>
 8004898:	4b83      	ldr	r3, [pc, #524]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80048a0:	e005      	b.n	80048ae <HAL_RCC_OscConfig+0x86>
 80048a2:	4b81      	ldr	r3, [pc, #516]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80048a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d255      	bcs.n	800495e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 f9d9 	bl	8005c74 <RCC_SetFlashLatencyFromMSIRange>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f000 be82 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80048ce:	4b76      	ldr	r3, [pc, #472]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	4a75      	ldr	r2, [pc, #468]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80048d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048d8:	6093      	str	r3, [r2, #8]
 80048da:	4b73      	ldr	r3, [pc, #460]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	4970      	ldr	r1, [pc, #448]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80048f4:	d309      	bcc.n	800490a <HAL_RCC_OscConfig+0xe2>
 80048f6:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f023 021f 	bic.w	r2, r3, #31
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	4969      	ldr	r1, [pc, #420]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004904:	4313      	orrs	r3, r2
 8004906:	60cb      	str	r3, [r1, #12]
 8004908:	e07e      	b.n	8004a08 <HAL_RCC_OscConfig+0x1e0>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	da0a      	bge.n	8004928 <HAL_RCC_OscConfig+0x100>
 8004912:	4b65      	ldr	r3, [pc, #404]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	015b      	lsls	r3, r3, #5
 8004920:	4961      	ldr	r1, [pc, #388]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004922:	4313      	orrs	r3, r2
 8004924:	60cb      	str	r3, [r1, #12]
 8004926:	e06f      	b.n	8004a08 <HAL_RCC_OscConfig+0x1e0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004930:	d30a      	bcc.n	8004948 <HAL_RCC_OscConfig+0x120>
 8004932:	4b5d      	ldr	r3, [pc, #372]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	4959      	ldr	r1, [pc, #356]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004942:	4313      	orrs	r3, r2
 8004944:	60cb      	str	r3, [r1, #12]
 8004946:	e05f      	b.n	8004a08 <HAL_RCC_OscConfig+0x1e0>
 8004948:	4b57      	ldr	r3, [pc, #348]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	03db      	lsls	r3, r3, #15
 8004956:	4954      	ldr	r1, [pc, #336]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004958:	4313      	orrs	r3, r2
 800495a:	60cb      	str	r3, [r1, #12]
 800495c:	e054      	b.n	8004a08 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800495e:	4b52      	ldr	r3, [pc, #328]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	4a51      	ldr	r2, [pc, #324]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004964:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004968:	6093      	str	r3, [r2, #8]
 800496a:	4b4f      	ldr	r3, [pc, #316]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	494c      	ldr	r1, [pc, #304]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004984:	d309      	bcc.n	800499a <HAL_RCC_OscConfig+0x172>
 8004986:	4b48      	ldr	r3, [pc, #288]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f023 021f 	bic.w	r2, r3, #31
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	4945      	ldr	r1, [pc, #276]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004994:	4313      	orrs	r3, r2
 8004996:	60cb      	str	r3, [r1, #12]
 8004998:	e028      	b.n	80049ec <HAL_RCC_OscConfig+0x1c4>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da0a      	bge.n	80049b8 <HAL_RCC_OscConfig+0x190>
 80049a2:	4b41      	ldr	r3, [pc, #260]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	015b      	lsls	r3, r3, #5
 80049b0:	493d      	ldr	r1, [pc, #244]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60cb      	str	r3, [r1, #12]
 80049b6:	e019      	b.n	80049ec <HAL_RCC_OscConfig+0x1c4>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c0:	d30a      	bcc.n	80049d8 <HAL_RCC_OscConfig+0x1b0>
 80049c2:	4b39      	ldr	r3, [pc, #228]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	029b      	lsls	r3, r3, #10
 80049d0:	4935      	ldr	r1, [pc, #212]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
 80049d6:	e009      	b.n	80049ec <HAL_RCC_OscConfig+0x1c4>
 80049d8:	4b33      	ldr	r3, [pc, #204]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	03db      	lsls	r3, r3, #15
 80049e6:	4930      	ldr	r1, [pc, #192]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 f93c 	bl	8005c74 <RCC_SetFlashLatencyFromMSIRange>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f000 bde5 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004a08:	f001 f8de 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a0c:	4b27      	ldr	r3, [pc, #156]	@ (8004aac <HAL_RCC_OscConfig+0x284>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fd f93b 	bl	8001c8c <HAL_InitTick>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 808a 	beq.w	8004b3a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004a26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a2a:	f000 bdd2 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d066      	beq.n	8004b04 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004a36:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a42:	f7fd f96d 	bl	8001d20 <HAL_GetTick>
 8004a46:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a48:	e009      	b.n	8004a5e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a4a:	f7fd f969 	bl	8001d20 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d902      	bls.n	8004a5e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	f000 bdba 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a5e:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ef      	beq.n	8004a4a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004a70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a74:	6093      	str	r3, [r2, #8]
 8004a76:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	4909      	ldr	r1, [pc, #36]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a90:	d30e      	bcc.n	8004ab0 <HAL_RCC_OscConfig+0x288>
 8004a92:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f023 021f 	bic.w	r2, r3, #31
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	4902      	ldr	r1, [pc, #8]	@ (8004aa8 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60cb      	str	r3, [r1, #12]
 8004aa4:	e04a      	b.n	8004b3c <HAL_RCC_OscConfig+0x314>
 8004aa6:	bf00      	nop
 8004aa8:	46020c00 	.word	0x46020c00
 8004aac:	20000004 	.word	0x20000004
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da0a      	bge.n	8004ace <HAL_RCC_OscConfig+0x2a6>
 8004ab8:	4b98      	ldr	r3, [pc, #608]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	015b      	lsls	r3, r3, #5
 8004ac6:	4995      	ldr	r1, [pc, #596]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60cb      	str	r3, [r1, #12]
 8004acc:	e036      	b.n	8004b3c <HAL_RCC_OscConfig+0x314>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad6:	d30a      	bcc.n	8004aee <HAL_RCC_OscConfig+0x2c6>
 8004ad8:	4b90      	ldr	r3, [pc, #576]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	029b      	lsls	r3, r3, #10
 8004ae6:	498d      	ldr	r1, [pc, #564]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
 8004aec:	e026      	b.n	8004b3c <HAL_RCC_OscConfig+0x314>
 8004aee:	4b8b      	ldr	r3, [pc, #556]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	03db      	lsls	r3, r3, #15
 8004afc:	4987      	ldr	r1, [pc, #540]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60cb      	str	r3, [r1, #12]
 8004b02:	e01b      	b.n	8004b3c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004b04:	4b85      	ldr	r3, [pc, #532]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a84      	ldr	r2, [pc, #528]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b10:	f7fd f906 	bl	8001d20 <HAL_GetTick>
 8004b14:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004b16:	e009      	b.n	8004b2c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b18:	f7fd f902 	bl	8001d20 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d902      	bls.n	8004b2c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	f000 bd53 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ef      	bne.n	8004b18 <HAL_RCC_OscConfig+0x2f0>
 8004b38:	e000      	b.n	8004b3c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 808b 	beq.w	8004c60 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_OscConfig+0x334>
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d109      	bne.n	8004b6a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d17d      	bne.n	8004c60 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f000 bd34 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b72:	d106      	bne.n	8004b82 <HAL_RCC_OscConfig+0x35a>
 8004b74:	4b69      	ldr	r3, [pc, #420]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a68      	ldr	r2, [pc, #416]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e041      	b.n	8004c06 <HAL_RCC_OscConfig+0x3de>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b8a:	d112      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x38a>
 8004b8c:	4b63      	ldr	r3, [pc, #396]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a62      	ldr	r2, [pc, #392]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b60      	ldr	r3, [pc, #384]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5f      	ldr	r2, [pc, #380]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004b9e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5c      	ldr	r2, [pc, #368]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e029      	b.n	8004c06 <HAL_RCC_OscConfig+0x3de>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004bba:	d112      	bne.n	8004be2 <HAL_RCC_OscConfig+0x3ba>
 8004bbc:	4b57      	ldr	r3, [pc, #348]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a56      	ldr	r2, [pc, #344]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b54      	ldr	r3, [pc, #336]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a53      	ldr	r2, [pc, #332]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b51      	ldr	r3, [pc, #324]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a50      	ldr	r2, [pc, #320]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	e011      	b.n	8004c06 <HAL_RCC_OscConfig+0x3de>
 8004be2:	4b4e      	ldr	r3, [pc, #312]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a4d      	ldr	r2, [pc, #308]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	4b4b      	ldr	r3, [pc, #300]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b48      	ldr	r3, [pc, #288]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a47      	ldr	r2, [pc, #284]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004c00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d014      	beq.n	8004c38 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004c0e:	f7fd f887 	bl	8001d20 <HAL_GetTick>
 8004c12:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c14:	e009      	b.n	8004c2a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c16:	f7fd f883 	bl	8001d20 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b64      	cmp	r3, #100	@ 0x64
 8004c22:	d902      	bls.n	8004c2a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	f000 bcd4 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0ef      	beq.n	8004c16 <HAL_RCC_OscConfig+0x3ee>
 8004c36:	e013      	b.n	8004c60 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004c38:	f7fd f872 	bl	8001d20 <HAL_GetTick>
 8004c3c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c3e:	e009      	b.n	8004c54 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fd f86e 	bl	8001d20 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	@ 0x64
 8004c4c:	d902      	bls.n	8004c54 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	f000 bcbf 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c54:	4b31      	ldr	r3, [pc, #196]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1ef      	bne.n	8004c40 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05f      	beq.n	8004d2c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d005      	beq.n	8004c7e <HAL_RCC_OscConfig+0x456>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d114      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d111      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f000 bca3 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004c8c:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	4920      	ldr	r1, [pc, #128]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ca0:	e044      	b.n	8004d2c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d024      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004caa:	4b1c      	ldr	r3, [pc, #112]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004cb6:	f7fd f833 	bl	8001d20 <HAL_GetTick>
 8004cba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbc:	e009      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cbe:	f7fd f82f 	bl	8001d20 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d902      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	f000 bc80 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd2:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0ef      	beq.n	8004cbe <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004cde:	4b0f      	ldr	r3, [pc, #60]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	490b      	ldr	r1, [pc, #44]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	610b      	str	r3, [r1, #16]
 8004cf2:	e01b      	b.n	8004d2c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004cf4:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a08      	ldr	r2, [pc, #32]	@ (8004d1c <HAL_RCC_OscConfig+0x4f4>)
 8004cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cfe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d00:	f7fd f80e 	bl	8001d20 <HAL_GetTick>
 8004d04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d06:	e00b      	b.n	8004d20 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d08:	f7fd f80a 	bl	8001d20 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d904      	bls.n	8004d20 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	f000 bc5b 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
 8004d1c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d20:	4baf      	ldr	r3, [pc, #700]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ed      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80c8 	beq.w	8004eca <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d40:	4ba7      	ldr	r3, [pc, #668]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d111      	bne.n	8004d72 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4e:	4ba4      	ldr	r3, [pc, #656]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d54:	4aa2      	ldr	r2, [pc, #648]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004d56:	f043 0304 	orr.w	r3, r3, #4
 8004d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004d5e:	4ba0      	ldr	r3, [pc, #640]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d72:	4b9c      	ldr	r3, [pc, #624]	@ (8004fe4 <HAL_RCC_OscConfig+0x7bc>)
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d119      	bne.n	8004db2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004d7e:	4b99      	ldr	r3, [pc, #612]	@ (8004fe4 <HAL_RCC_OscConfig+0x7bc>)
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	4a98      	ldr	r2, [pc, #608]	@ (8004fe4 <HAL_RCC_OscConfig+0x7bc>)
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8a:	f7fc ffc9 	bl	8001d20 <HAL_GetTick>
 8004d8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d90:	e009      	b.n	8004da6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fc ffc5 	bl	8001d20 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d902      	bls.n	8004da6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	f000 bc16 	b.w	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004da6:	4b8f      	ldr	r3, [pc, #572]	@ (8004fe4 <HAL_RCC_OscConfig+0x7bc>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0ef      	beq.n	8004d92 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d05f      	beq.n	8004e7a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004dba:	4b89      	ldr	r3, [pc, #548]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d037      	beq.n	8004e40 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e3f4      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01b      	beq.n	8004e2a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004df2:	4b7b      	ldr	r3, [pc, #492]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004df8:	4a79      	ldr	r2, [pc, #484]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004dfa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004e02:	f7fc ff8d 	bl	8001d20 <HAL_GetTick>
 8004e06:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0a:	f7fc ff89 	bl	8001d20 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b05      	cmp	r3, #5
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e3da      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e1c:	4b70      	ldr	r3, [pc, #448]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ef      	bne.n	8004e0a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	4969      	ldr	r1, [pc, #420]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004e40:	4b67      	ldr	r3, [pc, #412]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e46:	4a66      	ldr	r2, [pc, #408]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004e48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004e50:	f7fc ff66 	bl	8001d20 <HAL_GetTick>
 8004e54:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e58:	f7fc ff62 	bl	8001d20 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e3b3      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ef      	beq.n	8004e58 <HAL_RCC_OscConfig+0x630>
 8004e78:	e01b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004e7a:	4b59      	ldr	r3, [pc, #356]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e80:	4a57      	ldr	r2, [pc, #348]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004e82:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004e86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004e8a:	f7fc ff49 	bl	8001d20 <HAL_GetTick>
 8004e8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e92:	f7fc ff45 	bl	8001d20 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b05      	cmp	r3, #5
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e396      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ea4:	4b4e      	ldr	r3, [pc, #312]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1ef      	bne.n	8004e92 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eb2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d107      	bne.n	8004eca <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eba:	4b49      	ldr	r3, [pc, #292]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec0:	4a47      	ldr	r2, [pc, #284]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004ec2:	f023 0304 	bic.w	r3, r3, #4
 8004ec6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8111 	beq.w	80050fa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ede:	4b40      	ldr	r3, [pc, #256]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d111      	bne.n	8004f10 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eec:	4b3c      	ldr	r3, [pc, #240]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004efc:	4b38      	ldr	r3, [pc, #224]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f10:	4b34      	ldr	r3, [pc, #208]	@ (8004fe4 <HAL_RCC_OscConfig+0x7bc>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d118      	bne.n	8004f4e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f1c:	4b31      	ldr	r3, [pc, #196]	@ (8004fe4 <HAL_RCC_OscConfig+0x7bc>)
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	4a30      	ldr	r2, [pc, #192]	@ (8004fe4 <HAL_RCC_OscConfig+0x7bc>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f28:	f7fc fefa 	bl	8001d20 <HAL_GetTick>
 8004f2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f30:	f7fc fef6 	bl	8001d20 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e347      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f42:	4b28      	ldr	r3, [pc, #160]	@ (8004fe4 <HAL_RCC_OscConfig+0x7bc>)
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01f      	beq.n	8004f9a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f66:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004f6e:	f043 0304 	orr.w	r3, r3, #4
 8004f72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f76:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f7c:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f86:	e018      	b.n	8004fba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f88:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f8e:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f98:	e00f      	b.n	8004fba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f9a:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004faa:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe0 <HAL_RCC_OscConfig+0x7b8>)
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d057      	beq.n	8005072 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004fc2:	f7fc fead 	bl	8001d20 <HAL_GetTick>
 8004fc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fc8:	e00e      	b.n	8004fe8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fca:	f7fc fea9 	bl	8001d20 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d905      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e2f8      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
 8004fe0:	46020c00 	.word	0x46020c00
 8004fe4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe8:	4b9c      	ldr	r3, [pc, #624]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8004fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0e9      	beq.n	8004fca <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01b      	beq.n	800503a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005002:	4b96      	ldr	r3, [pc, #600]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005008:	4a94      	ldr	r2, [pc, #592]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 800500a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005012:	e00a      	b.n	800502a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f7fc fe84 	bl	8001d20 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e2d3      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800502a:	4b8c      	ldr	r3, [pc, #560]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 800502c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ed      	beq.n	8005014 <HAL_RCC_OscConfig+0x7ec>
 8005038:	e053      	b.n	80050e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800503a:	4b88      	ldr	r3, [pc, #544]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 800503c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005040:	4a86      	ldr	r2, [pc, #536]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005046:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800504a:	e00a      	b.n	8005062 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504c:	f7fc fe68 	bl	8001d20 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e2b7      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005062:	4b7e      	ldr	r3, [pc, #504]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ed      	bne.n	800504c <HAL_RCC_OscConfig+0x824>
 8005070:	e037      	b.n	80050e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005072:	f7fc fe55 	bl	8001d20 <HAL_GetTick>
 8005076:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005078:	e00a      	b.n	8005090 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fc fe51 	bl	8001d20 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e2a0      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005090:	4b72      	ldr	r3, [pc, #456]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1ed      	bne.n	800507a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800509e:	4b6f      	ldr	r3, [pc, #444]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80050a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01a      	beq.n	80050e2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80050ac:	4b6b      	ldr	r3, [pc, #428]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80050ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050b2:	4a6a      	ldr	r2, [pc, #424]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80050b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc fe2f 	bl	8001d20 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e27e      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050d4:	4b61      	ldr	r3, [pc, #388]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80050d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ed      	bne.n	80050be <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ea:	4b5c      	ldr	r3, [pc, #368]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f0:	4a5a      	ldr	r2, [pc, #360]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80050f2:	f023 0304 	bic.w	r3, r3, #4
 80050f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d036      	beq.n	8005174 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d019      	beq.n	8005142 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800510e:	4b53      	ldr	r3, [pc, #332]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a52      	ldr	r2, [pc, #328]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005114:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005118:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800511a:	f7fc fe01 	bl	8001d20 <HAL_GetTick>
 800511e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005122:	f7fc fdfd 	bl	8001d20 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e24e      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005134:	4b49      	ldr	r3, [pc, #292]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x8fa>
 8005140:	e018      	b.n	8005174 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005142:	4b46      	ldr	r3, [pc, #280]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a45      	ldr	r2, [pc, #276]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005148:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800514c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800514e:	f7fc fde7 	bl	8001d20 <HAL_GetTick>
 8005152:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005156:	f7fc fde3 	bl	8001d20 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e234      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005168:	4b3c      	ldr	r3, [pc, #240]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d036      	beq.n	80051ee <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	2b00      	cmp	r3, #0
 8005186:	d019      	beq.n	80051bc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005188:	4b34      	ldr	r3, [pc, #208]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a33      	ldr	r2, [pc, #204]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 800518e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005192:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005194:	f7fc fdc4 	bl	8001d20 <HAL_GetTick>
 8005198:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800519c:	f7fc fdc0 	bl	8001d20 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e211      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80051ae:	4b2b      	ldr	r3, [pc, #172]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x974>
 80051ba:	e018      	b.n	80051ee <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80051bc:	4b27      	ldr	r3, [pc, #156]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a26      	ldr	r2, [pc, #152]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80051c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051c8:	f7fc fdaa 	bl	8001d20 <HAL_GetTick>
 80051cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80051d0:	f7fc fda6 	bl	8001d20 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e1f7      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80051e2:	4b1e      	ldr	r3, [pc, #120]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d07f      	beq.n	80052fa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d062      	beq.n	80052c8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005202:	4b16      	ldr	r3, [pc, #88]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	4a15      	ldr	r2, [pc, #84]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005208:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800520c:	6093      	str	r3, [r2, #8]
 800520e:	4b13      	ldr	r3, [pc, #76]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521a:	4910      	ldr	r1, [pc, #64]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 800521c:	4313      	orrs	r3, r2
 800521e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005228:	d309      	bcc.n	800523e <HAL_RCC_OscConfig+0xa16>
 800522a:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 021f 	bic.w	r2, r3, #31
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	4909      	ldr	r1, [pc, #36]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005238:	4313      	orrs	r3, r2
 800523a:	60cb      	str	r3, [r1, #12]
 800523c:	e02a      	b.n	8005294 <HAL_RCC_OscConfig+0xa6c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	da0c      	bge.n	8005260 <HAL_RCC_OscConfig+0xa38>
 8005246:	4b05      	ldr	r3, [pc, #20]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	015b      	lsls	r3, r3, #5
 8005254:	4901      	ldr	r1, [pc, #4]	@ (800525c <HAL_RCC_OscConfig+0xa34>)
 8005256:	4313      	orrs	r3, r2
 8005258:	60cb      	str	r3, [r1, #12]
 800525a:	e01b      	b.n	8005294 <HAL_RCC_OscConfig+0xa6c>
 800525c:	46020c00 	.word	0x46020c00
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005268:	d30a      	bcc.n	8005280 <HAL_RCC_OscConfig+0xa58>
 800526a:	4ba1      	ldr	r3, [pc, #644]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	029b      	lsls	r3, r3, #10
 8005278:	499d      	ldr	r1, [pc, #628]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800527a:	4313      	orrs	r3, r2
 800527c:	60cb      	str	r3, [r1, #12]
 800527e:	e009      	b.n	8005294 <HAL_RCC_OscConfig+0xa6c>
 8005280:	4b9b      	ldr	r3, [pc, #620]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	03db      	lsls	r3, r3, #15
 800528e:	4998      	ldr	r1, [pc, #608]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005290:	4313      	orrs	r3, r2
 8005292:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005294:	4b96      	ldr	r3, [pc, #600]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a95      	ldr	r2, [pc, #596]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800529a:	f043 0310 	orr.w	r3, r3, #16
 800529e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052a0:	f7fc fd3e 	bl	8001d20 <HAL_GetTick>
 80052a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80052a8:	f7fc fd3a 	bl	8001d20 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e18b      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80052ba:	4b8d      	ldr	r3, [pc, #564]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0xa80>
 80052c6:	e018      	b.n	80052fa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80052c8:	4b89      	ldr	r3, [pc, #548]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a88      	ldr	r2, [pc, #544]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80052ce:	f023 0310 	bic.w	r3, r3, #16
 80052d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052d4:	f7fc fd24 	bl	8001d20 <HAL_GetTick>
 80052d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80052dc:	f7fc fd20 	bl	8001d20 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e171      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80052ee:	4b80      	ldr	r3, [pc, #512]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8166 	beq.w	80055d0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005304:	2300      	movs	r3, #0
 8005306:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800530a:	4b79      	ldr	r3, [pc, #484]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b0c      	cmp	r3, #12
 8005314:	f000 80f2 	beq.w	80054fc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531c:	2b02      	cmp	r3, #2
 800531e:	f040 80c5 	bne.w	80054ac <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005322:	4b73      	ldr	r3, [pc, #460]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a72      	ldr	r2, [pc, #456]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800532c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800532e:	f7fc fcf7 	bl	8001d20 <HAL_GetTick>
 8005332:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005336:	f7fc fcf3 	bl	8001d20 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e144      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005348:	4b69      	ldr	r3, [pc, #420]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f0      	bne.n	8005336 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005354:	4b66      	ldr	r3, [pc, #408]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d111      	bne.n	8005386 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005362:	4b63      	ldr	r3, [pc, #396]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005368:	4a61      	ldr	r2, [pc, #388]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800536a:	f043 0304 	orr.w	r3, r3, #4
 800536e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005372:	4b5f      	ldr	r3, [pc, #380]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005380:	2301      	movs	r3, #1
 8005382:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005386:	4b5b      	ldr	r3, [pc, #364]	@ (80054f4 <HAL_RCC_OscConfig+0xccc>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800538e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005392:	d102      	bne.n	800539a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800539a:	4b56      	ldr	r3, [pc, #344]	@ (80054f4 <HAL_RCC_OscConfig+0xccc>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	4a55      	ldr	r2, [pc, #340]	@ (80054f4 <HAL_RCC_OscConfig+0xccc>)
 80053a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80053a6:	4b52      	ldr	r3, [pc, #328]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80053a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80053ba:	3a01      	subs	r2, #1
 80053bc:	0212      	lsls	r2, r2, #8
 80053be:	4311      	orrs	r1, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80053c4:	430a      	orrs	r2, r1
 80053c6:	494a      	ldr	r1, [pc, #296]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80053cc:	4b48      	ldr	r3, [pc, #288]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80053ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d0:	4b49      	ldr	r3, [pc, #292]	@ (80054f8 <HAL_RCC_OscConfig+0xcd0>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053d8:	3a01      	subs	r2, #1
 80053da:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80053e2:	3a01      	subs	r2, #1
 80053e4:	0252      	lsls	r2, r2, #9
 80053e6:	b292      	uxth	r2, r2
 80053e8:	4311      	orrs	r1, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053ee:	3a01      	subs	r2, #1
 80053f0:	0412      	lsls	r2, r2, #16
 80053f2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80053f6:	4311      	orrs	r1, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80053fc:	3a01      	subs	r2, #1
 80053fe:	0612      	lsls	r2, r2, #24
 8005400:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005404:	430a      	orrs	r2, r1
 8005406:	493a      	ldr	r1, [pc, #232]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005408:	4313      	orrs	r3, r2
 800540a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800540c:	4b38      	ldr	r3, [pc, #224]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	4a37      	ldr	r2, [pc, #220]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541c:	4a34      	ldr	r2, [pc, #208]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005422:	4b33      	ldr	r3, [pc, #204]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	4a32      	ldr	r2, [pc, #200]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005428:	f043 0310 	orr.w	r3, r3, #16
 800542c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800542e:	4b30      	ldr	r3, [pc, #192]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	f023 020c 	bic.w	r2, r3, #12
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543a:	492d      	ldr	r1, [pc, #180]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800543c:	4313      	orrs	r3, r2
 800543e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005440:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005448:	4b2a      	ldr	r3, [pc, #168]	@ (80054f4 <HAL_RCC_OscConfig+0xccc>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a29      	ldr	r2, [pc, #164]	@ (80054f4 <HAL_RCC_OscConfig+0xccc>)
 800544e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005452:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005454:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800545c:	4b24      	ldr	r3, [pc, #144]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800545e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005462:	4a23      	ldr	r2, [pc, #140]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800546c:	4b20      	ldr	r3, [pc, #128]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800546e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005470:	4a1f      	ldr	r2, [pc, #124]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 8005472:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005476:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005478:	4b1d      	ldr	r3, [pc, #116]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1c      	ldr	r2, [pc, #112]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 800547e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005482:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005484:	f7fc fc4c 	bl	8001d20 <HAL_GetTick>
 8005488:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548c:	f7fc fc48 	bl	8001d20 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e099      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800549e:	4b14      	ldr	r3, [pc, #80]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0xc64>
 80054aa:	e091      	b.n	80055d0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80054ac:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a0f      	ldr	r2, [pc, #60]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80054b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054b8:	f7fc fc32 	bl	8001d20 <HAL_GetTick>
 80054bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c0:	f7fc fc2e 	bl	8001d20 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e07f      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80054de:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	4a03      	ldr	r2, [pc, #12]	@ (80054f0 <HAL_RCC_OscConfig+0xcc8>)
 80054e4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80054e8:	f023 0303 	bic.w	r3, r3, #3
 80054ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80054ee:	e06f      	b.n	80055d0 <HAL_RCC_OscConfig+0xda8>
 80054f0:	46020c00 	.word	0x46020c00
 80054f4:	46020800 	.word	0x46020800
 80054f8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80054fc:	4b37      	ldr	r3, [pc, #220]	@ (80055dc <HAL_RCC_OscConfig+0xdb4>)
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005502:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <HAL_RCC_OscConfig+0xdb4>)
 8005504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005506:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	2b01      	cmp	r3, #1
 800550e:	d039      	beq.n	8005584 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0203 	and.w	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d132      	bne.n	8005584 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	0a1b      	lsrs	r3, r3, #8
 8005522:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d129      	bne.n	8005584 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d122      	bne.n	8005584 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005548:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800554a:	429a      	cmp	r2, r3
 800554c:	d11a      	bne.n	8005584 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	0a5b      	lsrs	r3, r3, #9
 8005552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d111      	bne.n	8005584 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	0c1b      	lsrs	r3, r3, #16
 8005564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d108      	bne.n	8005584 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	0e1b      	lsrs	r3, r3, #24
 8005576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d001      	beq.n	8005588 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e024      	b.n	80055d2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <HAL_RCC_OscConfig+0xdb4>)
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	08db      	lsrs	r3, r3, #3
 800558e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005596:	429a      	cmp	r2, r3
 8005598:	d01a      	beq.n	80055d0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800559a:	4b10      	ldr	r3, [pc, #64]	@ (80055dc <HAL_RCC_OscConfig+0xdb4>)
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	4a0f      	ldr	r2, [pc, #60]	@ (80055dc <HAL_RCC_OscConfig+0xdb4>)
 80055a0:	f023 0310 	bic.w	r3, r3, #16
 80055a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fc fbbb 	bl	8001d20 <HAL_GetTick>
 80055aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80055ac:	bf00      	nop
 80055ae:	f7fc fbb7 	bl	8001d20 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d0f9      	beq.n	80055ae <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055be:	4a07      	ldr	r2, [pc, #28]	@ (80055dc <HAL_RCC_OscConfig+0xdb4>)
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80055c4:	4b05      	ldr	r3, [pc, #20]	@ (80055dc <HAL_RCC_OscConfig+0xdb4>)
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	4a04      	ldr	r2, [pc, #16]	@ (80055dc <HAL_RCC_OscConfig+0xdb4>)
 80055ca:	f043 0310 	orr.w	r3, r3, #16
 80055ce:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3738      	adds	r7, #56	@ 0x38
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	46020c00 	.word	0x46020c00

080055e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e1d9      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055f4:	4b9b      	ldr	r3, [pc, #620]	@ (8005864 <HAL_RCC_ClockConfig+0x284>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d910      	bls.n	8005624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b98      	ldr	r3, [pc, #608]	@ (8005864 <HAL_RCC_ClockConfig+0x284>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 020f 	bic.w	r2, r3, #15
 800560a:	4996      	ldr	r1, [pc, #600]	@ (8005864 <HAL_RCC_ClockConfig+0x284>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b94      	ldr	r3, [pc, #592]	@ (8005864 <HAL_RCC_ClockConfig+0x284>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e1c1      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d010      	beq.n	8005652 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	4b8c      	ldr	r3, [pc, #560]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800563c:	429a      	cmp	r2, r3
 800563e:	d908      	bls.n	8005652 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005640:	4b89      	ldr	r3, [pc, #548]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005644:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	4986      	ldr	r1, [pc, #536]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 800564e:	4313      	orrs	r3, r2
 8005650:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d012      	beq.n	8005684 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	4b81      	ldr	r3, [pc, #516]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800566c:	429a      	cmp	r2, r3
 800566e:	d909      	bls.n	8005684 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005670:	4b7d      	ldr	r3, [pc, #500]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	497a      	ldr	r1, [pc, #488]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005680:	4313      	orrs	r3, r2
 8005682:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d010      	beq.n	80056b2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	4b74      	ldr	r3, [pc, #464]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800569c:	429a      	cmp	r2, r3
 800569e:	d908      	bls.n	80056b2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80056a0:	4b71      	ldr	r3, [pc, #452]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	496e      	ldr	r1, [pc, #440]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d010      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	4b69      	ldr	r3, [pc, #420]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d908      	bls.n	80056e0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80056ce:	4b66      	ldr	r3, [pc, #408]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 020f 	bic.w	r2, r3, #15
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	4963      	ldr	r1, [pc, #396]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80d2 	beq.w	8005892 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80056ee:	2300      	movs	r3, #0
 80056f0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d143      	bne.n	8005782 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80056fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d110      	bne.n	800572a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005708:	4b57      	ldr	r3, [pc, #348]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 800570a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800570e:	4a56      	ldr	r2, [pc, #344]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005710:	f043 0304 	orr.w	r3, r3, #4
 8005714:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005718:	4b53      	ldr	r3, [pc, #332]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 800571a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005726:	2301      	movs	r3, #1
 8005728:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800572a:	f7fc faf9 	bl	8001d20 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005730:	4b4e      	ldr	r3, [pc, #312]	@ (800586c <HAL_RCC_ClockConfig+0x28c>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00f      	beq.n	800575c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800573e:	f7fc faef 	bl	8001d20 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e12b      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005750:	4b46      	ldr	r3, [pc, #280]	@ (800586c <HAL_RCC_ClockConfig+0x28c>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d107      	bne.n	8005772 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005762:	4b41      	ldr	r3, [pc, #260]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005768:	4a3f      	ldr	r2, [pc, #252]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 800576a:	f023 0304 	bic.w	r3, r3, #4
 800576e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005772:	4b3d      	ldr	r3, [pc, #244]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d121      	bne.n	80057c2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e112      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800578a:	4b37      	ldr	r3, [pc, #220]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d115      	bne.n	80057c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e106      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d107      	bne.n	80057b2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80057a2:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e0fa      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e0f2      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80057c2:	4b29      	ldr	r3, [pc, #164]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f023 0203 	bic.w	r2, r3, #3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4926      	ldr	r1, [pc, #152]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80057d4:	f7fc faa4 	bl	8001d20 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d112      	bne.n	8005808 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057e2:	e00a      	b.n	80057fa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e4:	f7fc fa9c 	bl	8001d20 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e0d6      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f003 030c 	and.w	r3, r3, #12
 8005802:	2b0c      	cmp	r3, #12
 8005804:	d1ee      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x204>
 8005806:	e044      	b.n	8005892 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d112      	bne.n	8005836 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005810:	e00a      	b.n	8005828 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005812:	f7fc fa85 	bl	8001d20 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0bf      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005828:	4b0f      	ldr	r3, [pc, #60]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b08      	cmp	r3, #8
 8005832:	d1ee      	bne.n	8005812 <HAL_RCC_ClockConfig+0x232>
 8005834:	e02d      	b.n	8005892 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d123      	bne.n	8005886 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800583e:	e00a      	b.n	8005856 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005840:	f7fc fa6e 	bl	8001d20 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e0a8      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005856:	4b04      	ldr	r3, [pc, #16]	@ (8005868 <HAL_RCC_ClockConfig+0x288>)
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1ee      	bne.n	8005840 <HAL_RCC_ClockConfig+0x260>
 8005862:	e016      	b.n	8005892 <HAL_RCC_ClockConfig+0x2b2>
 8005864:	40022000 	.word	0x40022000
 8005868:	46020c00 	.word	0x46020c00
 800586c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005870:	f7fc fa56 	bl	8001d20 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e090      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005886:	4b4a      	ldr	r3, [pc, #296]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b04      	cmp	r3, #4
 8005890:	d1ee      	bne.n	8005870 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d010      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	4b43      	ldr	r3, [pc, #268]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d208      	bcs.n	80058c0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80058ae:	4b40      	ldr	r3, [pc, #256]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f023 020f 	bic.w	r2, r3, #15
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	493d      	ldr	r1, [pc, #244]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058c0:	4b3c      	ldr	r3, [pc, #240]	@ (80059b4 <HAL_RCC_ClockConfig+0x3d4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d210      	bcs.n	80058f0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b39      	ldr	r3, [pc, #228]	@ (80059b4 <HAL_RCC_ClockConfig+0x3d4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 020f 	bic.w	r2, r3, #15
 80058d6:	4937      	ldr	r1, [pc, #220]	@ (80059b4 <HAL_RCC_ClockConfig+0x3d4>)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058de:	4b35      	ldr	r3, [pc, #212]	@ (80059b4 <HAL_RCC_ClockConfig+0x3d4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e05b      	b.n	80059a8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d010      	beq.n	800591e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	4b2b      	ldr	r3, [pc, #172]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005908:	429a      	cmp	r2, r3
 800590a:	d208      	bcs.n	800591e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800590c:	4b28      	ldr	r3, [pc, #160]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4925      	ldr	r1, [pc, #148]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d012      	beq.n	8005950 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	4b20      	ldr	r3, [pc, #128]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005938:	429a      	cmp	r2, r3
 800593a:	d209      	bcs.n	8005950 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800593c:	4b1c      	ldr	r3, [pc, #112]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	4919      	ldr	r1, [pc, #100]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 800594c:	4313      	orrs	r3, r2
 800594e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d010      	beq.n	800597e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	4b13      	ldr	r3, [pc, #76]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005968:	429a      	cmp	r2, r3
 800596a:	d208      	bcs.n	800597e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800596c:	4b10      	ldr	r3, [pc, #64]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	490d      	ldr	r1, [pc, #52]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 800597a:	4313      	orrs	r3, r2
 800597c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800597e:	f000 f821 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8005982:	4602      	mov	r2, r0
 8005984:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	490a      	ldr	r1, [pc, #40]	@ (80059b8 <HAL_RCC_ClockConfig+0x3d8>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
 8005994:	4a09      	ldr	r2, [pc, #36]	@ (80059bc <HAL_RCC_ClockConfig+0x3dc>)
 8005996:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005998:	4b09      	ldr	r3, [pc, #36]	@ (80059c0 <HAL_RCC_ClockConfig+0x3e0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fc f975 	bl	8001c8c <HAL_InitTick>
 80059a2:	4603      	mov	r3, r0
 80059a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	46020c00 	.word	0x46020c00
 80059b4:	40022000 	.word	0x40022000
 80059b8:	0800d95c 	.word	0x0800d95c
 80059bc:	20000000 	.word	0x20000000
 80059c0:	20000004 	.word	0x20000004

080059c4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b08b      	sub	sp, #44	@ 0x2c
 80059c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059d2:	4b78      	ldr	r3, [pc, #480]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059dc:	4b75      	ldr	r3, [pc, #468]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_RCC_GetSysClockFreq+0x34>
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b0c      	cmp	r3, #12
 80059f0:	d121      	bne.n	8005a36 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d11e      	bne.n	8005a36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80059f8:	4b6e      	ldr	r3, [pc, #440]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005a04:	4b6b      	ldr	r3, [pc, #428]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a0a:	0b1b      	lsrs	r3, r3, #12
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a12:	e005      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005a14:	4b67      	ldr	r3, [pc, #412]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	0f1b      	lsrs	r3, r3, #28
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a20:	4a65      	ldr	r2, [pc, #404]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d110      	bne.n	8005a52 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a32:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a34:	e00d      	b.n	8005a52 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a36:	4b5f      	ldr	r3, [pc, #380]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d102      	bne.n	8005a48 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a42:	4b5e      	ldr	r3, [pc, #376]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	e004      	b.n	8005a52 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005a50:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b0c      	cmp	r3, #12
 8005a56:	f040 80a5 	bne.w	8005ba4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005a5a:	4b56      	ldr	r3, [pc, #344]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005a64:	4b53      	ldr	r3, [pc, #332]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005a72:	4b50      	ldr	r3, [pc, #320]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a82:	08db      	lsrs	r3, r3, #3
 8005a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d003      	beq.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xe4>
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d022      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x128>
 8005aa6:	e043      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005bc0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aba:	4b3e      	ldr	r3, [pc, #248]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005aca:	ed97 6a01 	vldr	s12, [r7, #4]
 8005ace:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005bc4 <HAL_RCC_GetSysClockFreq+0x200>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aea:	e046      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005bc0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afe:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b12:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005bc4 <HAL_RCC_GetSysClockFreq+0x200>
 8005b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b2e:	e024      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	ee07 3a90 	vmov	s15, r3
 8005b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b48:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b58:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b5c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005bc4 <HAL_RCC_GetSysClockFreq+0x200>
 8005b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b78:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7e:	0e1b      	lsrs	r3, r3, #24
 8005b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b84:	3301      	adds	r3, #1
 8005b86:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9e:	ee17 3a90 	vmov	r3, s15
 8005ba2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	372c      	adds	r7, #44	@ 0x2c
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	46020c00 	.word	0x46020c00
 8005bb8:	0800d974 	.word	0x0800d974
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	4b742400 	.word	0x4b742400
 8005bc4:	46000000 	.word	0x46000000

08005bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005bcc:	f7ff fefa 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b07      	ldr	r3, [pc, #28]	@ (8005bf0 <HAL_RCC_GetHCLKFreq+0x28>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	4906      	ldr	r1, [pc, #24]	@ (8005bf4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005bdc:	5ccb      	ldrb	r3, [r1, r3]
 8005bde:	fa22 f303 	lsr.w	r3, r2, r3
 8005be2:	4a05      	ldr	r2, [pc, #20]	@ (8005bf8 <HAL_RCC_GetHCLKFreq+0x30>)
 8005be4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005be6:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <HAL_RCC_GetHCLKFreq+0x30>)
 8005be8:	681b      	ldr	r3, [r3, #0]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	46020c00 	.word	0x46020c00
 8005bf4:	0800d95c 	.word	0x0800d95c
 8005bf8:	20000000 	.word	0x20000000

08005bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005c00:	f7ff ffe2 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005c04:	4602      	mov	r2, r0
 8005c06:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	4903      	ldr	r1, [pc, #12]	@ (8005c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c12:	5ccb      	ldrb	r3, [r1, r3]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	46020c00 	.word	0x46020c00
 8005c20:	0800d96c 	.word	0x0800d96c

08005c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005c28:	f7ff ffce 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	4b05      	ldr	r3, [pc, #20]	@ (8005c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	4903      	ldr	r1, [pc, #12]	@ (8005c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3a:	5ccb      	ldrb	r3, [r1, r3]
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	46020c00 	.word	0x46020c00
 8005c48:	0800d96c 	.word	0x0800d96c

08005c4c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005c50:	f7ff ffba 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	4903      	ldr	r1, [pc, #12]	@ (8005c70 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005c62:	5ccb      	ldrb	r3, [r1, r3]
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	46020c00 	.word	0x46020c00
 8005c70:	0800d96c 	.word	0x0800d96c

08005c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c8a:	f7fe fd81 	bl	8004790 <HAL_PWREx_GetVoltageRange>
 8005c8e:	6178      	str	r0, [r7, #20]
 8005c90:	e019      	b.n	8005cc6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c92:	4b39      	ldr	r3, [pc, #228]	@ (8005d78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c98:	4a37      	ldr	r2, [pc, #220]	@ (8005d78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c9a:	f043 0304 	orr.w	r3, r3, #4
 8005c9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005ca2:	4b35      	ldr	r3, [pc, #212]	@ (8005d78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005cb0:	f7fe fd6e 	bl	8004790 <HAL_PWREx_GetVoltageRange>
 8005cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005cb6:	4b30      	ldr	r3, [pc, #192]	@ (8005d78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8005d78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ccc:	d003      	beq.n	8005cd6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cd4:	d109      	bne.n	8005cea <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cdc:	d202      	bcs.n	8005ce4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005cde:	2301      	movs	r3, #1
 8005ce0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005ce2:	e033      	b.n	8005d4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005ce8:	e030      	b.n	8005d4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cf0:	d208      	bcs.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d102      	bne.n	8005d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	e025      	b.n	8005d4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e035      	b.n	8005d70 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d0a:	d90f      	bls.n	8005d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d18:	d902      	bls.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	e015      	b.n	8005d4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005d20:	2301      	movs	r3, #1
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	e012      	b.n	8005d4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e00f      	b.n	8005d4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d32:	d109      	bne.n	8005d48 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3a:	d102      	bne.n	8005d42 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	e004      	b.n	8005d4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005d42:	2302      	movs	r3, #2
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	e001      	b.n	8005d4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005d48:	2301      	movs	r3, #1
 8005d4a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f023 020f 	bic.w	r2, r3, #15
 8005d54:	4909      	ldr	r1, [pc, #36]	@ (8005d7c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005d5c:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d001      	beq.n	8005d6e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	46020c00 	.word	0x46020c00
 8005d7c:	40022000 	.word	0x40022000

08005d80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d84:	b0c4      	sub	sp, #272	@ 0x110
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f002 0401 	and.w	r4, r2, #1
 8005da4:	2500      	movs	r5, #0
 8005da6:	ea54 0305 	orrs.w	r3, r4, r5
 8005daa:	d00b      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005dac:	4bd5      	ldr	r3, [pc, #852]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005db2:	f023 0103 	bic.w	r1, r3, #3
 8005db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dbc:	4ad1      	ldr	r2, [pc, #836]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f002 0802 	and.w	r8, r2, #2
 8005dd0:	f04f 0900 	mov.w	r9, #0
 8005dd4:	ea58 0309 	orrs.w	r3, r8, r9
 8005dd8:	d00b      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005dda:	4bca      	ldr	r3, [pc, #808]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005de0:	f023 010c 	bic.w	r1, r3, #12
 8005de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dea:	4ac6      	ldr	r2, [pc, #792]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f002 0a04 	and.w	sl, r2, #4
 8005dfe:	f04f 0b00 	mov.w	fp, #0
 8005e02:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e06:	d00b      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005e08:	4bbe      	ldr	r3, [pc, #760]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e0e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e18:	4aba      	ldr	r2, [pc, #744]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f002 0308 	and.w	r3, r2, #8
 8005e2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e36:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005e40:	4bb0      	ldr	r3, [pc, #704]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e50:	4aac      	ldr	r2, [pc, #688]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e52:	430b      	orrs	r3, r1
 8005e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f002 0310 	and.w	r3, r2, #16
 8005e64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e6e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e72:	460b      	mov	r3, r1
 8005e74:	4313      	orrs	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005e78:	4ba2      	ldr	r3, [pc, #648]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e88:	4a9e      	ldr	r2, [pc, #632]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d00b      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005eb0:	4b94      	ldr	r3, [pc, #592]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005eb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005eb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ec0:	4a90      	ldr	r2, [pc, #576]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f002 0320 	and.w	r3, r2, #32
 8005ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005ee8:	4b86      	ldr	r3, [pc, #536]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005eee:	f023 0107 	bic.w	r1, r3, #7
 8005ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ef8:	4a82      	ldr	r2, [pc, #520]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005efa:	430b      	orrs	r3, r1
 8005efc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f10:	2300      	movs	r3, #0
 8005f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005f20:	4b78      	ldr	r3, [pc, #480]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f26:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f30:	4a74      	ldr	r2, [pc, #464]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f32:	430b      	orrs	r3, r1
 8005f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005f44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005f58:	4b6a      	ldr	r3, [pc, #424]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f68:	4a66      	ldr	r2, [pc, #408]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005f90:	4b5c      	ldr	r3, [pc, #368]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fa0:	4a58      	ldr	r2, [pc, #352]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005fbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fce:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8005fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ff6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8006000:	4b40      	ldr	r3, [pc, #256]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006002:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006006:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006010:	4a3c      	ldr	r2, [pc, #240]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006012:	430b      	orrs	r3, r1
 8006014:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8006018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800602e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d00c      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8006038:	4b32      	ldr	r3, [pc, #200]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800603a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800603e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800604a:	4a2e      	ldr	r2, [pc, #184]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800604c:	430b      	orrs	r3, r1
 800604e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800605e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006062:	2300      	movs	r3, #0
 8006064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006068:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800606c:	460b      	mov	r3, r1
 800606e:	4313      	orrs	r3, r2
 8006070:	d00c      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006072:	4b24      	ldr	r3, [pc, #144]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006078:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800607c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006084:	4a1f      	ldr	r2, [pc, #124]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006086:	430b      	orrs	r3, r1
 8006088:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800608c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d00c      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80060ac:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060b2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80060b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060be:	4a11      	ldr	r2, [pc, #68]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060c0:	430b      	orrs	r3, r1
 80060c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80060c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80060d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060dc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d010      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80060e6:	4b07      	ldr	r3, [pc, #28]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060f8:	4a02      	ldr	r2, [pc, #8]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006100:	e002      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8006102:	bf00      	nop
 8006104:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800611e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d04c      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800612c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006130:	2b80      	cmp	r3, #128	@ 0x80
 8006132:	d02d      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006134:	2b80      	cmp	r3, #128	@ 0x80
 8006136:	d827      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006138:	2b60      	cmp	r3, #96	@ 0x60
 800613a:	d02b      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800613c:	2b60      	cmp	r3, #96	@ 0x60
 800613e:	d823      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006140:	2b40      	cmp	r3, #64	@ 0x40
 8006142:	d006      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8006144:	2b40      	cmp	r3, #64	@ 0x40
 8006146:	d81f      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800614c:	2b20      	cmp	r3, #32
 800614e:	d011      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006150:	e01a      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006152:	4bbe      	ldr	r3, [pc, #760]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006156:	4abd      	ldr	r2, [pc, #756]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800615c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800615e:	e01a      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006164:	3308      	adds	r3, #8
 8006166:	4618      	mov	r0, r3
 8006168:	f002 fc32 	bl	80089d0 <RCCEx_PLL2_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006172:	e010      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006178:	332c      	adds	r3, #44	@ 0x2c
 800617a:	4618      	mov	r0, r3
 800617c:	f002 fcc0 	bl	8008b00 <RCCEx_PLL3_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006186:	e006      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800618e:	e002      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006196:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10d      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800619e:	4bab      	ldr	r3, [pc, #684]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061a4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80061a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061b0:	4aa6      	ldr	r2, [pc, #664]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061b2:	430b      	orrs	r3, r1
 80061b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80061b8:	e003      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ba:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80061be:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80061ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061d2:	2300      	movs	r3, #0
 80061d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061d8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061dc:	460b      	mov	r3, r1
 80061de:	4313      	orrs	r3, r2
 80061e0:	d053      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80061e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ee:	d033      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80061f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f4:	d82c      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80061f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061fa:	d02f      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80061fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006200:	d826      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006206:	d008      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8006208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800620c:	d820      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006216:	d011      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006218:	e01a      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800621a:	4b8c      	ldr	r3, [pc, #560]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	4a8b      	ldr	r2, [pc, #556]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006224:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006226:	e01a      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800622c:	3308      	adds	r3, #8
 800622e:	4618      	mov	r0, r3
 8006230:	f002 fbce 	bl	80089d0 <RCCEx_PLL2_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800623a:	e010      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800623c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006240:	332c      	adds	r3, #44	@ 0x2c
 8006242:	4618      	mov	r0, r3
 8006244:	f002 fc5c 	bl	8008b00 <RCCEx_PLL3_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800624e:	e006      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006256:	e002      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006258:	bf00      	nop
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800625c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10d      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006266:	4b79      	ldr	r3, [pc, #484]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800626c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006278:	4a74      	ldr	r2, [pc, #464]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800627a:	430b      	orrs	r3, r1
 800627c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006280:	e003      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006282:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006286:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800628a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006296:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006298:	2300      	movs	r3, #0
 800629a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800629c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80062a0:	460b      	mov	r3, r1
 80062a2:	4313      	orrs	r3, r2
 80062a4:	d046      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80062a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062b2:	d028      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80062b4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062b8:	d821      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80062ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062be:	d022      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80062c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c4:	d81b      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80062c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062ca:	d01c      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80062cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062d0:	d815      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80062d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d6:	d008      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80062d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062dc:	d80f      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d011      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e6:	d00e      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80062e8:	e009      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ee:	3308      	adds	r3, #8
 80062f0:	4618      	mov	r0, r3
 80062f2:	f002 fb6d 	bl	80089d0 <RCCEx_PLL2_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80062fc:	e004      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006304:	e000      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8006306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006308:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10d      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006310:	4b4e      	ldr	r3, [pc, #312]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006316:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800631a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006322:	4a4a      	ldr	r2, [pc, #296]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006324:	430b      	orrs	r3, r1
 8006326:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800632a:	e003      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006330:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006340:	673b      	str	r3, [r7, #112]	@ 0x70
 8006342:	2300      	movs	r3, #0
 8006344:	677b      	str	r3, [r7, #116]	@ 0x74
 8006346:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800634a:	460b      	mov	r3, r1
 800634c:	4313      	orrs	r3, r2
 800634e:	d03f      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006358:	2b04      	cmp	r3, #4
 800635a:	d81e      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x61a>
 800635c:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	080063a3 	.word	0x080063a3
 8006368:	08006379 	.word	0x08006379
 800636c:	08006387 	.word	0x08006387
 8006370:	080063a3 	.word	0x080063a3
 8006374:	080063a3 	.word	0x080063a3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006378:	4b34      	ldr	r3, [pc, #208]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	4a33      	ldr	r2, [pc, #204]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800637e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006382:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006384:	e00e      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638a:	332c      	adds	r3, #44	@ 0x2c
 800638c:	4618      	mov	r0, r3
 800638e:	f002 fbb7 	bl	8008b00 <RCCEx_PLL3_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006398:	e004      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80063a0:	e000      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80063a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80063a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10d      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80063ac:	4b27      	ldr	r3, [pc, #156]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063b2:	f023 0107 	bic.w	r1, r3, #7
 80063b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063be:	4a23      	ldr	r2, [pc, #140]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063c0:	430b      	orrs	r3, r1
 80063c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80063c6:	e003      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80063cc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80063d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063de:	2300      	movs	r3, #0
 80063e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80063e6:	460b      	mov	r3, r1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d04c      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80063ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063f8:	d02a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80063fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063fe:	d821      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8006400:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006404:	d026      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8006406:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800640a:	d81b      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800640c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006410:	d00e      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006416:	d815      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01d      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006420:	d110      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006422:	4b0a      	ldr	r3, [pc, #40]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006426:	4a09      	ldr	r2, [pc, #36]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800642e:	e014      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006434:	332c      	adds	r3, #44	@ 0x2c
 8006436:	4618      	mov	r0, r3
 8006438:	f002 fb62 	bl	8008b00 <RCCEx_PLL3_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006442:	e00a      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800644a:	e006      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6da>
 800644c:	46020c00 	.word	0x46020c00
        break;
 8006450:	bf00      	nop
 8006452:	e002      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8006454:	bf00      	nop
 8006456:	e000      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8006458:	bf00      	nop
    }
    if (ret == HAL_OK)
 800645a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006462:	4baf      	ldr	r3, [pc, #700]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006468:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800646c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006470:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006474:	4aaa      	ldr	r2, [pc, #680]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006476:	430b      	orrs	r3, r1
 8006478:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800647c:	e003      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006482:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006492:	663b      	str	r3, [r7, #96]	@ 0x60
 8006494:	2300      	movs	r3, #0
 8006496:	667b      	str	r3, [r7, #100]	@ 0x64
 8006498:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800649c:	460b      	mov	r3, r1
 800649e:	4313      	orrs	r3, r2
 80064a0:	f000 80b5 	beq.w	800660e <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064aa:	4b9d      	ldr	r3, [pc, #628]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80064ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d113      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064b8:	4b99      	ldr	r3, [pc, #612]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80064ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064be:	4a98      	ldr	r2, [pc, #608]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80064c0:	f043 0304 	orr.w	r3, r3, #4
 80064c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80064c8:	4b95      	ldr	r3, [pc, #596]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80064ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80064e0:	4b90      	ldr	r3, [pc, #576]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	4a8f      	ldr	r2, [pc, #572]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064ec:	f7fb fc18 	bl	8001d20 <HAL_GetTick>
 80064f0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064f4:	e00b      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f6:	f7fb fc13 	bl	8001d20 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d903      	bls.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800650c:	e005      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800650e:	4b85      	ldr	r3, [pc, #532]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0ed      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800651a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800651e:	2b00      	cmp	r3, #0
 8006520:	d165      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006522:	4b7f      	ldr	r3, [pc, #508]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006528:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006534:	2b00      	cmp	r3, #0
 8006536:	d023      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8006538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800653c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8006540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006544:	4293      	cmp	r3, r2
 8006546:	d01b      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006548:	4b75      	ldr	r3, [pc, #468]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800654a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800654e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006552:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006556:	4b72      	ldr	r3, [pc, #456]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800655c:	4a70      	ldr	r2, [pc, #448]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800655e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006566:	4b6e      	ldr	r3, [pc, #440]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800656c:	4a6c      	ldr	r2, [pc, #432]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800656e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006572:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006576:	4a6a      	ldr	r2, [pc, #424]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800657c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d019      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fb fbc8 	bl	8001d20 <HAL_GetTick>
 8006590:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006594:	e00d      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fb fbc3 	bl	8001d20 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a0:	1ad2      	subs	r2, r2, r3
 80065a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d903      	bls.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 80065b0:	e006      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80065b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0ea      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80065c0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10d      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80065c8:	4b55      	ldr	r3, [pc, #340]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80065ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80065da:	4a51      	ldr	r2, [pc, #324]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80065e2:	e008      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065e4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80065e8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 80065ec:	e003      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80065f2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065f6:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d107      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fe:	4b48      	ldr	r3, [pc, #288]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006604:	4a46      	ldr	r2, [pc, #280]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006606:	f023 0304 	bic.w	r3, r3, #4
 800660a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800660e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800661a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800661c:	2300      	movs	r3, #0
 800661e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006620:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006624:	460b      	mov	r3, r1
 8006626:	4313      	orrs	r3, r2
 8006628:	d042      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800662e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006632:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006636:	d022      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8006638:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800663c:	d81b      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800663e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006642:	d011      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8006644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006648:	d815      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d019      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800664e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006652:	d110      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006658:	3308      	adds	r3, #8
 800665a:	4618      	mov	r0, r3
 800665c:	f002 f9b8 	bl	80089d0 <RCCEx_PLL2_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006666:	e00d      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006668:	4b2d      	ldr	r3, [pc, #180]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	4a2c      	ldr	r2, [pc, #176]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800666e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006672:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006674:	e006      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800667c:	e002      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8006682:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006684:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10d      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800668c:	4b24      	ldr	r3, [pc, #144]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800668e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006692:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800669a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800669e:	4a20      	ldr	r2, [pc, #128]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80066a0:	430b      	orrs	r3, r1
 80066a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066a6:	e003      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80066ac:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80066bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80066be:	2300      	movs	r3, #0
 80066c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80066c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80066c6:	460b      	mov	r3, r1
 80066c8:	4313      	orrs	r3, r2
 80066ca:	d031      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80066cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d8:	d00b      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80066da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066de:	d804      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d008      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80066e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e8:	d007      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80066f0:	e004      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80066f2:	bf00      	nop
 80066f4:	e002      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80066f6:	bf00      	nop
 80066f8:	e000      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80066fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80066fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006700:	2b00      	cmp	r3, #0
 8006702:	d111      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006704:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800670a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800670e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006716:	4a02      	ldr	r2, [pc, #8]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006718:	430b      	orrs	r3, r1
 800671a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800671e:	e007      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8006720:	46020c00 	.word	0x46020c00
 8006724:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006728:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800672c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800673c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800673e:	2300      	movs	r3, #0
 8006740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006742:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006746:	460b      	mov	r3, r1
 8006748:	4313      	orrs	r3, r2
 800674a:	d00c      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800674c:	4bb2      	ldr	r3, [pc, #712]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800674e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006752:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800675e:	4aae      	ldr	r2, [pc, #696]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006760:	430b      	orrs	r3, r1
 8006762:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006772:	643b      	str	r3, [r7, #64]	@ 0x40
 8006774:	2300      	movs	r3, #0
 8006776:	647b      	str	r3, [r7, #68]	@ 0x44
 8006778:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800677c:	460b      	mov	r3, r1
 800677e:	4313      	orrs	r3, r2
 8006780:	d019      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006786:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800678a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006790:	4ba1      	ldr	r3, [pc, #644]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	4aa0      	ldr	r2, [pc, #640]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800679c:	4b9e      	ldr	r3, [pc, #632]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800679e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067a2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067ae:	4a9a      	ldr	r2, [pc, #616]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80067b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80067c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067c4:	2300      	movs	r3, #0
 80067c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067cc:	460b      	mov	r3, r1
 80067ce:	4313      	orrs	r3, r2
 80067d0:	d00c      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80067d2:	4b91      	ldr	r3, [pc, #580]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80067d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067d8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80067dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80067e4:	4a8c      	ldr	r2, [pc, #560]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80067e6:	430b      	orrs	r3, r1
 80067e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80067ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80067f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80067fa:	2300      	movs	r3, #0
 80067fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006802:	460b      	mov	r3, r1
 8006804:	4313      	orrs	r3, r2
 8006806:	d00c      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006808:	4b83      	ldr	r3, [pc, #524]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800680a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800680e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006816:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800681a:	4a7f      	ldr	r2, [pc, #508]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800681c:	430b      	orrs	r3, r1
 800681e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800682e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006830:	2300      	movs	r3, #0
 8006832:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006834:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006838:	460b      	mov	r3, r1
 800683a:	4313      	orrs	r3, r2
 800683c:	d00c      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800683e:	4b76      	ldr	r3, [pc, #472]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006844:	f023 0218 	bic.w	r2, r3, #24
 8006848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800684c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006850:	4971      	ldr	r1, [pc, #452]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
 800686a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d032      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006878:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800687c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006880:	d105      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006882:	4b65      	ldr	r3, [pc, #404]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	4a64      	ldr	r2, [pc, #400]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800688e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006892:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006896:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800689a:	d108      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800689c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a0:	3308      	adds	r3, #8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f002 f894 	bl	80089d0 <RCCEx_PLL2_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 80068ae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10d      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80068b6:	4b58      	ldr	r3, [pc, #352]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068c8:	4953      	ldr	r1, [pc, #332]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80068d0:	e003      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80068d6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80068da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	2100      	movs	r1, #0
 80068e4:	61b9      	str	r1, [r7, #24]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068f0:	460b      	mov	r3, r1
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d04a      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80068f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80068fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006902:	d01e      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8006904:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006908:	d825      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800690a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800690e:	d00e      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006910:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006914:	d81f      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d021      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800691a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800691e:	d11a      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006920:	4b3d      	ldr	r3, [pc, #244]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006924:	4a3c      	ldr	r2, [pc, #240]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800692a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800692c:	e018      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800692e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006932:	3308      	adds	r3, #8
 8006934:	4618      	mov	r0, r3
 8006936:	f002 f84b 	bl	80089d0 <RCCEx_PLL2_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006940:	e00e      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006946:	332c      	adds	r3, #44	@ 0x2c
 8006948:	4618      	mov	r0, r3
 800694a:	f002 f8d9 	bl	8008b00 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006954:	e004      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800695c:	e000      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800695e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006960:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10d      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8006968:	4b2b      	ldr	r3, [pc, #172]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800696a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800696e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006976:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800697a:	4927      	ldr	r1, [pc, #156]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006982:	e003      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006984:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006988:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800698c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80069a2:	460b      	mov	r3, r1
 80069a4:	4313      	orrs	r3, r2
 80069a6:	d03d      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80069a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069b4:	d00e      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80069b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069ba:	d815      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d017      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80069c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069c4:	d110      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c6:	4b14      	ldr	r3, [pc, #80]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	4a13      	ldr	r2, [pc, #76]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80069cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80069d2:	e00e      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069d8:	3308      	adds	r3, #8
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 fff8 	bl	80089d0 <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80069e6:	e004      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80069ee:	e000      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 80069f0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069f2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d110      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80069fa:	4b07      	ldr	r3, [pc, #28]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80069fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a00:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0c:	4902      	ldr	r1, [pc, #8]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006a14:	e006      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8006a16:	bf00      	nop
 8006a18:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006a20:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	d00c      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006a40:	4b2c      	ldr	r3, [pc, #176]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a46:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a52:	4928      	ldr	r1, [pc, #160]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	2100      	movs	r1, #0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a70:	460b      	mov	r3, r1
 8006a72:	4313      	orrs	r3, r2
 8006a74:	d036      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8006a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006a7e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006a82:	d00d      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006a84:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006a88:	d811      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8006a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a8e:	d012      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a94:	d80b      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00d      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9e:	d106      	bne.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006aa0:	4b14      	ldr	r3, [pc, #80]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	4a13      	ldr	r2, [pc, #76]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aaa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8006aac:	e004      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006ab4:	e000      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8006ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ab8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10d      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006ac2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ac6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ace:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006ad2:	4908      	ldr	r1, [pc, #32]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006ae0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006ae4:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006aee:	46bd      	mov	sp, r7
 8006af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af4:	46020c00 	.word	0x46020c00

08006af8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b089      	sub	sp, #36	@ 0x24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006b00:	4ba6      	ldr	r3, [pc, #664]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b08:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006b0a:	4ba4      	ldr	r3, [pc, #656]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006b14:	4ba1      	ldr	r3, [pc, #644]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	0a1b      	lsrs	r3, r3, #8
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	3301      	adds	r3, #1
 8006b20:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006b22:	4b9e      	ldr	r3, [pc, #632]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b26:	091b      	lsrs	r3, r3, #4
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b2e:	4b9b      	ldr	r3, [pc, #620]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b32:	08db      	lsrs	r3, r3, #3
 8006b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d062      	beq.n	8006c16 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	f200 8081 	bhi.w	8006c5a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d024      	beq.n	8006ba8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d17a      	bne.n	8006c5a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b76:	4b89      	ldr	r3, [pc, #548]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b8a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ba6:	e08f      	b.n	8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006ba8:	4b7c      	ldr	r3, [pc, #496]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006bb4:	4b79      	ldr	r3, [pc, #484]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	0f1b      	lsrs	r3, r3, #28
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	e006      	b.n	8006bce <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006bc0:	4b76      	ldr	r3, [pc, #472]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	0f1b      	lsrs	r3, r3, #28
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	4a76      	ldr	r2, [pc, #472]	@ (8006da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bf8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c14:	e058      	b.n	8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c20:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c28:	4b5c      	ldr	r3, [pc, #368]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c38:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c3c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c58:	e036      	b.n	8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c5a:	4b50      	ldr	r3, [pc, #320]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006c66:	4b4d      	ldr	r3, [pc, #308]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	0f1b      	lsrs	r3, r3, #28
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	e006      	b.n	8006c80 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006c72:	4b4a      	ldr	r3, [pc, #296]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	0f1b      	lsrs	r3, r3, #28
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	4a49      	ldr	r2, [pc, #292]	@ (8006da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006caa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cc6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006cc8:	4b34      	ldr	r3, [pc, #208]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d017      	beq.n	8006d04 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cd4:	4b31      	ldr	r3, [pc, #196]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd8:	0a5b      	lsrs	r3, r3, #9
 8006cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfa:	ee17 2a90 	vmov	r2, s15
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	e002      	b.n	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006d0a:	4b24      	ldr	r3, [pc, #144]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d017      	beq.n	8006d46 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d16:	4b21      	ldr	r3, [pc, #132]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d20:	ee07 3a90 	vmov	s15, r3
 8006d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006d28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d3c:	ee17 2a90 	vmov	r2, s15
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	605a      	str	r2, [r3, #4]
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006d4c:	4b13      	ldr	r3, [pc, #76]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d017      	beq.n	8006d88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d58:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d5c:	0e1b      	lsrs	r3, r3, #24
 8006d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d7e:	ee17 2a90 	vmov	r2, s15
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d86:	e002      	b.n	8006d8e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	609a      	str	r2, [r3, #8]
}
 8006d8e:	bf00      	nop
 8006d90:	3724      	adds	r7, #36	@ 0x24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	46020c00 	.word	0x46020c00
 8006da0:	4b742400 	.word	0x4b742400
 8006da4:	46000000 	.word	0x46000000
 8006da8:	0800d974 	.word	0x0800d974

08006dac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b089      	sub	sp, #36	@ 0x24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006db4:	4ba6      	ldr	r3, [pc, #664]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006dbe:	4ba4      	ldr	r3, [pc, #656]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006dc8:	4ba1      	ldr	r3, [pc, #644]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006dd6:	4b9e      	ldr	r3, [pc, #632]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	091b      	lsrs	r3, r3, #4
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006de2:	4b9b      	ldr	r3, [pc, #620]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	08db      	lsrs	r3, r3, #3
 8006de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d062      	beq.n	8006eca <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	f200 8081 	bhi.w	8006f0e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d024      	beq.n	8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d17a      	bne.n	8006f0e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b89      	ldr	r3, [pc, #548]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e3e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e5a:	e08f      	b.n	8006f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006e68:	4b79      	ldr	r3, [pc, #484]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	0f1b      	lsrs	r3, r3, #28
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	e006      	b.n	8006e82 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006e74:	4b76      	ldr	r3, [pc, #472]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	0f1b      	lsrs	r3, r3, #28
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	4a76      	ldr	r2, [pc, #472]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ec8:	e058      	b.n	8006f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006edc:	4b5c      	ldr	r3, [pc, #368]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eec:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ef0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006ef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006efc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f0c:	e036      	b.n	8006f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006f0e:	4b50      	ldr	r3, [pc, #320]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	0f1b      	lsrs	r3, r3, #28
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	e006      	b.n	8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006f26:	4b4a      	ldr	r3, [pc, #296]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f2c:	041b      	lsls	r3, r3, #16
 8006f2e:	0f1b      	lsrs	r3, r3, #28
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	4a49      	ldr	r2, [pc, #292]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f7a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006f7c:	4b34      	ldr	r3, [pc, #208]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d017      	beq.n	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f88:	4b31      	ldr	r3, [pc, #196]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8c:	0a5b      	lsrs	r3, r3, #9
 8006f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006f9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fae:	ee17 2a90 	vmov	r2, s15
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e002      	b.n	8006fbe <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006fbe:	4b24      	ldr	r3, [pc, #144]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d017      	beq.n	8006ffa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fca:	4b21      	ldr	r3, [pc, #132]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fce:	0c1b      	lsrs	r3, r3, #16
 8006fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff0:	ee17 2a90 	vmov	r2, s15
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]
 8006ff8:	e002      	b.n	8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007000:	4b13      	ldr	r3, [pc, #76]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d017      	beq.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800700c:	4b10      	ldr	r3, [pc, #64]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800700e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007010:	0e1b      	lsrs	r3, r3, #24
 8007012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800701e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007022:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007026:	edd7 6a07 	vldr	s13, [r7, #28]
 800702a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007032:	ee17 2a90 	vmov	r2, s15
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800703a:	e002      	b.n	8007042 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	609a      	str	r2, [r3, #8]
}
 8007042:	bf00      	nop
 8007044:	3724      	adds	r7, #36	@ 0x24
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	46020c00 	.word	0x46020c00
 8007054:	4b742400 	.word	0x4b742400
 8007058:	46000000 	.word	0x46000000
 800705c:	0800d974 	.word	0x0800d974

08007060 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007060:	b480      	push	{r7}
 8007062:	b089      	sub	sp, #36	@ 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007068:	4ba6      	ldr	r3, [pc, #664]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800706a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007070:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007072:	4ba4      	ldr	r3, [pc, #656]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800707c:	4ba1      	ldr	r3, [pc, #644]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007080:	0a1b      	lsrs	r3, r3, #8
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	3301      	adds	r3, #1
 8007088:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800708a:	4b9e      	ldr	r3, [pc, #632]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708e:	091b      	lsrs	r3, r3, #4
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007096:	4b9b      	ldr	r3, [pc, #620]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800709a:	08db      	lsrs	r3, r3, #3
 800709c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d062      	beq.n	800717e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	f200 8081 	bhi.w	80071c2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d024      	beq.n	8007110 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d17a      	bne.n	80071c2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b89      	ldr	r3, [pc, #548]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80070ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800710e:	e08f      	b.n	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007110:	4b7c      	ldr	r3, [pc, #496]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800711c:	4b79      	ldr	r3, [pc, #484]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	0f1b      	lsrs	r3, r3, #28
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	e006      	b.n	8007136 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8007128:	4b76      	ldr	r3, [pc, #472]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800712a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800712e:	041b      	lsls	r3, r3, #16
 8007130:	0f1b      	lsrs	r3, r3, #28
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	4a76      	ldr	r2, [pc, #472]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007160:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007170:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007178:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800717c:	e058      	b.n	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007188:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800718c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007190:	4b5c      	ldr	r3, [pc, #368]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007198:	ee07 3a90 	vmov	s15, r3
 800719c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80071a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071c0:	e036      	b.n	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071c2:	4b50      	ldr	r3, [pc, #320]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80071ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	0f1b      	lsrs	r3, r3, #28
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	e006      	b.n	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80071da:	4b4a      	ldr	r3, [pc, #296]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071e0:	041b      	lsls	r3, r3, #16
 80071e2:	0f1b      	lsrs	r3, r3, #28
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	4a49      	ldr	r2, [pc, #292]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80071ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007212:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007222:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800722e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007230:	4b34      	ldr	r3, [pc, #208]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d017      	beq.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800723c:	4b31      	ldr	r3, [pc, #196]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800723e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007240:	0a5b      	lsrs	r3, r3, #9
 8007242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800724e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007252:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007256:	edd7 6a07 	vldr	s13, [r7, #28]
 800725a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007262:	ee17 2a90 	vmov	r2, s15
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e002      	b.n	8007272 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007272:	4b24      	ldr	r3, [pc, #144]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d017      	beq.n	80072ae <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800727e:	4b21      	ldr	r3, [pc, #132]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007294:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007298:	edd7 6a07 	vldr	s13, [r7, #28]
 800729c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a4:	ee17 2a90 	vmov	r2, s15
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	605a      	str	r2, [r3, #4]
 80072ac:	e002      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80072b4:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d017      	beq.n	80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072c0:	4b10      	ldr	r3, [pc, #64]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c4:	0e1b      	lsrs	r3, r3, #24
 80072c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80072d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072da:	edd7 6a07 	vldr	s13, [r7, #28]
 80072de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e6:	ee17 2a90 	vmov	r2, s15
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072ee:	e002      	b.n	80072f6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	609a      	str	r2, [r3, #8]
}
 80072f6:	bf00      	nop
 80072f8:	3724      	adds	r7, #36	@ 0x24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	46020c00 	.word	0x46020c00
 8007308:	4b742400 	.word	0x4b742400
 800730c:	46000000 	.word	0x46000000
 8007310:	0800d974 	.word	0x0800d974

08007314 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08e      	sub	sp, #56	@ 0x38
 8007318:	af00      	add	r7, sp, #0
 800731a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800731e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007322:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007326:	430b      	orrs	r3, r1
 8007328:	d145      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800732a:	4ba7      	ldr	r3, [pc, #668]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800732c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007330:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007334:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007336:	4ba4      	ldr	r3, [pc, #656]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d108      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800734a:	d104      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800734c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
 8007352:	f001 bb31 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007356:	4b9c      	ldr	r3, [pc, #624]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800735c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007364:	d114      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800736c:	d110      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800736e:	4b96      	ldr	r3, [pc, #600]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800737c:	d103      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800737e:	23fa      	movs	r3, #250	@ 0xfa
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007382:	f001 bb19 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007386:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800738a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800738c:	f001 bb14 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007390:	4b8d      	ldr	r3, [pc, #564]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800739c:	d107      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073a4:	d103      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80073a6:	4b89      	ldr	r3, [pc, #548]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073aa:	f001 bb05 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b2:	f001 bb01 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ba:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80073be:	430b      	orrs	r3, r1
 80073c0:	d151      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80073c2:	4b81      	ldr	r3, [pc, #516]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073c8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80073cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80073ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d0:	2b80      	cmp	r3, #128	@ 0x80
 80073d2:	d035      	beq.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	2b80      	cmp	r3, #128	@ 0x80
 80073d8:	d841      	bhi.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	2b60      	cmp	r3, #96	@ 0x60
 80073de:	d02a      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	2b60      	cmp	r3, #96	@ 0x60
 80073e4:	d83b      	bhi.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	2b40      	cmp	r3, #64	@ 0x40
 80073ea:	d009      	beq.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80073ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ee:	2b40      	cmp	r3, #64	@ 0x40
 80073f0:	d835      	bhi.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00c      	beq.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d012      	beq.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80073fe:	e02e      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fb77 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800740e:	f001 bad3 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007412:	f107 0318 	add.w	r3, r7, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fcc8 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007420:	f001 baca 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007424:	f107 030c 	add.w	r3, r7, #12
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fe19 	bl	8007060 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007432:	f001 bac1 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007436:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800743c:	f001 babc 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007440:	4b61      	ldr	r3, [pc, #388]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744c:	d103      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800744e:	4b60      	ldr	r3, [pc, #384]	@ (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007450:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007452:	f001 bab1 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800745a:	f001 baad 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007462:	f001 baa9 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800746e:	430b      	orrs	r3, r1
 8007470:	d158      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007472:	4b55      	ldr	r3, [pc, #340]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007474:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007478:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800747c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007484:	d03b      	beq.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800748c:	d846      	bhi.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007494:	d02e      	beq.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800749c:	d83e      	bhi.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074a4:	d00b      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ac:	d836      	bhi.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00d      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ba:	d012      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80074bc:	e02e      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fb18 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074cc:	f001 ba74 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074d0:	f107 0318 	add.w	r3, r7, #24
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fc69 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074de:	f001 ba6b 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074e2:	f107 030c 	add.w	r3, r7, #12
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fdba 	bl	8007060 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074f0:	f001 ba62 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074f4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074fa:	f001 ba5d 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074fe:	4b32      	ldr	r3, [pc, #200]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800750a:	d103      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800750c:	4b30      	ldr	r3, [pc, #192]	@ (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800750e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007510:	f001 ba52 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007518:	f001 ba4e 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007520:	f001 ba4a 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007528:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800752c:	430b      	orrs	r3, r1
 800752e:	d126      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007530:	4b25      	ldr	r3, [pc, #148]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800753a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800753c:	4b22      	ldr	r3, [pc, #136]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007548:	d106      	bne.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007550:	4b1f      	ldr	r3, [pc, #124]	@ (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
 8007554:	f001 ba30 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007558:	4b1b      	ldr	r3, [pc, #108]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007564:	d107      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800756c:	d103      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800756e:	4b19      	ldr	r3, [pc, #100]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
 8007572:	f001 ba21 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	637b      	str	r3, [r7, #52]	@ 0x34
 800757a:	f001 ba1d 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800757e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007582:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8007586:	430b      	orrs	r3, r1
 8007588:	d16e      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800758a:	4b0f      	ldr	r3, [pc, #60]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800758c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007590:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007594:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800759c:	d03d      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80075a4:	d85c      	bhi.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075ac:	d014      	beq.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075b4:	d854      	bhi.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01f      	beq.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075c2:	d012      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80075c4:	e04c      	b.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80075c6:	bf00      	nop
 80075c8:	46020c00 	.word	0x46020c00
 80075cc:	0007a120 	.word	0x0007a120
 80075d0:	00f42400 	.word	0x00f42400
 80075d4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fa8b 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075e6:	f001 b9e7 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ea:	f107 0318 	add.w	r3, r7, #24
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fbdc 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f8:	f001 b9de 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80075fc:	4ba7      	ldr	r3, [pc, #668]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007608:	d103      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800760a:	4ba5      	ldr	r3, [pc, #660]	@ (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800760e:	f001 b9d3 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007616:	f001 b9cf 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800761a:	4ba0      	ldr	r3, [pc, #640]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b20      	cmp	r3, #32
 8007624:	d118      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007626:	4b9d      	ldr	r3, [pc, #628]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007632:	4b9a      	ldr	r3, [pc, #616]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	0e1b      	lsrs	r3, r3, #24
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	e006      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800763e:	4b97      	ldr	r3, [pc, #604]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007644:	041b      	lsls	r3, r3, #16
 8007646:	0e1b      	lsrs	r3, r3, #24
 8007648:	f003 030f 	and.w	r3, r3, #15
 800764c:	4a95      	ldr	r2, [pc, #596]	@ (80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800764e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007654:	f001 b9b0 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800765c:	f001 b9ac 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007664:	f001 b9a8 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800766c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007670:	430b      	orrs	r3, r1
 8007672:	d17f      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007674:	4b89      	ldr	r3, [pc, #548]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007676:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800767a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800767e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	2b00      	cmp	r3, #0
 8007684:	d165      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007686:	4b85      	ldr	r3, [pc, #532]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800768c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007690:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007698:	d034      	beq.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80076a0:	d853      	bhi.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076a8:	d00b      	beq.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80076aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076b0:	d84b      	bhi.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d016      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076be:	d009      	beq.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80076c0:	e043      	b.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fa16 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80076d0:	f001 b972 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d4:	f107 0318 	add.w	r3, r7, #24
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fb67 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80076e2:	f001 b969 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80076e6:	4b6d      	ldr	r3, [pc, #436]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f2:	d103      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80076f4:	4b6a      	ldr	r3, [pc, #424]	@ (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076f6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80076f8:	f001 b95e 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007700:	f001 b95a 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007704:	4b65      	ldr	r3, [pc, #404]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0320 	and.w	r3, r3, #32
 800770c:	2b20      	cmp	r3, #32
 800770e:	d118      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007710:	4b62      	ldr	r3, [pc, #392]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800771c:	4b5f      	ldr	r3, [pc, #380]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	0e1b      	lsrs	r3, r3, #24
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	e006      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007728:	4b5c      	ldr	r3, [pc, #368]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800772a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	0e1b      	lsrs	r3, r3, #24
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	4a5b      	ldr	r2, [pc, #364]	@ (80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800773e:	f001 b93b 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007746:	f001 b937 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800774e:	f001 b933 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007758:	d108      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800775a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff f9ca 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	637b      	str	r3, [r7, #52]	@ 0x34
 8007768:	f001 b926 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007770:	f001 b922 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007778:	1e51      	subs	r1, r2, #1
 800777a:	430b      	orrs	r3, r1
 800777c:	d136      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800777e:	4b47      	ldr	r3, [pc, #284]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007790:	f7fe fa48 	bl	8005c24 <HAL_RCC_GetPCLK2Freq>
 8007794:	6378      	str	r0, [r7, #52]	@ 0x34
 8007796:	f001 b90f 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	2b01      	cmp	r3, #1
 800779e:	d104      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077a0:	f7fe f910 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 80077a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80077a6:	f001 b907 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80077aa:	4b3c      	ldr	r3, [pc, #240]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077b6:	d106      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d103      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80077be:	4b3a      	ldr	r3, [pc, #232]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c2:	f001 b8f9 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80077c6:	4b35      	ldr	r3, [pc, #212]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d107      	bne.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d104      	bne.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80077da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077de:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e0:	f001 b8ea 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e8:	f001 b8e6 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80077ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f0:	1e91      	subs	r1, r2, #2
 80077f2:	430b      	orrs	r3, r1
 80077f4:	d136      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80077f6:	4b29      	ldr	r3, [pc, #164]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80077f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077fc:	f003 030c 	and.w	r3, r3, #12
 8007800:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007808:	f7fe f9f8 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 800780c:	6378      	str	r0, [r7, #52]	@ 0x34
 800780e:	f001 b8d3 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	2b04      	cmp	r3, #4
 8007816:	d104      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007818:	f7fe f8d4 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 800781c:	6378      	str	r0, [r7, #52]	@ 0x34
 800781e:	f001 b8cb 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007822:	4b1e      	ldr	r3, [pc, #120]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800782a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800782e:	d106      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	2b08      	cmp	r3, #8
 8007834:	d103      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007836:	4b1c      	ldr	r3, [pc, #112]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007838:	637b      	str	r3, [r7, #52]	@ 0x34
 800783a:	f001 b8bd 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800783e:	4b17      	ldr	r3, [pc, #92]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d107      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	2b0c      	cmp	r3, #12
 8007850:	d104      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007856:	637b      	str	r3, [r7, #52]	@ 0x34
 8007858:	f001 b8ae 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	f001 b8aa 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007868:	1f11      	subs	r1, r2, #4
 800786a:	430b      	orrs	r3, r1
 800786c:	d13f      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800786e:	4b0b      	ldr	r3, [pc, #44]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007874:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007880:	f7fe f9bc 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8007884:	6378      	str	r0, [r7, #52]	@ 0x34
 8007886:	f001 b897 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	2b10      	cmp	r3, #16
 800788e:	d10d      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007890:	f7fe f898 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007894:	6378      	str	r0, [r7, #52]	@ 0x34
 8007896:	f001 b88f 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800789a:	bf00      	nop
 800789c:	46020c00 	.word	0x46020c00
 80078a0:	02dc6c00 	.word	0x02dc6c00
 80078a4:	0800d974 	.word	0x0800d974
 80078a8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80078ac:	4ba8      	ldr	r3, [pc, #672]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b8:	d106      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d103      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80078c0:	4ba4      	ldr	r3, [pc, #656]	@ (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c4:	f001 b878 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80078c8:	4ba1      	ldr	r3, [pc, #644]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d107      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	2b30      	cmp	r3, #48	@ 0x30
 80078da:	d104      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80078dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e2:	f001 b869 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ea:	f001 b865 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80078ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f2:	f1a2 0108 	sub.w	r1, r2, #8
 80078f6:	430b      	orrs	r3, r1
 80078f8:	d136      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80078fa:	4b95      	ldr	r3, [pc, #596]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007900:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007904:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800790c:	f7fe f976 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8007910:	6378      	str	r0, [r7, #52]	@ 0x34
 8007912:	f001 b851 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	2b40      	cmp	r3, #64	@ 0x40
 800791a:	d104      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800791c:	f7fe f852 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007920:	6378      	str	r0, [r7, #52]	@ 0x34
 8007922:	f001 b849 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007926:	4b8a      	ldr	r3, [pc, #552]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800792e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007932:	d106      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	2b80      	cmp	r3, #128	@ 0x80
 8007938:	d103      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800793a:	4b86      	ldr	r3, [pc, #536]	@ (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
 800793e:	f001 b83b 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007942:	4b83      	ldr	r3, [pc, #524]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b02      	cmp	r3, #2
 800794e:	d107      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007952:	2bc0      	cmp	r3, #192	@ 0xc0
 8007954:	d104      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800795a:	637b      	str	r3, [r7, #52]	@ 0x34
 800795c:	f001 b82c 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	637b      	str	r3, [r7, #52]	@ 0x34
 8007964:	f001 b828 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800796c:	f1a2 0110 	sub.w	r1, r2, #16
 8007970:	430b      	orrs	r3, r1
 8007972:	d139      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007974:	4b76      	ldr	r3, [pc, #472]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800797a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800797e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007986:	f7fe f939 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 800798a:	6378      	str	r0, [r7, #52]	@ 0x34
 800798c:	f001 b814 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007996:	d104      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007998:	f7fe f814 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 800799c:	6378      	str	r0, [r7, #52]	@ 0x34
 800799e:	f001 b80b 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80079a2:	4b6b      	ldr	r3, [pc, #428]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ae:	d107      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b6:	d103      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80079b8:	4b66      	ldr	r3, [pc, #408]	@ (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80079bc:	f000 bffc 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80079c0:	4b63      	ldr	r3, [pc, #396]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d108      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079d4:	d104      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80079d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
 80079dc:	f000 bfec 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e4:	f000 bfe8 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 80079e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ec:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80079f0:	430b      	orrs	r3, r1
 80079f2:	d139      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80079f4:	4b56      	ldr	r3, [pc, #344]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80079fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a06:	f7fe f8f9 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8007a0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a0c:	f000 bfd4 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a16:	d104      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a18:	f7fd ffd4 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007a1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a1e:	f000 bfcb 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007a22:	4b4b      	ldr	r3, [pc, #300]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a2e:	d107      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a36:	d103      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8007a38:	4b46      	ldr	r3, [pc, #280]	@ (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a3c:	f000 bfbc 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007a40:	4b43      	ldr	r3, [pc, #268]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d108      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a54:	d104      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8007a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5c:	f000 bfac 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a64:	f000 bfa8 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a6c:	f1a2 0120 	sub.w	r1, r2, #32
 8007a70:	430b      	orrs	r3, r1
 8007a72:	d158      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007a74:	4b36      	ldr	r3, [pc, #216]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d104      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007a86:	f7fe f8e1 	bl	8005c4c <HAL_RCC_GetPCLK3Freq>
 8007a8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a8c:	f000 bf94 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d104      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a96:	f7fd ff95 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007a9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a9c:	f000 bf8c 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aac:	d106      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d103      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8007ab4:	4b27      	ldr	r3, [pc, #156]	@ (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab8:	f000 bf7e 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007abc:	4b24      	ldr	r3, [pc, #144]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d107      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d104      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8007ad0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad6:	f000 bf6f 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007ada:	4b1d      	ldr	r3, [pc, #116]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	d11b      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d118      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007aec:	4b18      	ldr	r3, [pc, #96]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8007af8:	4b15      	ldr	r3, [pc, #84]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	0e1b      	lsrs	r3, r3, #24
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	e006      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8007b04:	4b12      	ldr	r3, [pc, #72]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b0a:	041b      	lsls	r3, r3, #16
 8007b0c:	0e1b      	lsrs	r3, r3, #24
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	4a11      	ldr	r2, [pc, #68]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1a:	f000 bf4d 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b22:	f000 bf49 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	d172      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007b32:	4b07      	ldr	r3, [pc, #28]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b38:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007b3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b44:	d10a      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b46:	f7fd ff3d 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007b4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b4c:	f000 bf34 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007b50:	46020c00 	.word	0x46020c00
 8007b54:	00f42400 	.word	0x00f42400
 8007b58:	0800d974 	.word	0x0800d974
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b62:	d108      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b64:	f107 0318 	add.w	r3, r7, #24
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff f91f 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b72:	f000 bf21 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007b7c:	f7fe f824 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8007b80:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b82:	f000 bf19 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007b8c:	d122      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b8e:	4bb0      	ldr	r3, [pc, #704]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d118      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b9a:	4bad      	ldr	r3, [pc, #692]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8007ba6:	4baa      	ldr	r3, [pc, #680]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	0e1b      	lsrs	r3, r3, #24
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	e006      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007bb2:	4ba7      	ldr	r3, [pc, #668]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	0e1b      	lsrs	r3, r3, #24
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	4aa4      	ldr	r2, [pc, #656]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc8:	f000 bef6 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd0:	f000 bef2 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007bd4:	4b9e      	ldr	r3, [pc, #632]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007be0:	d107      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007be8:	d103      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8007bea:	4b9b      	ldr	r3, [pc, #620]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bee:	f000 bee3 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007bf2:	4b97      	ldr	r3, [pc, #604]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bfe:	d107      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c06:	d103      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8007c08:	4b93      	ldr	r3, [pc, #588]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c0c:	f000 bed4 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c14:	f000 bed0 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007c20:	430b      	orrs	r3, r1
 8007c22:	d158      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007c24:	4b8a      	ldr	r3, [pc, #552]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d84b      	bhi.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8007c36:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c75 	.word	0x08007c75
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c63 	.word	0x08007c63
 8007c48:	08007c7f 	.word	0x08007c7f
 8007c4c:	08007c89 	.word	0x08007c89
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe ff4f 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c5e:	f000 beab 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c62:	f107 030c 	add.w	r3, r7, #12
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff f9fa 	bl	8007060 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c70:	f000 bea2 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007c74:	f7fd ffa8 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8007c78:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c7a:	f000 be9d 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c7e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c84:	f000 be98 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c88:	4b71      	ldr	r3, [pc, #452]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d118      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c94:	4b6e      	ldr	r3, [pc, #440]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	0e1b      	lsrs	r3, r3, #24
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	e006      	b.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007cac:	4b68      	ldr	r3, [pc, #416]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	0e1b      	lsrs	r3, r3, #24
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	4a66      	ldr	r2, [pc, #408]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007cc2:	f000 be79 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cca:	f000 be75 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cd2:	f000 be71 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cda:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	d167      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ce8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007cec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cf4:	d036      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cfc:	d855      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d04:	d029      	beq.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d0c:	d84d      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d14:	d013      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d1c:	d845      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d015      	beq.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d2a:	d13e      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fee1 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d3a:	f000 be3d 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d3e:	f107 030c 	add.w	r3, r7, #12
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff f98c 	bl	8007060 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d4c:	f000 be34 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007d50:	f7fd ff3a 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8007d54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d56:	f000 be2f 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d5a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d60:	f000 be2a 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d64:	4b3a      	ldr	r3, [pc, #232]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d118      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d70:	4b37      	ldr	r3, [pc, #220]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8007d7c:	4b34      	ldr	r3, [pc, #208]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	0e1b      	lsrs	r3, r3, #24
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	e006      	b.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007d88:	4b31      	ldr	r3, [pc, #196]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	0e1b      	lsrs	r3, r3, #24
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	4a2f      	ldr	r2, [pc, #188]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d9e:	f000 be0b 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007da6:	f000 be07 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dae:	f000 be03 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	d152      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007dbe:	4b24      	ldr	r3, [pc, #144]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007dc8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dd0:	f7fd ff14 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8007dd4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007dd6:	f000 bdef 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de0:	d104      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007de2:	f7fd fdef 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007de6:	6378      	str	r0, [r7, #52]	@ 0x34
 8007de8:	f000 bde6 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007dec:	4b18      	ldr	r3, [pc, #96]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007df8:	d107      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e00:	d103      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8007e02:	4b15      	ldr	r3, [pc, #84]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e06:	f000 bdd7 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007e0a:	4b11      	ldr	r3, [pc, #68]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d122      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e1c:	d11e      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8007e2a:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	0e1b      	lsrs	r3, r3, #24
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	e006      	b.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8007e36:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e3c:	041b      	lsls	r3, r3, #16
 8007e3e:	0e1b      	lsrs	r3, r3, #24
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	4a03      	ldr	r2, [pc, #12]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4c:	f000 bdb4 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007e50:	46020c00 	.word	0x46020c00
 8007e54:	0800d974 	.word	0x0800d974
 8007e58:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e60:	f000 bdaa 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e68:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	d14c      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007e70:	4ba8      	ldr	r3, [pc, #672]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007e7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e82:	f7fd febb 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8007e86:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e88:	f000 bd96 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e92:	d104      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e94:	f7fd fd96 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007e98:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e9a:	f000 bd8d 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007e9e:	4b9d      	ldr	r3, [pc, #628]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eaa:	d107      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb2:	d103      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8007eb4:	4b98      	ldr	r3, [pc, #608]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb8:	f000 bd7e 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007ebc:	4b95      	ldr	r3, [pc, #596]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d11c      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ece:	d118      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ed0:	4b90      	ldr	r3, [pc, #576]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007edc:	4b8d      	ldr	r3, [pc, #564]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	0e1b      	lsrs	r3, r3, #24
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	e006      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8007ee8:	4b8a      	ldr	r3, [pc, #552]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	0e1b      	lsrs	r3, r3, #24
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	4a89      	ldr	r2, [pc, #548]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007efe:	f000 bd5b 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f06:	f000 bd57 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f0e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007f12:	430b      	orrs	r3, r1
 8007f14:	d158      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007f16:	4b7f      	ldr	r3, [pc, #508]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f26:	d028      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f2c:	d848      	bhi.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	2b80      	cmp	r3, #128	@ 0x80
 8007f32:	d00e      	beq.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	2b80      	cmp	r3, #128	@ 0x80
 8007f38:	d842      	bhi.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	2b40      	cmp	r3, #64	@ 0x40
 8007f44:	d014      	beq.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007f46:	e03b      	b.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007f48:	f7fd fe80 	bl	8005c4c <HAL_RCC_GetPCLK3Freq>
 8007f4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007f4e:	f000 bd33 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f52:	4b70      	ldr	r3, [pc, #448]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f5e:	d103      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8007f60:	4b6d      	ldr	r3, [pc, #436]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007f62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f64:	f000 bd28 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f6c:	f000 bd24 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007f70:	f7fd fd28 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007f74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007f76:	f000 bd1f 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f7a:	4b66      	ldr	r3, [pc, #408]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d118      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f86:	4b63      	ldr	r3, [pc, #396]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8007f92:	4b60      	ldr	r3, [pc, #384]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	0e1b      	lsrs	r3, r3, #24
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	e006      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8007f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	0e1b      	lsrs	r3, r3, #24
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	4a5b      	ldr	r2, [pc, #364]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007fb4:	f000 bd00 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fbc:	f000 bcfc 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fc4:	f000 bcf8 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fcc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	d14c      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007fd4:	4b4f      	ldr	r3, [pc, #316]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007fde:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d104      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007fe6:	f7fd fe09 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8007fea:	6378      	str	r0, [r7, #52]	@ 0x34
 8007fec:	f000 bce4 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ff6:	d104      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ff8:	f7fd fce4 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8007ffc:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ffe:	f000 bcdb 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008002:	4b44      	ldr	r3, [pc, #272]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800800a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800800e:	d107      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008016:	d103      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8008018:	4b3f      	ldr	r3, [pc, #252]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
 800801c:	f000 bccc 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008020:	4b3c      	ldr	r3, [pc, #240]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b20      	cmp	r3, #32
 800802a:	d11c      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008032:	d118      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008034:	4b37      	ldr	r3, [pc, #220]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8008040:	4b34      	ldr	r3, [pc, #208]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	0e1b      	lsrs	r3, r3, #24
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	e006      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800804c:	4b31      	ldr	r3, [pc, #196]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800804e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	0e1b      	lsrs	r3, r3, #24
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	4a30      	ldr	r2, [pc, #192]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800805c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008060:	637b      	str	r3, [r7, #52]	@ 0x34
 8008062:	f000 bca9 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
 800806a:	f000 bca5 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800806e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008072:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8008076:	430b      	orrs	r3, r1
 8008078:	d152      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800807a:	4b26      	ldr	r3, [pc, #152]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800807c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008080:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008084:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800808c:	f7fd fdb6 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8008090:	6378      	str	r0, [r7, #52]	@ 0x34
 8008092:	f000 bc91 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8008096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800809c:	d104      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800809e:	f7fd fc91 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 80080a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80080a4:	f000 bc88 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80080a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b4:	d107      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080bc:	d103      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 80080be:	4b16      	ldr	r3, [pc, #88]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c2:	f000 bc79 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80080c6:	4b13      	ldr	r3, [pc, #76]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d11c      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080d8:	d118      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080da:	4b0e      	ldr	r3, [pc, #56]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 80080e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	0e1b      	lsrs	r3, r3, #24
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	e006      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 80080f2:	4b08      	ldr	r3, [pc, #32]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80080f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	0e1b      	lsrs	r3, r3, #24
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	4a06      	ldr	r2, [pc, #24]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008106:	637b      	str	r3, [r7, #52]	@ 0x34
 8008108:	f000 bc56 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008110:	f000 bc52 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008114:	46020c00 	.word	0x46020c00
 8008118:	00f42400 	.word	0x00f42400
 800811c:	0800d974 	.word	0x0800d974
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8008120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008124:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8008128:	430b      	orrs	r3, r1
 800812a:	d14a      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800812c:	4ba5      	ldr	r3, [pc, #660]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800812e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008132:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008136:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800813e:	f7fd fd5d 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8008142:	6378      	str	r0, [r7, #52]	@ 0x34
 8008144:	f000 bc38 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800814e:	d104      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008150:	f7fd fc38 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8008154:	6378      	str	r0, [r7, #52]	@ 0x34
 8008156:	f000 bc2f 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800815a:	4b9a      	ldr	r3, [pc, #616]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008166:	d107      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800816e:	d103      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8008170:	4b95      	ldr	r3, [pc, #596]	@ (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008172:	637b      	str	r3, [r7, #52]	@ 0x34
 8008174:	f000 bc20 	b.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8008178:	4b92      	ldr	r3, [pc, #584]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b20      	cmp	r3, #32
 8008182:	d11b      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800818a:	d117      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800818c:	4b8d      	ldr	r3, [pc, #564]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8008198:	4b8a      	ldr	r3, [pc, #552]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	0e1b      	lsrs	r3, r3, #24
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	e006      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80081a4:	4b87      	ldr	r3, [pc, #540]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80081a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	0e1b      	lsrs	r3, r3, #24
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	4a86      	ldr	r2, [pc, #536]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80081b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ba:	e3fd      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c0:	e3fa      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80081c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80081ca:	430b      	orrs	r3, r1
 80081cc:	d164      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80081ce:	4b7d      	ldr	r3, [pc, #500]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80081d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80081da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d120      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80081e0:	4b78      	ldr	r3, [pc, #480]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d117      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081ec:	4b75      	ldr	r3, [pc, #468]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 80081f8:	4b72      	ldr	r3, [pc, #456]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	0e1b      	lsrs	r3, r3, #24
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	e006      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8008204:	4b6f      	ldr	r3, [pc, #444]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	0e1b      	lsrs	r3, r3, #24
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	4a6e      	ldr	r2, [pc, #440]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8008214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
 800821a:	e3cd      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008220:	e3ca      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008222:	4b68      	ldr	r3, [pc, #416]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800822c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008230:	d112      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008238:	d10e      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800823a:	4b62      	ldr	r3, [pc, #392]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800823c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008248:	d102      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800824a:	23fa      	movs	r3, #250	@ 0xfa
 800824c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800824e:	e3b3      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008250:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008254:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008256:	e3af      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008258:	4b5a      	ldr	r3, [pc, #360]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008264:	d106      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800826c:	d102      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800826e:	4b56      	ldr	r3, [pc, #344]	@ (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008270:	637b      	str	r3, [r7, #52]	@ 0x34
 8008272:	e3a1      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008274:	4b53      	ldr	r3, [pc, #332]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b02      	cmp	r3, #2
 8008280:	d107      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008288:	d103      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800828a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800828e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008290:	e392      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
 8008296:	e38f      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800829c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80082a0:	430b      	orrs	r3, r1
 80082a2:	d164      	bne.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80082a4:	4b47      	ldr	r3, [pc, #284]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082aa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80082ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d120      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082b6:	4b43      	ldr	r3, [pc, #268]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d117      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082c2:	4b40      	ldr	r3, [pc, #256]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 80082ce:	4b3d      	ldr	r3, [pc, #244]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	0e1b      	lsrs	r3, r3, #24
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	e006      	b.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80082da:	4b3a      	ldr	r3, [pc, #232]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082e0:	041b      	lsls	r3, r3, #16
 80082e2:	0e1b      	lsrs	r3, r3, #24
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	4a38      	ldr	r2, [pc, #224]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80082ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f0:	e362      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f6:	e35f      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80082f8:	4b32      	ldr	r3, [pc, #200]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80082fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008302:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008306:	d112      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8008308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800830e:	d10e      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008310:	4b2c      	ldr	r3, [pc, #176]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800831a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800831e:	d102      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8008320:	23fa      	movs	r3, #250	@ 0xfa
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008324:	e348      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8008326:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800832a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800832c:	e344      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800832e:	4b25      	ldr	r3, [pc, #148]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800833a:	d106      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 800833c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008342:	d102      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8008344:	4b20      	ldr	r3, [pc, #128]	@ (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008346:	637b      	str	r3, [r7, #52]	@ 0x34
 8008348:	e336      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800834a:	4b1e      	ldr	r3, [pc, #120]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800834c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b02      	cmp	r3, #2
 8008356:	d107      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800835e:	d103      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8008360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008364:	637b      	str	r3, [r7, #52]	@ 0x34
 8008366:	e327      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	637b      	str	r3, [r7, #52]	@ 0x34
 800836c:	e324      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800836e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008372:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008376:	430b      	orrs	r3, r1
 8008378:	d14e      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800837a:	4b12      	ldr	r3, [pc, #72]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800837c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008380:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008384:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800838c:	f7fd fc36 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8008390:	6378      	str	r0, [r7, #52]	@ 0x34
 8008392:	e311      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008394:	4b0b      	ldr	r3, [pc, #44]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8008396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800839a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800839e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083a2:	d119      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083aa:	d115      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083ac:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80083ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083ba:	d109      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 80083bc:	23fa      	movs	r3, #250	@ 0xfa
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083c0:	e2fa      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80083c2:	bf00      	nop
 80083c4:	46020c00 	.word	0x46020c00
 80083c8:	00f42400 	.word	0x00f42400
 80083cc:	0800d974 	.word	0x0800d974
      }
      else
      {
        frequency = LSI_VALUE;
 80083d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80083d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083d6:	e2ef      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80083d8:	4ba8      	ldr	r3, [pc, #672]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083e4:	d106      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80083ec:	d102      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 80083ee:	4ba4      	ldr	r3, [pc, #656]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80083f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f2:	e2e1      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80083f4:	4ba1      	ldr	r3, [pc, #644]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80083f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d107      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8008402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008404:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008408:	d103      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800840a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008410:	e2d2      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
 8008416:	e2cf      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800841c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8008420:	430b      	orrs	r3, r1
 8008422:	d12d      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008424:	4b95      	ldr	r3, [pc, #596]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800842a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800842e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008430:	4b92      	ldr	r3, [pc, #584]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800843c:	d105      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8008444:	4b8e      	ldr	r3, [pc, #568]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008446:	637b      	str	r3, [r7, #52]	@ 0x34
 8008448:	e2b6      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008450:	d107      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fb4e 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008460:	e2aa      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008468:	d107      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800846a:	f107 0318 	add.w	r3, r7, #24
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fc9c 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
 8008478:	e29e      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
 800847e:	e29b      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008484:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008488:	430b      	orrs	r3, r1
 800848a:	d156      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800848c:	4b7b      	ldr	r3, [pc, #492]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800848e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008492:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008496:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800849e:	d028      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084a6:	d845      	bhi.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084ae:	d013      	beq.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084b6:	d83d      	bhi.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084c4:	d004      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 80084c6:	e035      	b.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80084c8:	f7fd fbac 	bl	8005c24 <HAL_RCC_GetPCLK2Freq>
 80084cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084ce:	e273      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80084d0:	f7fd fa78 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 80084d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084d6:	e26f      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084d8:	4b68      	ldr	r3, [pc, #416]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e4:	d102      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 80084e6:	4b66      	ldr	r3, [pc, #408]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80084e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084ea:	e265      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084f0:	e262      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084f2:	4b62      	ldr	r3, [pc, #392]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d117      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084fe:	4b5f      	ldr	r3, [pc, #380]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800850a:	4b5c      	ldr	r3, [pc, #368]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	0e1b      	lsrs	r3, r3, #24
 8008510:	f003 030f 	and.w	r3, r3, #15
 8008514:	e006      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8008516:	4b59      	ldr	r3, [pc, #356]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800851c:	041b      	lsls	r3, r3, #16
 800851e:	0e1b      	lsrs	r3, r3, #24
 8008520:	f003 030f 	and.w	r3, r3, #15
 8008524:	4a57      	ldr	r2, [pc, #348]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8008526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800852a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800852c:	e244      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008532:	e241      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008538:	e23e      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800853a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8008542:	430b      	orrs	r3, r1
 8008544:	d156      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008546:	4b4d      	ldr	r3, [pc, #308]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800854c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008550:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008558:	d028      	beq.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008560:	d845      	bhi.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008568:	d013      	beq.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008570:	d83d      	bhi.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8008572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800857e:	d004      	beq.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8008580:	e035      	b.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008582:	f7fd fb3b 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8008586:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008588:	e216      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800858a:	f7fd fa1b 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 800858e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008590:	e212      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008592:	4b3a      	ldr	r3, [pc, #232]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800859a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859e:	d102      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 80085a0:	4b37      	ldr	r3, [pc, #220]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085a4:	e208      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085aa:	e205      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085ac:	4b33      	ldr	r3, [pc, #204]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	d117      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085b8:	4b30      	ldr	r3, [pc, #192]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 80085c4:	4b2d      	ldr	r3, [pc, #180]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	0e1b      	lsrs	r3, r3, #24
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	e006      	b.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 80085d0:	4b2a      	ldr	r3, [pc, #168]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085d6:	041b      	lsls	r3, r3, #16
 80085d8:	0e1b      	lsrs	r3, r3, #24
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	4a29      	ldr	r2, [pc, #164]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80085e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085e6:	e1e7      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ec:	e1e4      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085f2:	e1e1      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80085f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f8:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80085fc:	430b      	orrs	r3, r1
 80085fe:	d17c      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008600:	4b1e      	ldr	r3, [pc, #120]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008606:	f003 0318 	and.w	r3, r3, #24
 800860a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	2b18      	cmp	r3, #24
 8008610:	d870      	bhi.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8008612:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	08008689 	.word	0x08008689
 800861c:	080086f5 	.word	0x080086f5
 8008620:	080086f5 	.word	0x080086f5
 8008624:	080086f5 	.word	0x080086f5
 8008628:	080086f5 	.word	0x080086f5
 800862c:	080086f5 	.word	0x080086f5
 8008630:	080086f5 	.word	0x080086f5
 8008634:	080086f5 	.word	0x080086f5
 8008638:	08008691 	.word	0x08008691
 800863c:	080086f5 	.word	0x080086f5
 8008640:	080086f5 	.word	0x080086f5
 8008644:	080086f5 	.word	0x080086f5
 8008648:	080086f5 	.word	0x080086f5
 800864c:	080086f5 	.word	0x080086f5
 8008650:	080086f5 	.word	0x080086f5
 8008654:	080086f5 	.word	0x080086f5
 8008658:	08008699 	.word	0x08008699
 800865c:	080086f5 	.word	0x080086f5
 8008660:	080086f5 	.word	0x080086f5
 8008664:	080086f5 	.word	0x080086f5
 8008668:	080086f5 	.word	0x080086f5
 800866c:	080086f5 	.word	0x080086f5
 8008670:	080086f5 	.word	0x080086f5
 8008674:	080086f5 	.word	0x080086f5
 8008678:	080086b3 	.word	0x080086b3
 800867c:	46020c00 	.word	0x46020c00
 8008680:	00f42400 	.word	0x00f42400
 8008684:	0800d974 	.word	0x0800d974
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008688:	f7fd fae0 	bl	8005c4c <HAL_RCC_GetPCLK3Freq>
 800868c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800868e:	e193      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008690:	f7fd f998 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8008694:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008696:	e18f      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008698:	4b9f      	ldr	r3, [pc, #636]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a4:	d102      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 80086a6:	4b9d      	ldr	r3, [pc, #628]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086aa:	e185      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086b0:	e182      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80086b2:	4b99      	ldr	r3, [pc, #612]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d117      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086be:	4b96      	ldr	r3, [pc, #600]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 80086ca:	4b93      	ldr	r3, [pc, #588]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	0e1b      	lsrs	r3, r3, #24
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	e006      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 80086d6:	4b90      	ldr	r3, [pc, #576]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80086d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086dc:	041b      	lsls	r3, r3, #16
 80086de:	0e1b      	lsrs	r3, r3, #24
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	4a8e      	ldr	r2, [pc, #568]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80086e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086ec:	e164      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086f2:	e161      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086f8:	e15e      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80086fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086fe:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008702:	430b      	orrs	r3, r1
 8008704:	d155      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008706:	4b84      	ldr	r3, [pc, #528]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008708:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800870c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008710:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008718:	d013      	beq.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800871a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008720:	d844      	bhi.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008728:	d013      	beq.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800872a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008730:	d83c      	bhi.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	2b00      	cmp	r3, #0
 8008736:	d014      	beq.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8008738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800873e:	d014      	beq.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8008740:	e034      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008742:	f107 0318 	add.w	r3, r7, #24
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fb30 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008750:	e132      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe f9ce 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008760:	e12a      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008762:	f7fd f92f 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8008766:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008768:	e126      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800876a:	4b6b      	ldr	r3, [pc, #428]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b20      	cmp	r3, #32
 8008774:	d117      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008776:	4b68      	ldr	r3, [pc, #416]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8008782:	4b65      	ldr	r3, [pc, #404]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	0e1b      	lsrs	r3, r3, #24
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	e006      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 800878e:	4b62      	ldr	r3, [pc, #392]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008794:	041b      	lsls	r3, r3, #16
 8008796:	0e1b      	lsrs	r3, r3, #24
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	4a60      	ldr	r2, [pc, #384]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800879e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087a4:	e108      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087aa:	e105      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087b0:	e102      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80087b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b6:	1e59      	subs	r1, r3, #1
 80087b8:	ea52 0301 	orrs.w	r3, r2, r1
 80087bc:	d13c      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80087be:	4b56      	ldr	r3, [pc, #344]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80087c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80087c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80087d0:	d027      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80087d8:	d82b      	bhi.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087e0:	d017      	beq.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087e8:	d823      	bhi.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d004      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087f6:	d004      	beq.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80087f8:	e01b      	b.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80087fa:	f7fd f8e3 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 80087fe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008800:	e0da      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe f976 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008810:	e0d2      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008812:	f107 0318 	add.w	r3, r7, #24
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe fac8 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008820:	e0ca      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008822:	f107 030c 	add.w	r3, r7, #12
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fc1a 	bl	8007060 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008830:	e0c2      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008836:	e0bf      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800883c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008840:	430b      	orrs	r3, r1
 8008842:	d131      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008844:	4b34      	ldr	r3, [pc, #208]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800884a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800884e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008850:	4b31      	ldr	r3, [pc, #196]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b02      	cmp	r3, #2
 800885c:	d106      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8008864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
 800886a:	e0a5      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800886c:	4b2a      	ldr	r3, [pc, #168]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800886e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800887a:	d112      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008882:	d10e      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008884:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8008886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800888a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800888e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008892:	d102      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8008894:	23fa      	movs	r3, #250	@ 0xfa
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008898:	e08e      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800889a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800889e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088a0:	e08a      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a6:	e087      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80088a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ac:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80088b0:	430b      	orrs	r3, r1
 80088b2:	d13b      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80088b4:	4b18      	ldr	r3, [pc, #96]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80088b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80088be:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80088c0:	4b15      	ldr	r3, [pc, #84]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088cc:	d105      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 80088d4:	4b13      	ldr	r3, [pc, #76]	@ (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80088d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d8:	e06e      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80088da:	4b0f      	ldr	r3, [pc, #60]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088e6:	d106      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ee:	d102      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 80088f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f4:	e060      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80088f6:	4b08      	ldr	r3, [pc, #32]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008902:	d106      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8008904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800890a:	d102      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 800890c:	4b03      	ldr	r3, [pc, #12]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800890e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008910:	e052      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	637b      	str	r3, [r7, #52]	@ 0x34
 8008916:	e04f      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8008918:	46020c00 	.word	0x46020c00
 800891c:	00f42400 	.word	0x00f42400
 8008920:	0800d974 	.word	0x0800d974
 8008924:	02dc6c00 	.word	0x02dc6c00
 8008928:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800892c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008930:	f1a3 0108 	sub.w	r1, r3, #8
 8008934:	ea52 0301 	orrs.w	r3, r2, r1
 8008938:	d13c      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800893a:	4b22      	ldr	r3, [pc, #136]	@ (80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800893c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008940:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008944:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8008946:	4b1f      	ldr	r3, [pc, #124]	@ (80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008952:	d105      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800895a:	4b1b      	ldr	r3, [pc, #108]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	e02b      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8008960:	4b18      	ldr	r3, [pc, #96]	@ (80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800896c:	d106      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008974:	d102      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8008976:	4b15      	ldr	r3, [pc, #84]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8008978:	637b      	str	r3, [r7, #52]	@ 0x34
 800897a:	e01d      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008982:	d107      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe f8b5 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	637b      	str	r3, [r7, #52]	@ 0x34
 8008992:	e011      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800899a:	d108      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800899c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe f8a9 	bl	8006af8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ac:	e004      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b2:	e001      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80089b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3738      	adds	r7, #56	@ 0x38
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	46020c00 	.word	0x46020c00
 80089c8:	00f42400 	.word	0x00f42400
 80089cc:	007a1200 	.word	0x007a1200

080089d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80089d8:	4b47      	ldr	r3, [pc, #284]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a46      	ldr	r2, [pc, #280]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 80089de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089e4:	f7f9 f99c 	bl	8001d20 <HAL_GetTick>
 80089e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089ea:	e008      	b.n	80089fe <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089ec:	f7f9 f998 	bl	8001d20 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d901      	bls.n	80089fe <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e077      	b.n	8008aee <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089fe:	4b3e      	ldr	r3, [pc, #248]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1f0      	bne.n	80089ec <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6811      	ldr	r1, [r2, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	6852      	ldr	r2, [r2, #4]
 8008a1e:	3a01      	subs	r2, #1
 8008a20:	0212      	lsls	r2, r2, #8
 8008a22:	430a      	orrs	r2, r1
 8008a24:	4934      	ldr	r1, [pc, #208]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008a2a:	4b33      	ldr	r3, [pc, #204]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a2e:	4b33      	ldr	r3, [pc, #204]	@ (8008afc <RCCEx_PLL2_Config+0x12c>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6892      	ldr	r2, [r2, #8]
 8008a36:	3a01      	subs	r2, #1
 8008a38:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	68d2      	ldr	r2, [r2, #12]
 8008a40:	3a01      	subs	r2, #1
 8008a42:	0252      	lsls	r2, r2, #9
 8008a44:	b292      	uxth	r2, r2
 8008a46:	4311      	orrs	r1, r2
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	6912      	ldr	r2, [r2, #16]
 8008a4c:	3a01      	subs	r2, #1
 8008a4e:	0412      	lsls	r2, r2, #16
 8008a50:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008a54:	4311      	orrs	r1, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6952      	ldr	r2, [r2, #20]
 8008a5a:	3a01      	subs	r2, #1
 8008a5c:	0612      	lsls	r2, r2, #24
 8008a5e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008a62:	430a      	orrs	r2, r1
 8008a64:	4924      	ldr	r1, [pc, #144]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008a6a:	4b23      	ldr	r3, [pc, #140]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6e:	f023 020c 	bic.w	r2, r3, #12
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	4920      	ldr	r1, [pc, #128]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	491c      	ldr	r1, [pc, #112]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a90:	f023 0310 	bic.w	r3, r3, #16
 8008a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a96:	4b18      	ldr	r3, [pc, #96]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a9e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	69d2      	ldr	r2, [r2, #28]
 8008aa6:	00d2      	lsls	r2, r2, #3
 8008aa8:	4913      	ldr	r1, [pc, #76]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008aae:	4b12      	ldr	r3, [pc, #72]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab2:	4a11      	ldr	r2, [pc, #68]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008ab4:	f043 0310 	orr.w	r3, r3, #16
 8008ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008aba:	4b0f      	ldr	r3, [pc, #60]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a0e      	ldr	r2, [pc, #56]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008ac0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008ac4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ac6:	f7f9 f92b 	bl	8001d20 <HAL_GetTick>
 8008aca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008acc:	e008      	b.n	8008ae0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ace:	f7f9 f927 	bl	8001d20 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d901      	bls.n	8008ae0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e006      	b.n	8008aee <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ae0:	4b05      	ldr	r3, [pc, #20]	@ (8008af8 <RCCEx_PLL2_Config+0x128>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0f0      	beq.n	8008ace <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008aec:	2300      	movs	r3, #0

}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	46020c00 	.word	0x46020c00
 8008afc:	80800000 	.word	0x80800000

08008b00 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008b08:	4b47      	ldr	r3, [pc, #284]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a46      	ldr	r2, [pc, #280]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b12:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b14:	f7f9 f904 	bl	8001d20 <HAL_GetTick>
 8008b18:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b1a:	e008      	b.n	8008b2e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b1c:	f7f9 f900 	bl	8001d20 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d901      	bls.n	8008b2e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e077      	b.n	8008c1e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1f0      	bne.n	8008b1c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008b42:	f023 0303 	bic.w	r3, r3, #3
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6811      	ldr	r1, [r2, #0]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	6852      	ldr	r2, [r2, #4]
 8008b4e:	3a01      	subs	r2, #1
 8008b50:	0212      	lsls	r2, r2, #8
 8008b52:	430a      	orrs	r2, r1
 8008b54:	4934      	ldr	r1, [pc, #208]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	630b      	str	r3, [r1, #48]	@ 0x30
 8008b5a:	4b33      	ldr	r3, [pc, #204]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b5e:	4b33      	ldr	r3, [pc, #204]	@ (8008c2c <RCCEx_PLL3_Config+0x12c>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	6892      	ldr	r2, [r2, #8]
 8008b66:	3a01      	subs	r2, #1
 8008b68:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	68d2      	ldr	r2, [r2, #12]
 8008b70:	3a01      	subs	r2, #1
 8008b72:	0252      	lsls	r2, r2, #9
 8008b74:	b292      	uxth	r2, r2
 8008b76:	4311      	orrs	r1, r2
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	6912      	ldr	r2, [r2, #16]
 8008b7c:	3a01      	subs	r2, #1
 8008b7e:	0412      	lsls	r2, r2, #16
 8008b80:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008b84:	4311      	orrs	r1, r2
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6952      	ldr	r2, [r2, #20]
 8008b8a:	3a01      	subs	r2, #1
 8008b8c:	0612      	lsls	r2, r2, #24
 8008b8e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008b92:	430a      	orrs	r2, r1
 8008b94:	4924      	ldr	r1, [pc, #144]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008b9a:	4b23      	ldr	r3, [pc, #140]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9e:	f023 020c 	bic.w	r2, r3, #12
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	4920      	ldr	r1, [pc, #128]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008bac:	4b1e      	ldr	r3, [pc, #120]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	491c      	ldr	r1, [pc, #112]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008bba:	4b1b      	ldr	r3, [pc, #108]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008bc0:	f023 0310 	bic.w	r3, r3, #16
 8008bc4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bc6:	4b18      	ldr	r3, [pc, #96]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	69d2      	ldr	r2, [r2, #28]
 8008bd6:	00d2      	lsls	r2, r2, #3
 8008bd8:	4913      	ldr	r1, [pc, #76]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008bde:	4b12      	ldr	r3, [pc, #72]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be2:	4a11      	ldr	r2, [pc, #68]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008be4:	f043 0310 	orr.w	r3, r3, #16
 8008be8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008bea:	4b0f      	ldr	r3, [pc, #60]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a0e      	ldr	r2, [pc, #56]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bf4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008bf6:	f7f9 f893 	bl	8001d20 <HAL_GetTick>
 8008bfa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bfc:	e008      	b.n	8008c10 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bfe:	f7f9 f88f 	bl	8001d20 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d901      	bls.n	8008c10 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e006      	b.n	8008c1e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <RCCEx_PLL3_Config+0x128>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0f0      	beq.n	8008bfe <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	46020c00 	.word	0x46020c00
 8008c2c:	80800000 	.word	0x80800000

08008c30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d071      	beq.n	8008d26 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7f8 fc3c 	bl	80014d4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008c64:	4b32      	ldr	r3, [pc, #200]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b10      	cmp	r3, #16
 8008c6e:	d051      	beq.n	8008d14 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c70:	4b2f      	ldr	r3, [pc, #188]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008c72:	22ca      	movs	r2, #202	@ 0xca
 8008c74:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c76:	4b2e      	ldr	r3, [pc, #184]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008c78:	2253      	movs	r2, #83	@ 0x53
 8008c7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f9ad 	bl	8008fdc <RTC_EnterInitMode>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d13f      	bne.n	8008d0c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008c8c:	4b28      	ldr	r3, [pc, #160]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	4a27      	ldr	r2, [pc, #156]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008c92:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8008c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c9a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008c9c:	4b24      	ldr	r3, [pc, #144]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6859      	ldr	r1, [r3, #4]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	4319      	orrs	r1, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	491f      	ldr	r1, [pc, #124]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	041b      	lsls	r3, r3, #16
 8008cc0:	491b      	ldr	r1, [pc, #108]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	430b      	orrs	r3, r1
 8008cd8:	4915      	ldr	r1, [pc, #84]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f9b8 	bl	8009054 <RTC_ExitInitMode>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10e      	bne.n	8008d0c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008cee:	4b10      	ldr	r3, [pc, #64]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a19      	ldr	r1, [r3, #32]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	4319      	orrs	r1, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	430b      	orrs	r3, r1
 8008d06:	490a      	ldr	r1, [pc, #40]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d0c:	4b08      	ldr	r3, [pc, #32]	@ (8008d30 <HAL_RTC_Init+0x100>)
 8008d0e:	22ff      	movs	r2, #255	@ 0xff
 8008d10:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d12:	e001      	b.n	8008d18 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d103      	bne.n	8008d26 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	46007800 	.word	0x46007800

08008d34 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d34:	b590      	push	{r4, r7, lr}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_RTC_SetTime+0x1a>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e088      	b.n	8008e60 <HAL_RTC_SetTime+0x12c>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2202      	movs	r2, #2
 8008d5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d5e:	4b42      	ldr	r3, [pc, #264]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008d60:	22ca      	movs	r2, #202	@ 0xca
 8008d62:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d64:	4b40      	ldr	r3, [pc, #256]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008d66:	2253      	movs	r2, #83	@ 0x53
 8008d68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f936 	bl	8008fdc <RTC_EnterInitMode>
 8008d70:	4603      	mov	r3, r0
 8008d72:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008d74:	7cfb      	ldrb	r3, [r7, #19]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d163      	bne.n	8008e42 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d86:	d057      	beq.n	8008e38 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d125      	bne.n	8008dda <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008d8e:	4b36      	ldr	r3, [pc, #216]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d102      	bne.n	8008da0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 f993 	bl	80090d0 <RTC_ByteToBcd2>
 8008daa:	4603      	mov	r3, r0
 8008dac:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f98c 	bl	80090d0 <RTC_ByteToBcd2>
 8008db8:	4603      	mov	r3, r0
 8008dba:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dbc:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	789b      	ldrb	r3, [r3, #2]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f984 	bl	80090d0 <RTC_ByteToBcd2>
 8008dc8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008dca:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	78db      	ldrb	r3, [r3, #3]
 8008dd2:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	e017      	b.n	8008e0a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008dda:	4b23      	ldr	r3, [pc, #140]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2200      	movs	r2, #0
 8008dea:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	785b      	ldrb	r3, [r3, #1]
 8008df6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008df8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008dfe:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	78db      	ldrb	r3, [r3, #3]
 8008e04:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008e0a:	4a17      	ldr	r2, [pc, #92]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008e12:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008e16:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008e18:	4b13      	ldr	r3, [pc, #76]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	4a12      	ldr	r2, [pc, #72]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e22:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8008e24:	4b10      	ldr	r3, [pc, #64]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008e26:	699a      	ldr	r2, [r3, #24]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	68d9      	ldr	r1, [r3, #12]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	430b      	orrs	r3, r1
 8008e32:	490d      	ldr	r1, [pc, #52]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 f90b 	bl	8009054 <RTC_ExitInitMode>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e42:	4b09      	ldr	r3, [pc, #36]	@ (8008e68 <HAL_RTC_SetTime+0x134>)
 8008e44:	22ff      	movs	r2, #255	@ 0xff
 8008e46:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008e48:	7cfb      	ldrb	r3, [r7, #19]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d103      	bne.n	8008e56 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8008e5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	371c      	adds	r7, #28
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd90      	pop	{r4, r7, pc}
 8008e68:	46007800 	.word	0x46007800

08008e6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e6c:	b590      	push	{r4, r7, lr}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_RTC_SetDate+0x1a>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e071      	b.n	8008f6a <HAL_RTC_SetDate+0xfe>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2202      	movs	r2, #2
 8008e92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10e      	bne.n	8008eba <HAL_RTC_SetDate+0x4e>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d008      	beq.n	8008eba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	785b      	ldrb	r3, [r3, #1]
 8008eac:	f023 0310 	bic.w	r3, r3, #16
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	330a      	adds	r3, #10
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11c      	bne.n	8008efa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	78db      	ldrb	r3, [r3, #3]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 f903 	bl	80090d0 <RTC_ByteToBcd2>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 f8fc 	bl	80090d0 <RTC_ByteToBcd2>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008edc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	789b      	ldrb	r3, [r3, #2]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f8f4 	bl	80090d0 <RTC_ByteToBcd2>
 8008ee8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008eea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	e00e      	b.n	8008f18 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	78db      	ldrb	r3, [r3, #3]
 8008efe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	785b      	ldrb	r3, [r3, #1]
 8008f04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008f06:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008f0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f18:	4b16      	ldr	r3, [pc, #88]	@ (8008f74 <HAL_RTC_SetDate+0x108>)
 8008f1a:	22ca      	movs	r2, #202	@ 0xca
 8008f1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f1e:	4b15      	ldr	r3, [pc, #84]	@ (8008f74 <HAL_RTC_SetDate+0x108>)
 8008f20:	2253      	movs	r2, #83	@ 0x53
 8008f22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f859 	bl	8008fdc <RTC_EnterInitMode>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008f2e:	7cfb      	ldrb	r3, [r7, #19]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10b      	bne.n	8008f4c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8008f34:	4a0f      	ldr	r2, [pc, #60]	@ (8008f74 <HAL_RTC_SetDate+0x108>)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008f3c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008f40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 f886 	bl	8009054 <RTC_ExitInitMode>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f4c:	4b09      	ldr	r3, [pc, #36]	@ (8008f74 <HAL_RTC_SetDate+0x108>)
 8008f4e:	22ff      	movs	r2, #255	@ 0xff
 8008f50:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008f52:	7cfb      	ldrb	r3, [r7, #19]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8008f68:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd90      	pop	{r4, r7, pc}
 8008f72:	bf00      	nop
 8008f74:	46007800 	.word	0x46007800

08008f78 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008f80:	4b15      	ldr	r3, [pc, #84]	@ (8008fd8 <HAL_RTC_WaitForSynchro+0x60>)
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	4a14      	ldr	r2, [pc, #80]	@ (8008fd8 <HAL_RTC_WaitForSynchro+0x60>)
 8008f86:	f023 0320 	bic.w	r3, r3, #32
 8008f8a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008f8c:	f7f8 fec8 	bl	8001d20 <HAL_GetTick>
 8008f90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008f92:	e013      	b.n	8008fbc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f94:	f7f8 fec4 	bl	8001d20 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fa2:	d90b      	bls.n	8008fbc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd8 <HAL_RTC_WaitForSynchro+0x60>)
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10c      	bne.n	8008fca <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2203      	movs	r2, #3
 8008fb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e008      	b.n	8008fce <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008fbc:	4b06      	ldr	r3, [pc, #24]	@ (8008fd8 <HAL_RTC_WaitForSynchro+0x60>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0e5      	beq.n	8008f94 <HAL_RTC_WaitForSynchro+0x1c>
 8008fc8:	e000      	b.n	8008fcc <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8008fca:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	46007800 	.word	0x46007800

08008fdc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008fe8:	4b19      	ldr	r3, [pc, #100]	@ (8009050 <RTC_EnterInitMode+0x74>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d128      	bne.n	8009046 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008ff4:	4b16      	ldr	r3, [pc, #88]	@ (8009050 <RTC_EnterInitMode+0x74>)
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	4a15      	ldr	r2, [pc, #84]	@ (8009050 <RTC_EnterInitMode+0x74>)
 8008ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ffe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009000:	f7f8 fe8e 	bl	8001d20 <HAL_GetTick>
 8009004:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009006:	e013      	b.n	8009030 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009008:	f7f8 fe8a 	bl	8001d20 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009016:	d90b      	bls.n	8009030 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009018:	4b0d      	ldr	r3, [pc, #52]	@ (8009050 <RTC_EnterInitMode+0x74>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10f      	bne.n	8009044 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2203      	movs	r2, #3
 800902c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009030:	4b07      	ldr	r3, [pc, #28]	@ (8009050 <RTC_EnterInitMode+0x74>)
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009038:	2b00      	cmp	r3, #0
 800903a:	d104      	bne.n	8009046 <RTC_EnterInitMode+0x6a>
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	2b03      	cmp	r3, #3
 8009040:	d1e2      	bne.n	8009008 <RTC_EnterInitMode+0x2c>
 8009042:	e000      	b.n	8009046 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8009044:	bf00      	nop
        }
      }
    }
  }

  return status;
 8009046:	7bfb      	ldrb	r3, [r7, #15]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	46007800 	.word	0x46007800

08009054 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009060:	4b1a      	ldr	r3, [pc, #104]	@ (80090cc <RTC_ExitInitMode+0x78>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	4a19      	ldr	r2, [pc, #100]	@ (80090cc <RTC_ExitInitMode+0x78>)
 8009066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800906a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800906c:	4b17      	ldr	r3, [pc, #92]	@ (80090cc <RTC_ExitInitMode+0x78>)
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	f003 0320 	and.w	r3, r3, #32
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10c      	bne.n	8009092 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff ff7d 	bl	8008f78 <HAL_RTC_WaitForSynchro>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01e      	beq.n	80090c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2203      	movs	r2, #3
 8009088:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	73fb      	strb	r3, [r7, #15]
 8009090:	e017      	b.n	80090c2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009092:	4b0e      	ldr	r3, [pc, #56]	@ (80090cc <RTC_ExitInitMode+0x78>)
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	4a0d      	ldr	r2, [pc, #52]	@ (80090cc <RTC_ExitInitMode+0x78>)
 8009098:	f023 0320 	bic.w	r3, r3, #32
 800909c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff ff6a 	bl	8008f78 <HAL_RTC_WaitForSynchro>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2203      	movs	r2, #3
 80090ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80090b6:	4b05      	ldr	r3, [pc, #20]	@ (80090cc <RTC_ExitInitMode+0x78>)
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	4a04      	ldr	r2, [pc, #16]	@ (80090cc <RTC_ExitInitMode+0x78>)
 80090bc:	f043 0320 	orr.w	r3, r3, #32
 80090c0:	6193      	str	r3, [r2, #24]
  }
  return status;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	46007800 	.word	0x46007800

080090d0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80090e2:	e005      	b.n	80090f0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	3b0a      	subs	r3, #10
 80090ee:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80090f0:	7afb      	ldrb	r3, [r7, #11]
 80090f2:	2b09      	cmp	r3, #9
 80090f4:	d8f6      	bhi.n	80090e4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	4313      	orrs	r3, r2
 8009102:	b2db      	uxtb	r3, r3
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	4910      	ldr	r1, [pc, #64]	@ (8009164 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009124:	4313      	orrs	r3, r2
 8009126:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	431a      	orrs	r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	490c      	ldr	r1, [pc, #48]	@ (8009168 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009138:	4313      	orrs	r3, r2
 800913a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800913c:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	6919      	ldr	r1, [r3, #16]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	041b      	lsls	r3, r3, #16
 800914e:	430b      	orrs	r3, r1
 8009150:	4905      	ldr	r1, [pc, #20]	@ (8009168 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009152:	4313      	orrs	r3, r2
 8009154:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	46007800 	.word	0x46007800
 8009168:	46007c00 	.word	0x46007c00

0800916c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e049      	b.n	8009212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7f8 f9ea 	bl	800156c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f000 f938 	bl	8009420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <HAL_TIM_ConfigClockSource+0x1c>
 8009234:	2302      	movs	r3, #2
 8009236:	e0e6      	b.n	8009406 <HAL_TIM_ConfigClockSource+0x1ea>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800925a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a67      	ldr	r2, [pc, #412]	@ (8009410 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	f000 80b1 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009278:	4a65      	ldr	r2, [pc, #404]	@ (8009410 <HAL_TIM_ConfigClockSource+0x1f4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	f200 80b6 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 8009280:	4a64      	ldr	r2, [pc, #400]	@ (8009414 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	f000 80a9 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009288:	4a62      	ldr	r2, [pc, #392]	@ (8009414 <HAL_TIM_ConfigClockSource+0x1f8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	f200 80ae 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 8009290:	4a61      	ldr	r2, [pc, #388]	@ (8009418 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009292:	4293      	cmp	r3, r2
 8009294:	f000 80a1 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009298:	4a5f      	ldr	r2, [pc, #380]	@ (8009418 <HAL_TIM_ConfigClockSource+0x1fc>)
 800929a:	4293      	cmp	r3, r2
 800929c:	f200 80a6 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092a0:	4a5e      	ldr	r2, [pc, #376]	@ (800941c <HAL_TIM_ConfigClockSource+0x200>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	f000 8099 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 80092a8:	4a5c      	ldr	r2, [pc, #368]	@ (800941c <HAL_TIM_ConfigClockSource+0x200>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	f200 809e 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092b4:	f000 8091 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 80092b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092bc:	f200 8096 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092c4:	f000 8089 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 80092c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092cc:	f200 808e 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d4:	d03e      	beq.n	8009354 <HAL_TIM_ConfigClockSource+0x138>
 80092d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092da:	f200 8087 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e2:	f000 8086 	beq.w	80093f2 <HAL_TIM_ConfigClockSource+0x1d6>
 80092e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ea:	d87f      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092ec:	2b70      	cmp	r3, #112	@ 0x70
 80092ee:	d01a      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x10a>
 80092f0:	2b70      	cmp	r3, #112	@ 0x70
 80092f2:	d87b      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092f4:	2b60      	cmp	r3, #96	@ 0x60
 80092f6:	d050      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x17e>
 80092f8:	2b60      	cmp	r3, #96	@ 0x60
 80092fa:	d877      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092fc:	2b50      	cmp	r3, #80	@ 0x50
 80092fe:	d03c      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x15e>
 8009300:	2b50      	cmp	r3, #80	@ 0x50
 8009302:	d873      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 8009304:	2b40      	cmp	r3, #64	@ 0x40
 8009306:	d058      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x19e>
 8009308:	2b40      	cmp	r3, #64	@ 0x40
 800930a:	d86f      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 800930c:	2b30      	cmp	r3, #48	@ 0x30
 800930e:	d064      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009310:	2b30      	cmp	r3, #48	@ 0x30
 8009312:	d86b      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 8009314:	2b20      	cmp	r3, #32
 8009316:	d060      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009318:	2b20      	cmp	r3, #32
 800931a:	d867      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d05c      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009320:	2b10      	cmp	r3, #16
 8009322:	d05a      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009324:	e062      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009336:	f000 f9e9 	bl	800970c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	609a      	str	r2, [r3, #8]
      break;
 8009352:	e04f      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009364:	f000 f9d2 	bl	800970c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009376:	609a      	str	r2, [r3, #8]
      break;
 8009378:	e03c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009386:	461a      	mov	r2, r3
 8009388:	f000 f944 	bl	8009614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2150      	movs	r1, #80	@ 0x50
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f99d 	bl	80096d2 <TIM_ITRx_SetConfig>
      break;
 8009398:	e02c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093a6:	461a      	mov	r2, r3
 80093a8:	f000 f963 	bl	8009672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2160      	movs	r1, #96	@ 0x60
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f98d 	bl	80096d2 <TIM_ITRx_SetConfig>
      break;
 80093b8:	e01c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c6:	461a      	mov	r2, r3
 80093c8:	f000 f924 	bl	8009614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2140      	movs	r1, #64	@ 0x40
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f97d 	bl	80096d2 <TIM_ITRx_SetConfig>
      break;
 80093d8:	e00c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f000 f974 	bl	80096d2 <TIM_ITRx_SetConfig>
      break;
 80093ea:	e003      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	73fb      	strb	r3, [r7, #15]
      break;
 80093f0:	e000      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80093f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	00100070 	.word	0x00100070
 8009414:	00100040 	.word	0x00100040
 8009418:	00100030 	.word	0x00100030
 800941c:	00100020 	.word	0x00100020

08009420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a68      	ldr	r2, [pc, #416]	@ (80095d4 <TIM_Base_SetConfig+0x1b4>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d02b      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a67      	ldr	r2, [pc, #412]	@ (80095d8 <TIM_Base_SetConfig+0x1b8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d027      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009446:	d023      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800944e:	d01f      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a62      	ldr	r2, [pc, #392]	@ (80095dc <TIM_Base_SetConfig+0x1bc>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d01b      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a61      	ldr	r2, [pc, #388]	@ (80095e0 <TIM_Base_SetConfig+0x1c0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d017      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a60      	ldr	r2, [pc, #384]	@ (80095e4 <TIM_Base_SetConfig+0x1c4>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a5f      	ldr	r2, [pc, #380]	@ (80095e8 <TIM_Base_SetConfig+0x1c8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00f      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a5e      	ldr	r2, [pc, #376]	@ (80095ec <TIM_Base_SetConfig+0x1cc>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a5d      	ldr	r2, [pc, #372]	@ (80095f0 <TIM_Base_SetConfig+0x1d0>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a5c      	ldr	r2, [pc, #368]	@ (80095f4 <TIM_Base_SetConfig+0x1d4>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a5b      	ldr	r2, [pc, #364]	@ (80095f8 <TIM_Base_SetConfig+0x1d8>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d108      	bne.n	80094a2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a4b      	ldr	r2, [pc, #300]	@ (80095d4 <TIM_Base_SetConfig+0x1b4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d043      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a4a      	ldr	r2, [pc, #296]	@ (80095d8 <TIM_Base_SetConfig+0x1b8>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d03f      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b8:	d03b      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094c0:	d037      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a45      	ldr	r2, [pc, #276]	@ (80095dc <TIM_Base_SetConfig+0x1bc>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d033      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a44      	ldr	r2, [pc, #272]	@ (80095e0 <TIM_Base_SetConfig+0x1c0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d02f      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a43      	ldr	r2, [pc, #268]	@ (80095e4 <TIM_Base_SetConfig+0x1c4>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d02b      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a42      	ldr	r2, [pc, #264]	@ (80095e8 <TIM_Base_SetConfig+0x1c8>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d027      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a41      	ldr	r2, [pc, #260]	@ (80095ec <TIM_Base_SetConfig+0x1cc>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d023      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a40      	ldr	r2, [pc, #256]	@ (80095f0 <TIM_Base_SetConfig+0x1d0>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d01f      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a3f      	ldr	r2, [pc, #252]	@ (80095f4 <TIM_Base_SetConfig+0x1d4>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d01b      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a3e      	ldr	r2, [pc, #248]	@ (80095f8 <TIM_Base_SetConfig+0x1d8>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d017      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a3d      	ldr	r2, [pc, #244]	@ (80095fc <TIM_Base_SetConfig+0x1dc>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d013      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a3c      	ldr	r2, [pc, #240]	@ (8009600 <TIM_Base_SetConfig+0x1e0>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d00f      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a3b      	ldr	r2, [pc, #236]	@ (8009604 <TIM_Base_SetConfig+0x1e4>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00b      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a3a      	ldr	r2, [pc, #232]	@ (8009608 <TIM_Base_SetConfig+0x1e8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d007      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a39      	ldr	r2, [pc, #228]	@ (800960c <TIM_Base_SetConfig+0x1ec>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a38      	ldr	r2, [pc, #224]	@ (8009610 <TIM_Base_SetConfig+0x1f0>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d108      	bne.n	8009544 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	4313      	orrs	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a1a      	ldr	r2, [pc, #104]	@ (80095d4 <TIM_Base_SetConfig+0x1b4>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d023      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a19      	ldr	r2, [pc, #100]	@ (80095d8 <TIM_Base_SetConfig+0x1b8>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d01f      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a1e      	ldr	r2, [pc, #120]	@ (80095f4 <TIM_Base_SetConfig+0x1d4>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d01b      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a1d      	ldr	r2, [pc, #116]	@ (80095f8 <TIM_Base_SetConfig+0x1d8>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d017      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a1c      	ldr	r2, [pc, #112]	@ (80095fc <TIM_Base_SetConfig+0x1dc>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d013      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a1b      	ldr	r2, [pc, #108]	@ (8009600 <TIM_Base_SetConfig+0x1e0>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00f      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a1a      	ldr	r2, [pc, #104]	@ (8009604 <TIM_Base_SetConfig+0x1e4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00b      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a19      	ldr	r2, [pc, #100]	@ (8009608 <TIM_Base_SetConfig+0x1e8>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d007      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a18      	ldr	r2, [pc, #96]	@ (800960c <TIM_Base_SetConfig+0x1ec>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a17      	ldr	r2, [pc, #92]	@ (8009610 <TIM_Base_SetConfig+0x1f0>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d103      	bne.n	80095c0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	615a      	str	r2, [r3, #20]
}
 80095c6:	bf00      	nop
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	40012c00 	.word	0x40012c00
 80095d8:	50012c00 	.word	0x50012c00
 80095dc:	40000400 	.word	0x40000400
 80095e0:	50000400 	.word	0x50000400
 80095e4:	40000800 	.word	0x40000800
 80095e8:	50000800 	.word	0x50000800
 80095ec:	40000c00 	.word	0x40000c00
 80095f0:	50000c00 	.word	0x50000c00
 80095f4:	40013400 	.word	0x40013400
 80095f8:	50013400 	.word	0x50013400
 80095fc:	40014000 	.word	0x40014000
 8009600:	50014000 	.word	0x50014000
 8009604:	40014400 	.word	0x40014400
 8009608:	50014400 	.word	0x50014400
 800960c:	40014800 	.word	0x40014800
 8009610:	50014800 	.word	0x50014800

08009614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009614:	b480      	push	{r7}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	f023 0201 	bic.w	r2, r3, #1
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800963e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f023 030a 	bic.w	r3, r3, #10
 8009650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4313      	orrs	r3, r2
 8009658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	621a      	str	r2, [r3, #32]
}
 8009666:	bf00      	nop
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009672:	b480      	push	{r7}
 8009674:	b087      	sub	sp, #28
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	f023 0210 	bic.w	r2, r3, #16
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800969c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	031b      	lsls	r3, r3, #12
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80096ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	621a      	str	r2, [r3, #32]
}
 80096c6:	bf00      	nop
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b085      	sub	sp, #20
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80096e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f043 0307 	orr.w	r3, r3, #7
 80096f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	609a      	str	r2, [r3, #8]
}
 8009700:	bf00      	nop
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	021a      	lsls	r2, r3, #8
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	431a      	orrs	r2, r3
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	4313      	orrs	r3, r2
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	4313      	orrs	r3, r2
 8009738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	609a      	str	r2, [r3, #8]
}
 8009740:	bf00      	nop
 8009742:	371c      	adds	r7, #28
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009760:	2302      	movs	r3, #2
 8009762:	e097      	b.n	8009894 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a45      	ldr	r2, [pc, #276]	@ (80098a0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00e      	beq.n	80097ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a44      	ldr	r2, [pc, #272]	@ (80098a4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d009      	beq.n	80097ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a42      	ldr	r2, [pc, #264]	@ (80098a8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d004      	beq.n	80097ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a41      	ldr	r2, [pc, #260]	@ (80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d108      	bne.n	80097be <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80097b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80097c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a2f      	ldr	r2, [pc, #188]	@ (80098a0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d040      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a2e      	ldr	r2, [pc, #184]	@ (80098a4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d03b      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f8:	d036      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009802:	d031      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a29      	ldr	r2, [pc, #164]	@ (80098b0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d02c      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a28      	ldr	r2, [pc, #160]	@ (80098b4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d027      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a26      	ldr	r2, [pc, #152]	@ (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d022      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a25      	ldr	r2, [pc, #148]	@ (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d01d      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a23      	ldr	r2, [pc, #140]	@ (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d018      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a22      	ldr	r2, [pc, #136]	@ (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a18      	ldr	r2, [pc, #96]	@ (80098a8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00e      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a17      	ldr	r2, [pc, #92]	@ (80098ac <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d009      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a1b      	ldr	r2, [pc, #108]	@ (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d004      	beq.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a1a      	ldr	r2, [pc, #104]	@ (80098cc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d10c      	bne.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800986e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	4313      	orrs	r3, r2
 8009878:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	40012c00 	.word	0x40012c00
 80098a4:	50012c00 	.word	0x50012c00
 80098a8:	40013400 	.word	0x40013400
 80098ac:	50013400 	.word	0x50013400
 80098b0:	40000400 	.word	0x40000400
 80098b4:	50000400 	.word	0x50000400
 80098b8:	40000800 	.word	0x40000800
 80098bc:	50000800 	.word	0x50000800
 80098c0:	40000c00 	.word	0x40000c00
 80098c4:	50000c00 	.word	0x50000c00
 80098c8:	40014000 	.word	0x40014000
 80098cc:	50014000 	.word	0x50014000

080098d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e042      	b.n	8009968 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d106      	bne.n	80098fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7f7 fe71 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2224      	movs	r2, #36	@ 0x24
 80098fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 0201 	bic.w	r2, r2, #1
 8009910:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa64 	bl	8009de8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f8b3 	bl	8009a8c <UART_SetConfig>
 8009926:	4603      	mov	r3, r0
 8009928:	2b01      	cmp	r3, #1
 800992a:	d101      	bne.n	8009930 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e01b      	b.n	8009968 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800993e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800994e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f042 0201 	orr.w	r2, r2, #1
 800995e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fae3 	bl	8009f2c <UART_CheckIdleState>
 8009966:	4603      	mov	r3, r0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	@ 0x28
 8009974:	af02      	add	r7, sp, #8
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	4613      	mov	r3, r2
 800997e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009986:	2b20      	cmp	r3, #32
 8009988:	d17b      	bne.n	8009a82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <HAL_UART_Transmit+0x26>
 8009990:	88fb      	ldrh	r3, [r7, #6]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e074      	b.n	8009a84 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2221      	movs	r2, #33	@ 0x21
 80099a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099aa:	f7f8 f9b9 	bl	8001d20 <HAL_GetTick>
 80099ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	88fa      	ldrh	r2, [r7, #6]
 80099b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	88fa      	ldrh	r2, [r7, #6]
 80099bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099c8:	d108      	bne.n	80099dc <HAL_UART_Transmit+0x6c>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d104      	bne.n	80099dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	61bb      	str	r3, [r7, #24]
 80099da:	e003      	b.n	80099e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099e4:	e030      	b.n	8009a48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2200      	movs	r2, #0
 80099ee:	2180      	movs	r1, #128	@ 0x80
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fb45 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e03d      	b.n	8009a84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10b      	bne.n	8009a26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	3302      	adds	r3, #2
 8009a22:	61bb      	str	r3, [r7, #24]
 8009a24:	e007      	b.n	8009a36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	781a      	ldrb	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	3301      	adds	r3, #1
 8009a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1c8      	bne.n	80099e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2140      	movs	r1, #64	@ 0x40
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 fb0e 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e006      	b.n	8009a84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2220      	movs	r2, #32
 8009a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e000      	b.n	8009a84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009a82:	2302      	movs	r3, #2
  }
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3720      	adds	r7, #32
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a90:	b094      	sub	sp, #80	@ 0x50
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	4b83      	ldr	r3, [pc, #524]	@ (8009cb0 <UART_SetConfig+0x224>)
 8009aa2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa6:	689a      	ldr	r2, [r3, #8]
 8009aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	431a      	orrs	r2, r3
 8009aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	497c      	ldr	r1, [pc, #496]	@ (8009cb4 <UART_SetConfig+0x228>)
 8009ac4:	4019      	ands	r1, r3
 8009ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009acc:	430b      	orrs	r3, r1
 8009ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009adc:	68d9      	ldr	r1, [r3, #12]
 8009ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	ea40 0301 	orr.w	r3, r0, r1
 8009ae6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	4b6f      	ldr	r3, [pc, #444]	@ (8009cb0 <UART_SetConfig+0x224>)
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d009      	beq.n	8009b0c <UART_SetConfig+0x80>
 8009af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	4b6e      	ldr	r3, [pc, #440]	@ (8009cb8 <UART_SetConfig+0x22c>)
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d004      	beq.n	8009b0c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	6a1a      	ldr	r2, [r3, #32]
 8009b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009b16:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b20:	430b      	orrs	r3, r1
 8009b22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2a:	f023 000f 	bic.w	r0, r3, #15
 8009b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	ea40 0301 	orr.w	r3, r0, r1
 8009b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	4b5e      	ldr	r3, [pc, #376]	@ (8009cbc <UART_SetConfig+0x230>)
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d102      	bne.n	8009b4c <UART_SetConfig+0xc0>
 8009b46:	2301      	movs	r3, #1
 8009b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b4a:	e032      	b.n	8009bb2 <UART_SetConfig+0x126>
 8009b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	4b5b      	ldr	r3, [pc, #364]	@ (8009cc0 <UART_SetConfig+0x234>)
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d102      	bne.n	8009b5c <UART_SetConfig+0xd0>
 8009b56:	2302      	movs	r3, #2
 8009b58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b5a:	e02a      	b.n	8009bb2 <UART_SetConfig+0x126>
 8009b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	4b58      	ldr	r3, [pc, #352]	@ (8009cc4 <UART_SetConfig+0x238>)
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d102      	bne.n	8009b6c <UART_SetConfig+0xe0>
 8009b66:	2304      	movs	r3, #4
 8009b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b6a:	e022      	b.n	8009bb2 <UART_SetConfig+0x126>
 8009b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	4b55      	ldr	r3, [pc, #340]	@ (8009cc8 <UART_SetConfig+0x23c>)
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d102      	bne.n	8009b7c <UART_SetConfig+0xf0>
 8009b76:	2308      	movs	r3, #8
 8009b78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b7a:	e01a      	b.n	8009bb2 <UART_SetConfig+0x126>
 8009b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	4b52      	ldr	r3, [pc, #328]	@ (8009ccc <UART_SetConfig+0x240>)
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d102      	bne.n	8009b8c <UART_SetConfig+0x100>
 8009b86:	2310      	movs	r3, #16
 8009b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b8a:	e012      	b.n	8009bb2 <UART_SetConfig+0x126>
 8009b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4b4f      	ldr	r3, [pc, #316]	@ (8009cd0 <UART_SetConfig+0x244>)
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d103      	bne.n	8009b9e <UART_SetConfig+0x112>
 8009b96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8009b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b9c:	e009      	b.n	8009bb2 <UART_SetConfig+0x126>
 8009b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	4b43      	ldr	r3, [pc, #268]	@ (8009cb0 <UART_SetConfig+0x224>)
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d102      	bne.n	8009bae <UART_SetConfig+0x122>
 8009ba8:	2320      	movs	r3, #32
 8009baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bac:	e001      	b.n	8009bb2 <UART_SetConfig+0x126>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8009cb0 <UART_SetConfig+0x224>)
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d005      	beq.n	8009bc8 <UART_SetConfig+0x13c>
 8009bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8009cb8 <UART_SetConfig+0x22c>)
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	f040 8088 	bne.w	8009cd8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bca:	2200      	movs	r2, #0
 8009bcc:	623b      	str	r3, [r7, #32]
 8009bce:	627a      	str	r2, [r7, #36]	@ 0x24
 8009bd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009bd4:	f7fd fb9e 	bl	8007314 <HAL_RCCEx_GetPeriphCLKFreq>
 8009bd8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 80eb 	beq.w	8009db8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be6:	4a3b      	ldr	r2, [pc, #236]	@ (8009cd4 <UART_SetConfig+0x248>)
 8009be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bec:	461a      	mov	r2, r3
 8009bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bf4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	4413      	add	r3, r2
 8009c00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d305      	bcc.n	8009c12 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d903      	bls.n	8009c1a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009c18:	e048      	b.n	8009cac <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
 8009c20:	61fa      	str	r2, [r7, #28]
 8009c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c26:	4a2b      	ldr	r2, [pc, #172]	@ (8009cd4 <UART_SetConfig+0x248>)
 8009c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	2200      	movs	r2, #0
 8009c30:	613b      	str	r3, [r7, #16]
 8009c32:	617a      	str	r2, [r7, #20]
 8009c34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c3c:	f7f6 ffc4 	bl	8000bc8 <__aeabi_uldivmod>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4610      	mov	r0, r2
 8009c46:	4619      	mov	r1, r3
 8009c48:	f04f 0200 	mov.w	r2, #0
 8009c4c:	f04f 0300 	mov.w	r3, #0
 8009c50:	020b      	lsls	r3, r1, #8
 8009c52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c56:	0202      	lsls	r2, r0, #8
 8009c58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c5a:	6849      	ldr	r1, [r1, #4]
 8009c5c:	0849      	lsrs	r1, r1, #1
 8009c5e:	2000      	movs	r0, #0
 8009c60:	460c      	mov	r4, r1
 8009c62:	4605      	mov	r5, r0
 8009c64:	eb12 0804 	adds.w	r8, r2, r4
 8009c68:	eb43 0905 	adc.w	r9, r3, r5
 8009c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	60bb      	str	r3, [r7, #8]
 8009c74:	60fa      	str	r2, [r7, #12]
 8009c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f6 ffa3 	bl	8000bc8 <__aeabi_uldivmod>
 8009c82:	4602      	mov	r2, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	4613      	mov	r3, r2
 8009c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c90:	d308      	bcc.n	8009ca4 <UART_SetConfig+0x218>
 8009c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c98:	d204      	bcs.n	8009ca4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8009c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ca0:	60da      	str	r2, [r3, #12]
 8009ca2:	e003      	b.n	8009cac <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009caa:	e085      	b.n	8009db8 <UART_SetConfig+0x32c>
 8009cac:	e084      	b.n	8009db8 <UART_SetConfig+0x32c>
 8009cae:	bf00      	nop
 8009cb0:	46002400 	.word	0x46002400
 8009cb4:	cfff69f3 	.word	0xcfff69f3
 8009cb8:	56002400 	.word	0x56002400
 8009cbc:	40013800 	.word	0x40013800
 8009cc0:	40004400 	.word	0x40004400
 8009cc4:	40004800 	.word	0x40004800
 8009cc8:	40004c00 	.word	0x40004c00
 8009ccc:	40005000 	.word	0x40005000
 8009cd0:	40006400 	.word	0x40006400
 8009cd4:	0800da34 	.word	0x0800da34
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ce0:	d13c      	bne.n	8009d5c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	607a      	str	r2, [r7, #4]
 8009cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cee:	f7fd fb11 	bl	8007314 <HAL_RCCEx_GetPeriphCLKFreq>
 8009cf2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d05e      	beq.n	8009db8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfe:	4a39      	ldr	r2, [pc, #228]	@ (8009de4 <UART_SetConfig+0x358>)
 8009d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d04:	461a      	mov	r2, r3
 8009d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d0c:	005a      	lsls	r2, r3, #1
 8009d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	085b      	lsrs	r3, r3, #1
 8009d14:	441a      	add	r2, r3
 8009d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d22:	2b0f      	cmp	r3, #15
 8009d24:	d916      	bls.n	8009d54 <UART_SetConfig+0x2c8>
 8009d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d2c:	d212      	bcs.n	8009d54 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	f023 030f 	bic.w	r3, r3, #15
 8009d36:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3a:	085b      	lsrs	r3, r3, #1
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009d46:	4313      	orrs	r3, r2
 8009d48:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009d50:	60da      	str	r2, [r3, #12]
 8009d52:	e031      	b.n	8009db8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d5a:	e02d      	b.n	8009db8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d5e:	2200      	movs	r2, #0
 8009d60:	469a      	mov	sl, r3
 8009d62:	4693      	mov	fp, r2
 8009d64:	4650      	mov	r0, sl
 8009d66:	4659      	mov	r1, fp
 8009d68:	f7fd fad4 	bl	8007314 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d6c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d021      	beq.n	8009db8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d78:	4a1a      	ldr	r2, [pc, #104]	@ (8009de4 <UART_SetConfig+0x358>)
 8009d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d82:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	085b      	lsrs	r3, r3, #1
 8009d8c:	441a      	add	r2, r3
 8009d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	d909      	bls.n	8009db2 <UART_SetConfig+0x326>
 8009d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da4:	d205      	bcs.n	8009db2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60da      	str	r2, [r3, #12]
 8009db0:	e002      	b.n	8009db8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dca:	2200      	movs	r2, #0
 8009dcc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009dd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3750      	adds	r7, #80	@ 0x50
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009de2:	bf00      	nop
 8009de4:	0800da34 	.word	0x0800da34

08009de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df4:	f003 0308 	and.w	r3, r3, #8
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00a      	beq.n	8009e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00a      	beq.n	8009e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7c:	f003 0310 	and.w	r3, r3, #16
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01a      	beq.n	8009efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ee6:	d10a      	bne.n	8009efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	605a      	str	r2, [r3, #4]
  }
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b098      	sub	sp, #96	@ 0x60
 8009f30:	af02      	add	r7, sp, #8
 8009f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f3c:	f7f7 fef0 	bl	8001d20 <HAL_GetTick>
 8009f40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0308 	and.w	r3, r3, #8
 8009f4c:	2b08      	cmp	r3, #8
 8009f4e:	d12f      	bne.n	8009fb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f88e 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d022      	beq.n	8009fb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e6      	bne.n	8009f6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e063      	b.n	800a078 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d149      	bne.n	800a052 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f857 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d03c      	beq.n	800a052 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ff6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e6      	bne.n	8009fd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3308      	adds	r3, #8
 800a010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	60fb      	str	r3, [r7, #12]
   return(result);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f023 0301 	bic.w	r3, r3, #1
 800a020:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a02a:	61fa      	str	r2, [r7, #28]
 800a02c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	69b9      	ldr	r1, [r7, #24]
 800a030:	69fa      	ldr	r2, [r7, #28]
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	617b      	str	r3, [r7, #20]
   return(result);
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e5      	bne.n	800a00a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2220      	movs	r2, #32
 800a042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e012      	b.n	800a078 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3758      	adds	r7, #88	@ 0x58
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	4613      	mov	r3, r2
 800a08e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a090:	e049      	b.n	800a126 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a098:	d045      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a09a:	f7f7 fe41 	bl	8001d20 <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d302      	bcc.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e048      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d031      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d110      	bne.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2208      	movs	r2, #8
 800a0d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f838 	bl	800a14e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e029      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a100:	d111      	bne.n	800a126 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a10a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f81e 	bl	800a14e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e00f      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	4013      	ands	r3, r2
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	429a      	cmp	r2, r3
 800a134:	bf0c      	ite	eq
 800a136:	2301      	moveq	r3, #1
 800a138:	2300      	movne	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	429a      	cmp	r2, r3
 800a142:	d0a6      	beq.n	800a092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a14e:	b480      	push	{r7}
 800a150:	b095      	sub	sp, #84	@ 0x54
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a15e:	e853 3f00 	ldrex	r3, [r3]
 800a162:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a166:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	461a      	mov	r2, r3
 800a172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a174:	643b      	str	r3, [r7, #64]	@ 0x40
 800a176:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a178:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a17a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a17c:	e841 2300 	strex	r3, r2, [r1]
 800a180:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e6      	bne.n	800a156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3308      	adds	r3, #8
 800a18e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	e853 3f00 	ldrex	r3, [r3]
 800a196:	61fb      	str	r3, [r7, #28]
   return(result);
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a19e:	f023 0301 	bic.w	r3, r3, #1
 800a1a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e3      	bne.n	800a188 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d118      	bne.n	800a1fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	e853 3f00 	ldrex	r3, [r3]
 800a1d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f023 0310 	bic.w	r3, r3, #16
 800a1dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1e6:	61bb      	str	r3, [r7, #24]
 800a1e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6979      	ldr	r1, [r7, #20]
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e6      	bne.n	800a1c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a20e:	bf00      	nop
 800a210:	3754      	adds	r7, #84	@ 0x54
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_UARTEx_DisableFifoMode+0x16>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e027      	b.n	800a280 <HAL_UARTEx_DisableFifoMode+0x66>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2224      	movs	r2, #36	@ 0x24
 800a23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0201 	bic.w	r2, r2, #1
 800a256:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a25e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2220      	movs	r2, #32
 800a272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d101      	bne.n	800a2a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	e02d      	b.n	800a300 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2224      	movs	r2, #36	@ 0x24
 800a2b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0201 	bic.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f84f 	bl	800a384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d101      	bne.n	800a320 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a31c:	2302      	movs	r3, #2
 800a31e:	e02d      	b.n	800a37c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2224      	movs	r2, #36	@ 0x24
 800a32c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 0201 	bic.w	r2, r2, #1
 800a346:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f811 	bl	800a384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a390:	2b00      	cmp	r3, #0
 800a392:	d108      	bne.n	800a3a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3a4:	e031      	b.n	800a40a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3aa:	2308      	movs	r3, #8
 800a3ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	0e5b      	lsrs	r3, r3, #25
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	f003 0307 	and.w	r3, r3, #7
 800a3bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	0f5b      	lsrs	r3, r3, #29
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	f003 0307 	and.w	r3, r3, #7
 800a3cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	7b3a      	ldrb	r2, [r7, #12]
 800a3d2:	4911      	ldr	r1, [pc, #68]	@ (800a418 <UARTEx_SetNbDataToProcess+0x94>)
 800a3d4:	5c8a      	ldrb	r2, [r1, r2]
 800a3d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3da:	7b3a      	ldrb	r2, [r7, #12]
 800a3dc:	490f      	ldr	r1, [pc, #60]	@ (800a41c <UARTEx_SetNbDataToProcess+0x98>)
 800a3de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	7b7a      	ldrb	r2, [r7, #13]
 800a3f0:	4909      	ldr	r1, [pc, #36]	@ (800a418 <UARTEx_SetNbDataToProcess+0x94>)
 800a3f2:	5c8a      	ldrb	r2, [r1, r2]
 800a3f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3f8:	7b7a      	ldrb	r2, [r7, #13]
 800a3fa:	4908      	ldr	r1, [pc, #32]	@ (800a41c <UARTEx_SetNbDataToProcess+0x98>)
 800a3fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a402:	b29a      	uxth	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	0800da4c 	.word	0x0800da4c
 800a41c:	0800da54 	.word	0x0800da54

0800a420 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a420:	b084      	sub	sp, #16
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	f107 001c 	add.w	r0, r7, #28
 800a42e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	2b03      	cmp	r3, #3
 800a436:	d105      	bne.n	800a444 <USB_CoreInit+0x24>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fda5 	bl	800af94 <USB_CoreReset>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800a44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a450:	2b01      	cmp	r3, #1
 800a452:	d10b      	bne.n	800a46c <USB_CoreInit+0x4c>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f043 0208 	orr.w	r2, r3, #8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f043 0220 	orr.w	r2, r3, #32
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a478:	b004      	add	sp, #16
 800a47a:	4770      	bx	lr

0800a47c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d165      	bne.n	800a55c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	4a41      	ldr	r2, [pc, #260]	@ (800a598 <USB_SetTurnaroundTime+0x11c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d906      	bls.n	800a4a6 <USB_SetTurnaroundTime+0x2a>
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4a40      	ldr	r2, [pc, #256]	@ (800a59c <USB_SetTurnaroundTime+0x120>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d202      	bcs.n	800a4a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a4a0:	230f      	movs	r3, #15
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	e062      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	4a3c      	ldr	r2, [pc, #240]	@ (800a59c <USB_SetTurnaroundTime+0x120>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d306      	bcc.n	800a4bc <USB_SetTurnaroundTime+0x40>
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	4a3b      	ldr	r2, [pc, #236]	@ (800a5a0 <USB_SetTurnaroundTime+0x124>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d202      	bcs.n	800a4bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a4b6:	230e      	movs	r3, #14
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	e057      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4a38      	ldr	r2, [pc, #224]	@ (800a5a0 <USB_SetTurnaroundTime+0x124>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d306      	bcc.n	800a4d2 <USB_SetTurnaroundTime+0x56>
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4a37      	ldr	r2, [pc, #220]	@ (800a5a4 <USB_SetTurnaroundTime+0x128>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d202      	bcs.n	800a4d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a4cc:	230d      	movs	r3, #13
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	e04c      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	4a33      	ldr	r2, [pc, #204]	@ (800a5a4 <USB_SetTurnaroundTime+0x128>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d306      	bcc.n	800a4e8 <USB_SetTurnaroundTime+0x6c>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	4a32      	ldr	r2, [pc, #200]	@ (800a5a8 <USB_SetTurnaroundTime+0x12c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d802      	bhi.n	800a4e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a4e2:	230c      	movs	r3, #12
 800a4e4:	617b      	str	r3, [r7, #20]
 800a4e6:	e041      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4a2f      	ldr	r2, [pc, #188]	@ (800a5a8 <USB_SetTurnaroundTime+0x12c>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d906      	bls.n	800a4fe <USB_SetTurnaroundTime+0x82>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4a2e      	ldr	r2, [pc, #184]	@ (800a5ac <USB_SetTurnaroundTime+0x130>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d802      	bhi.n	800a4fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a4f8:	230b      	movs	r3, #11
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e036      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	4a2a      	ldr	r2, [pc, #168]	@ (800a5ac <USB_SetTurnaroundTime+0x130>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d906      	bls.n	800a514 <USB_SetTurnaroundTime+0x98>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	4a29      	ldr	r2, [pc, #164]	@ (800a5b0 <USB_SetTurnaroundTime+0x134>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d802      	bhi.n	800a514 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a50e:	230a      	movs	r3, #10
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	e02b      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	4a26      	ldr	r2, [pc, #152]	@ (800a5b0 <USB_SetTurnaroundTime+0x134>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d906      	bls.n	800a52a <USB_SetTurnaroundTime+0xae>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	4a25      	ldr	r2, [pc, #148]	@ (800a5b4 <USB_SetTurnaroundTime+0x138>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d202      	bcs.n	800a52a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a524:	2309      	movs	r3, #9
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e020      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	4a21      	ldr	r2, [pc, #132]	@ (800a5b4 <USB_SetTurnaroundTime+0x138>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d306      	bcc.n	800a540 <USB_SetTurnaroundTime+0xc4>
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	4a20      	ldr	r2, [pc, #128]	@ (800a5b8 <USB_SetTurnaroundTime+0x13c>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d802      	bhi.n	800a540 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a53a:	2308      	movs	r3, #8
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	e015      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	4a1d      	ldr	r2, [pc, #116]	@ (800a5b8 <USB_SetTurnaroundTime+0x13c>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d906      	bls.n	800a556 <USB_SetTurnaroundTime+0xda>
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4a1c      	ldr	r2, [pc, #112]	@ (800a5bc <USB_SetTurnaroundTime+0x140>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d202      	bcs.n	800a556 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a550:	2307      	movs	r3, #7
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e00a      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a556:	2306      	movs	r3, #6
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	e007      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a55c:	79fb      	ldrb	r3, [r7, #7]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d102      	bne.n	800a568 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a562:	2309      	movs	r3, #9
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	e001      	b.n	800a56c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a568:	2309      	movs	r3, #9
 800a56a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	029b      	lsls	r3, r3, #10
 800a580:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a584:	431a      	orrs	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	371c      	adds	r7, #28
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	00d8acbf 	.word	0x00d8acbf
 800a59c:	00e4e1c0 	.word	0x00e4e1c0
 800a5a0:	00f42400 	.word	0x00f42400
 800a5a4:	01067380 	.word	0x01067380
 800a5a8:	011a499f 	.word	0x011a499f
 800a5ac:	01312cff 	.word	0x01312cff
 800a5b0:	014ca43f 	.word	0x014ca43f
 800a5b4:	016e3600 	.word	0x016e3600
 800a5b8:	01a6ab1f 	.word	0x01a6ab1f
 800a5bc:	01e84800 	.word	0x01e84800

0800a5c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f023 0201 	bic.w	r2, r3, #1
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d115      	bne.n	800a630 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a610:	2001      	movs	r0, #1
 800a612:	f7f7 fb91 	bl	8001d38 <HAL_Delay>
      ms++;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3301      	adds	r3, #1
 800a61a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fc29 	bl	800ae74 <USB_GetMode>
 800a622:	4603      	mov	r3, r0
 800a624:	2b01      	cmp	r3, #1
 800a626:	d01e      	beq.n	800a666 <USB_SetCurrentMode+0x84>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b31      	cmp	r3, #49	@ 0x31
 800a62c:	d9f0      	bls.n	800a610 <USB_SetCurrentMode+0x2e>
 800a62e:	e01a      	b.n	800a666 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d115      	bne.n	800a662 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a642:	2001      	movs	r0, #1
 800a644:	f7f7 fb78 	bl	8001d38 <HAL_Delay>
      ms++;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3301      	adds	r3, #1
 800a64c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fc10 	bl	800ae74 <USB_GetMode>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d005      	beq.n	800a666 <USB_SetCurrentMode+0x84>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b31      	cmp	r3, #49	@ 0x31
 800a65e:	d9f0      	bls.n	800a642 <USB_SetCurrentMode+0x60>
 800a660:	e001      	b.n	800a666 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e005      	b.n	800a672 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2b32      	cmp	r3, #50	@ 0x32
 800a66a:	d101      	bne.n	800a670 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e000      	b.n	800a672 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a67c:	b084      	sub	sp, #16
 800a67e:	b580      	push	{r7, lr}
 800a680:	b086      	sub	sp, #24
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a68a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a696:	2300      	movs	r3, #0
 800a698:	613b      	str	r3, [r7, #16]
 800a69a:	e009      	b.n	800a6b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	3340      	adds	r3, #64	@ 0x40
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	613b      	str	r3, [r7, #16]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2b0e      	cmp	r3, #14
 800a6b4:	d9f2      	bls.n	800a69c <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a6c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11c      	bne.n	800a702 <USB_DevInit+0x86>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6d6:	f043 0302 	orr.w	r3, r3, #2
 800a6da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ec:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	639a      	str	r2, [r3, #56]	@ 0x38
 800a700:	e011      	b.n	800a726 <USB_DevInit+0xaa>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a706:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a712:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a71e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a72c:	461a      	mov	r2, r3
 800a72e:	2300      	movs	r3, #0
 800a730:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a734:	2b03      	cmp	r3, #3
 800a736:	d10c      	bne.n	800a752 <USB_DevInit+0xd6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d104      	bne.n	800a748 <USB_DevInit+0xcc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a73e:	2100      	movs	r1, #0
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f965 	bl	800aa10 <USB_SetDevSpeed>
 800a746:	e008      	b.n	800a75a <USB_DevInit+0xde>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a748:	2101      	movs	r1, #1
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f960 	bl	800aa10 <USB_SetDevSpeed>
 800a750:	e003      	b.n	800a75a <USB_DevInit+0xde>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a752:	2103      	movs	r1, #3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f95b 	bl	800aa10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a75a:	2110      	movs	r1, #16
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f8f3 	bl	800a948 <USB_FlushTxFifo>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f91f 	bl	800a9b0 <USB_FlushRxFifo>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a782:	461a      	mov	r2, r3
 800a784:	2300      	movs	r3, #0
 800a786:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a78e:	461a      	mov	r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a79a:	461a      	mov	r2, r3
 800a79c:	2300      	movs	r3, #0
 800a79e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	613b      	str	r3, [r7, #16]
 800a7a4:	e043      	b.n	800a82e <USB_DevInit+0x1b2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7bc:	d118      	bne.n	800a7f0 <USB_DevInit+0x174>
    {
      if (i == 0U)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <USB_DevInit+0x15e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	e013      	b.n	800a802 <USB_DevInit+0x186>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	e008      	b.n	800a802 <USB_DevInit+0x186>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	2300      	movs	r3, #0
 800a800:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a80e:	461a      	mov	r2, r3
 800a810:	2300      	movs	r3, #0
 800a812:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a820:	461a      	mov	r2, r3
 800a822:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a826:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	3301      	adds	r3, #1
 800a82c:	613b      	str	r3, [r7, #16]
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	429a      	cmp	r2, r3
 800a834:	d3b7      	bcc.n	800a7a6 <USB_DevInit+0x12a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a836:	2300      	movs	r3, #0
 800a838:	613b      	str	r3, [r7, #16]
 800a83a:	e043      	b.n	800a8c4 <USB_DevInit+0x248>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a84e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a852:	d118      	bne.n	800a886 <USB_DevInit+0x20a>
    {
      if (i == 0U)
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <USB_DevInit+0x1f4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a866:	461a      	mov	r2, r3
 800a868:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	e013      	b.n	800a898 <USB_DevInit+0x21c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a87c:	461a      	mov	r2, r3
 800a87e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	e008      	b.n	800a898 <USB_DevInit+0x21c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a892:	461a      	mov	r2, r3
 800a894:	2300      	movs	r3, #0
 800a896:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a8bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d3b7      	bcc.n	800a83c <USB_DevInit+0x1c0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a8ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	f043 0210 	orr.w	r2, r3, #16
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	699a      	ldr	r2, [r3, #24]
 800a904:	4b0f      	ldr	r3, [pc, #60]	@ (800a944 <USB_DevInit+0x2c8>)
 800a906:	4313      	orrs	r3, r2
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <USB_DevInit+0x2a2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f043 0208 	orr.w	r2, r3, #8
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a91e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d107      	bne.n	800a934 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a92c:	f043 0304 	orr.w	r3, r3, #4
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a934:	7dfb      	ldrb	r3, [r7, #23]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a940:	b004      	add	sp, #16
 800a942:	4770      	bx	lr
 800a944:	803c3800 	.word	0x803c3800

0800a948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3301      	adds	r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4a13      	ldr	r2, [pc, #76]	@ (800a9ac <USB_FlushTxFifo+0x64>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d901      	bls.n	800a968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e01b      	b.n	800a9a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	daf2      	bge.n	800a956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	019b      	lsls	r3, r3, #6
 800a978:	f043 0220 	orr.w	r2, r3, #32
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3301      	adds	r3, #1
 800a984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a08      	ldr	r2, [pc, #32]	@ (800a9ac <USB_FlushTxFifo+0x64>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d901      	bls.n	800a992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e006      	b.n	800a9a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d0f0      	beq.n	800a980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	00030d40 	.word	0x00030d40

0800a9b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4a11      	ldr	r2, [pc, #68]	@ (800aa0c <USB_FlushRxFifo+0x5c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d901      	bls.n	800a9ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e018      	b.n	800aa00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	daf2      	bge.n	800a9bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2210      	movs	r2, #16
 800a9de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4a08      	ldr	r2, [pc, #32]	@ (800aa0c <USB_FlushRxFifo+0x5c>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d901      	bls.n	800a9f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e006      	b.n	800aa00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	f003 0310 	and.w	r3, r3, #16
 800a9fa:	2b10      	cmp	r3, #16
 800a9fc:	d0f0      	beq.n	800a9e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	00030d40 	.word	0x00030d40

0800aa10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa30:	4313      	orrs	r3, r2
 800aa32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b087      	sub	sp, #28
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f003 0306 	and.w	r3, r3, #6
 800aa5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d102      	bne.n	800aa68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aa62:	2300      	movs	r3, #0
 800aa64:	75fb      	strb	r3, [r7, #23]
 800aa66:	e00a      	b.n	800aa7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d002      	beq.n	800aa74 <USB_GetDevSpeed+0x32>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b06      	cmp	r3, #6
 800aa72:	d102      	bne.n	800aa7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aa74:	2302      	movs	r3, #2
 800aa76:	75fb      	strb	r3, [r7, #23]
 800aa78:	e001      	b.n	800aa7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aa7a:	230f      	movs	r3, #15
 800aa7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa96:	2300      	movs	r3, #0
 800aa98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d14a      	bne.n	800ab40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aabe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aac2:	f040 8086 	bne.w	800abd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	7812      	ldrb	r2, [r2, #0]
 800aada:	0151      	lsls	r1, r2, #5
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	440a      	add	r2, r1
 800aae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aae4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aae8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	7812      	ldrb	r2, [r2, #0]
 800aafe:	0151      	lsls	r1, r2, #5
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	440a      	add	r2, r1
 800ab04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3301      	adds	r3, #1
 800ab12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d902      	bls.n	800ab24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	75fb      	strb	r3, [r7, #23]
          break;
 800ab22:	e056      	b.n	800abd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab3c:	d0e7      	beq.n	800ab0e <USB_EPStopXfer+0x82>
 800ab3e:	e048      	b.n	800abd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab58:	d13b      	bne.n	800abd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	7812      	ldrb	r2, [r2, #0]
 800ab6e:	0151      	lsls	r1, r2, #5
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	440a      	add	r2, r1
 800ab74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	7812      	ldrb	r2, [r2, #0]
 800ab92:	0151      	lsls	r1, r2, #5
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	440a      	add	r2, r1
 800ab98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aba0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800abae:	4293      	cmp	r3, r2
 800abb0:	d902      	bls.n	800abb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	75fb      	strb	r3, [r7, #23]
          break;
 800abb6:	e00c      	b.n	800abd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abd0:	d0e7      	beq.n	800aba2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	371c      	adds	r7, #28
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b089      	sub	sp, #36	@ 0x24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	4611      	mov	r1, r2
 800abec:	461a      	mov	r2, r3
 800abee:	460b      	mov	r3, r1
 800abf0:	71fb      	strb	r3, [r7, #7]
 800abf2:	4613      	mov	r3, r2
 800abf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800abfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d123      	bne.n	800ac4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ac06:	88bb      	ldrh	r3, [r7, #4]
 800ac08:	3303      	adds	r3, #3
 800ac0a:	089b      	lsrs	r3, r3, #2
 800ac0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ac0e:	2300      	movs	r3, #0
 800ac10:	61bb      	str	r3, [r7, #24]
 800ac12:	e018      	b.n	800ac46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	031a      	lsls	r2, r3, #12
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac20:	461a      	mov	r2, r3
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	3301      	adds	r3, #1
 800ac32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	3301      	adds	r3, #1
 800ac38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	3301      	adds	r3, #1
 800ac44:	61bb      	str	r3, [r7, #24]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d3e2      	bcc.n	800ac14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3724      	adds	r7, #36	@ 0x24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b08b      	sub	sp, #44	@ 0x2c
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	4613      	mov	r3, r2
 800ac68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	089b      	lsrs	r3, r3, #2
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ac7a:	88fb      	ldrh	r3, [r7, #6]
 800ac7c:	f003 0303 	and.w	r3, r3, #3
 800ac80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ac82:	2300      	movs	r3, #0
 800ac84:	623b      	str	r3, [r7, #32]
 800ac86:	e014      	b.n	800acb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	601a      	str	r2, [r3, #0]
    pDest++;
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	3301      	adds	r3, #1
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca2:	3301      	adds	r3, #1
 800aca4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	3301      	adds	r3, #1
 800acaa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	3301      	adds	r3, #1
 800acb0:	623b      	str	r3, [r7, #32]
 800acb2:	6a3a      	ldr	r2, [r7, #32]
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d3e6      	bcc.n	800ac88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800acba:	8bfb      	ldrh	r3, [r7, #30]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d01e      	beq.n	800acfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acca:	461a      	mov	r2, r3
 800accc:	f107 0310 	add.w	r3, r7, #16
 800acd0:	6812      	ldr	r2, [r2, #0]
 800acd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	701a      	strb	r2, [r3, #0]
      i++;
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	3301      	adds	r3, #1
 800acea:	623b      	str	r3, [r7, #32]
      pDest++;
 800acec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acee:	3301      	adds	r3, #1
 800acf0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800acf2:	8bfb      	ldrh	r3, [r7, #30]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800acf8:	8bfb      	ldrh	r3, [r7, #30]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1ea      	bne.n	800acd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800acfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	372c      	adds	r7, #44	@ 0x2c
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad26:	f023 0303 	bic.w	r3, r3, #3
 800ad2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad3a:	f043 0302 	orr.w	r3, r3, #2
 800ad3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b085      	sub	sp, #20
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4013      	ands	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad66:	68fb      	ldr	r3, [r7, #12]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4013      	ands	r3, r2
 800ad96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	0c1b      	lsrs	r3, r3, #16
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adc4:	69db      	ldr	r3, [r3, #28]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	4013      	ands	r3, r2
 800adca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	b29b      	uxth	r3, r3
}
 800add0:	4618      	mov	r0, r3
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	460b      	mov	r3, r1
 800ade6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800adec:	78fb      	ldrb	r3, [r7, #3]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	4013      	ands	r3, r2
 800ae08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae3a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae3c:	78fb      	ldrb	r3, [r7, #3]
 800ae3e:	f003 030f 	and.w	r3, r3, #15
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	fa22 f303 	lsr.w	r3, r2, r3
 800ae48:	01db      	lsls	r3, r3, #7
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae52:	78fb      	ldrb	r3, [r7, #3]
 800ae54:	015a      	lsls	r2, r3, #5
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	4413      	add	r3, r2
 800ae5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	4013      	ands	r3, r2
 800ae64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae66:	68bb      	ldr	r3, [r7, #8]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	371c      	adds	r7, #28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	f003 0301 	and.w	r3, r3, #1
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeaa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aeae:	f023 0307 	bic.w	r3, r3, #7
 800aeb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aec6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	460b      	mov	r3, r1
 800aee2:	607a      	str	r2, [r7, #4]
 800aee4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	333c      	adds	r3, #60	@ 0x3c
 800aeee:	3304      	adds	r3, #4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	4a26      	ldr	r2, [pc, #152]	@ (800af90 <USB_EP0_OutStart+0xb8>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d90a      	bls.n	800af12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af0c:	d101      	bne.n	800af12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	e037      	b.n	800af82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af18:	461a      	mov	r2, r3
 800af1a:	2300      	movs	r3, #0
 800af1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af40:	f043 0318 	orr.w	r3, r3, #24
 800af44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af54:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af5a:	7afb      	ldrb	r3, [r7, #11]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d10f      	bne.n	800af80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af66:	461a      	mov	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af7a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	371c      	adds	r7, #28
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	4f54300a 	.word	0x4f54300a

0800af94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af9c:	2300      	movs	r3, #0
 800af9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	3301      	adds	r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	4a13      	ldr	r2, [pc, #76]	@ (800aff8 <USB_CoreReset+0x64>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d901      	bls.n	800afb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e01b      	b.n	800afea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	daf2      	bge.n	800afa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f043 0201 	orr.w	r2, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4a09      	ldr	r2, [pc, #36]	@ (800aff8 <USB_CoreReset+0x64>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d901      	bls.n	800afdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e006      	b.n	800afea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d0f0      	beq.n	800afca <USB_CoreReset+0x36>

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	00030d40 	.word	0x00030d40

0800affc <__cvt>:
 800affc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	ec57 6b10 	vmov	r6, r7, d0
 800b004:	2f00      	cmp	r7, #0
 800b006:	460c      	mov	r4, r1
 800b008:	4619      	mov	r1, r3
 800b00a:	463b      	mov	r3, r7
 800b00c:	bfb4      	ite	lt
 800b00e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b012:	2300      	movge	r3, #0
 800b014:	4691      	mov	r9, r2
 800b016:	bfbf      	itttt	lt
 800b018:	4632      	movlt	r2, r6
 800b01a:	461f      	movlt	r7, r3
 800b01c:	232d      	movlt	r3, #45	@ 0x2d
 800b01e:	4616      	movlt	r6, r2
 800b020:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b024:	700b      	strb	r3, [r1, #0]
 800b026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b028:	f023 0820 	bic.w	r8, r3, #32
 800b02c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b030:	d005      	beq.n	800b03e <__cvt+0x42>
 800b032:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b036:	d100      	bne.n	800b03a <__cvt+0x3e>
 800b038:	3401      	adds	r4, #1
 800b03a:	2102      	movs	r1, #2
 800b03c:	e000      	b.n	800b040 <__cvt+0x44>
 800b03e:	2103      	movs	r1, #3
 800b040:	ab03      	add	r3, sp, #12
 800b042:	4622      	mov	r2, r4
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	ab02      	add	r3, sp, #8
 800b048:	ec47 6b10 	vmov	d0, r6, r7
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	4653      	mov	r3, sl
 800b050:	f000 fe4e 	bl	800bcf0 <_dtoa_r>
 800b054:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b058:	4605      	mov	r5, r0
 800b05a:	d119      	bne.n	800b090 <__cvt+0x94>
 800b05c:	f019 0f01 	tst.w	r9, #1
 800b060:	d00e      	beq.n	800b080 <__cvt+0x84>
 800b062:	eb00 0904 	add.w	r9, r0, r4
 800b066:	2200      	movs	r2, #0
 800b068:	2300      	movs	r3, #0
 800b06a:	4630      	mov	r0, r6
 800b06c:	4639      	mov	r1, r7
 800b06e:	f7f5 fd3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b072:	b108      	cbz	r0, 800b078 <__cvt+0x7c>
 800b074:	f8cd 900c 	str.w	r9, [sp, #12]
 800b078:	2230      	movs	r2, #48	@ 0x30
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	454b      	cmp	r3, r9
 800b07e:	d31e      	bcc.n	800b0be <__cvt+0xc2>
 800b080:	9b03      	ldr	r3, [sp, #12]
 800b082:	4628      	mov	r0, r5
 800b084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b086:	1b5b      	subs	r3, r3, r5
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	b004      	add	sp, #16
 800b08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b090:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b094:	eb00 0904 	add.w	r9, r0, r4
 800b098:	d1e5      	bne.n	800b066 <__cvt+0x6a>
 800b09a:	7803      	ldrb	r3, [r0, #0]
 800b09c:	2b30      	cmp	r3, #48	@ 0x30
 800b09e:	d10a      	bne.n	800b0b6 <__cvt+0xba>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	f7f5 fd1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0ac:	b918      	cbnz	r0, 800b0b6 <__cvt+0xba>
 800b0ae:	f1c4 0401 	rsb	r4, r4, #1
 800b0b2:	f8ca 4000 	str.w	r4, [sl]
 800b0b6:	f8da 3000 	ldr.w	r3, [sl]
 800b0ba:	4499      	add	r9, r3
 800b0bc:	e7d3      	b.n	800b066 <__cvt+0x6a>
 800b0be:	1c59      	adds	r1, r3, #1
 800b0c0:	9103      	str	r1, [sp, #12]
 800b0c2:	701a      	strb	r2, [r3, #0]
 800b0c4:	e7d9      	b.n	800b07a <__cvt+0x7e>

0800b0c6 <__exponent>:
 800b0c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0c8:	2900      	cmp	r1, #0
 800b0ca:	7002      	strb	r2, [r0, #0]
 800b0cc:	bfba      	itte	lt
 800b0ce:	4249      	neglt	r1, r1
 800b0d0:	232d      	movlt	r3, #45	@ 0x2d
 800b0d2:	232b      	movge	r3, #43	@ 0x2b
 800b0d4:	2909      	cmp	r1, #9
 800b0d6:	7043      	strb	r3, [r0, #1]
 800b0d8:	dd28      	ble.n	800b12c <__exponent+0x66>
 800b0da:	f10d 0307 	add.w	r3, sp, #7
 800b0de:	270a      	movs	r7, #10
 800b0e0:	461d      	mov	r5, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	fbb1 f6f7 	udiv	r6, r1, r7
 800b0ea:	fb07 1416 	mls	r4, r7, r6, r1
 800b0ee:	3430      	adds	r4, #48	@ 0x30
 800b0f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	2c63      	cmp	r4, #99	@ 0x63
 800b0fa:	dcf2      	bgt.n	800b0e2 <__exponent+0x1c>
 800b0fc:	3130      	adds	r1, #48	@ 0x30
 800b0fe:	1e94      	subs	r4, r2, #2
 800b100:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b104:	1c41      	adds	r1, r0, #1
 800b106:	4623      	mov	r3, r4
 800b108:	42ab      	cmp	r3, r5
 800b10a:	d30a      	bcc.n	800b122 <__exponent+0x5c>
 800b10c:	f10d 0309 	add.w	r3, sp, #9
 800b110:	1a9b      	subs	r3, r3, r2
 800b112:	42ac      	cmp	r4, r5
 800b114:	bf88      	it	hi
 800b116:	2300      	movhi	r3, #0
 800b118:	3302      	adds	r3, #2
 800b11a:	4403      	add	r3, r0
 800b11c:	1a18      	subs	r0, r3, r0
 800b11e:	b003      	add	sp, #12
 800b120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b122:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b126:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b12a:	e7ed      	b.n	800b108 <__exponent+0x42>
 800b12c:	2330      	movs	r3, #48	@ 0x30
 800b12e:	3130      	adds	r1, #48	@ 0x30
 800b130:	7083      	strb	r3, [r0, #2]
 800b132:	1d03      	adds	r3, r0, #4
 800b134:	70c1      	strb	r1, [r0, #3]
 800b136:	e7f1      	b.n	800b11c <__exponent+0x56>

0800b138 <_printf_float>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	b08d      	sub	sp, #52	@ 0x34
 800b13e:	460c      	mov	r4, r1
 800b140:	4616      	mov	r6, r2
 800b142:	461f      	mov	r7, r3
 800b144:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b148:	4605      	mov	r5, r0
 800b14a:	f000 fcbf 	bl	800bacc <_localeconv_r>
 800b14e:	6803      	ldr	r3, [r0, #0]
 800b150:	4618      	mov	r0, r3
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	f7f5 f89c 	bl	8000290 <strlen>
 800b158:	2300      	movs	r3, #0
 800b15a:	9005      	str	r0, [sp, #20]
 800b15c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b15e:	f8d8 3000 	ldr.w	r3, [r8]
 800b162:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b166:	3307      	adds	r3, #7
 800b168:	f8d4 b000 	ldr.w	fp, [r4]
 800b16c:	f023 0307 	bic.w	r3, r3, #7
 800b170:	f103 0208 	add.w	r2, r3, #8
 800b174:	f8c8 2000 	str.w	r2, [r8]
 800b178:	f04f 32ff 	mov.w	r2, #4294967295
 800b17c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b180:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b184:	f8cd 8018 	str.w	r8, [sp, #24]
 800b188:	9307      	str	r3, [sp, #28]
 800b18a:	4b9d      	ldr	r3, [pc, #628]	@ (800b400 <_printf_float+0x2c8>)
 800b18c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b190:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b194:	f7f5 fcda 	bl	8000b4c <__aeabi_dcmpun>
 800b198:	bb70      	cbnz	r0, 800b1f8 <_printf_float+0xc0>
 800b19a:	f04f 32ff 	mov.w	r2, #4294967295
 800b19e:	4b98      	ldr	r3, [pc, #608]	@ (800b400 <_printf_float+0x2c8>)
 800b1a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1a4:	f7f5 fcb4 	bl	8000b10 <__aeabi_dcmple>
 800b1a8:	bb30      	cbnz	r0, 800b1f8 <_printf_float+0xc0>
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	f7f5 fca3 	bl	8000afc <__aeabi_dcmplt>
 800b1b6:	b110      	cbz	r0, 800b1be <_printf_float+0x86>
 800b1b8:	232d      	movs	r3, #45	@ 0x2d
 800b1ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1be:	4a91      	ldr	r2, [pc, #580]	@ (800b404 <_printf_float+0x2cc>)
 800b1c0:	4b91      	ldr	r3, [pc, #580]	@ (800b408 <_printf_float+0x2d0>)
 800b1c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1c6:	bf94      	ite	ls
 800b1c8:	4690      	movls	r8, r2
 800b1ca:	4698      	movhi	r8, r3
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	f04f 0900 	mov.w	r9, #0
 800b1d2:	6123      	str	r3, [r4, #16]
 800b1d4:	f02b 0304 	bic.w	r3, fp, #4
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	4633      	mov	r3, r6
 800b1dc:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	9700      	str	r7, [sp, #0]
 800b1e4:	f000 f9d2 	bl	800b58c <_printf_common>
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	f040 808d 	bne.w	800b308 <_printf_float+0x1d0>
 800b1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f2:	b00d      	add	sp, #52	@ 0x34
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	464b      	mov	r3, r9
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4649      	mov	r1, r9
 800b200:	f7f5 fca4 	bl	8000b4c <__aeabi_dcmpun>
 800b204:	b140      	cbz	r0, 800b218 <_printf_float+0xe0>
 800b206:	464b      	mov	r3, r9
 800b208:	4a80      	ldr	r2, [pc, #512]	@ (800b40c <_printf_float+0x2d4>)
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bfbc      	itt	lt
 800b20e:	232d      	movlt	r3, #45	@ 0x2d
 800b210:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b214:	4b7e      	ldr	r3, [pc, #504]	@ (800b410 <_printf_float+0x2d8>)
 800b216:	e7d4      	b.n	800b1c2 <_printf_float+0x8a>
 800b218:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b21c:	6863      	ldr	r3, [r4, #4]
 800b21e:	9206      	str	r2, [sp, #24]
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	d13b      	bne.n	800b29c <_printf_float+0x164>
 800b224:	2306      	movs	r3, #6
 800b226:	6063      	str	r3, [r4, #4]
 800b228:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b22c:	2300      	movs	r3, #0
 800b22e:	4628      	mov	r0, r5
 800b230:	6022      	str	r2, [r4, #0]
 800b232:	9303      	str	r3, [sp, #12]
 800b234:	ab0a      	add	r3, sp, #40	@ 0x28
 800b236:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b23a:	ab09      	add	r3, sp, #36	@ 0x24
 800b23c:	ec49 8b10 	vmov	d0, r8, r9
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b246:	6861      	ldr	r1, [r4, #4]
 800b248:	f7ff fed8 	bl	800affc <__cvt>
 800b24c:	9b06      	ldr	r3, [sp, #24]
 800b24e:	4680      	mov	r8, r0
 800b250:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b252:	2b47      	cmp	r3, #71	@ 0x47
 800b254:	d129      	bne.n	800b2aa <_printf_float+0x172>
 800b256:	1cc8      	adds	r0, r1, #3
 800b258:	db02      	blt.n	800b260 <_printf_float+0x128>
 800b25a:	6863      	ldr	r3, [r4, #4]
 800b25c:	4299      	cmp	r1, r3
 800b25e:	dd41      	ble.n	800b2e4 <_printf_float+0x1ac>
 800b260:	f1aa 0a02 	sub.w	sl, sl, #2
 800b264:	fa5f fa8a 	uxtb.w	sl, sl
 800b268:	3901      	subs	r1, #1
 800b26a:	4652      	mov	r2, sl
 800b26c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b270:	9109      	str	r1, [sp, #36]	@ 0x24
 800b272:	f7ff ff28 	bl	800b0c6 <__exponent>
 800b276:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b278:	4681      	mov	r9, r0
 800b27a:	1813      	adds	r3, r2, r0
 800b27c:	2a01      	cmp	r2, #1
 800b27e:	6123      	str	r3, [r4, #16]
 800b280:	dc02      	bgt.n	800b288 <_printf_float+0x150>
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	07d2      	lsls	r2, r2, #31
 800b286:	d501      	bpl.n	800b28c <_printf_float+0x154>
 800b288:	3301      	adds	r3, #1
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b290:	2b00      	cmp	r3, #0
 800b292:	d0a2      	beq.n	800b1da <_printf_float+0xa2>
 800b294:	232d      	movs	r3, #45	@ 0x2d
 800b296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b29a:	e79e      	b.n	800b1da <_printf_float+0xa2>
 800b29c:	9a06      	ldr	r2, [sp, #24]
 800b29e:	2a47      	cmp	r2, #71	@ 0x47
 800b2a0:	d1c2      	bne.n	800b228 <_printf_float+0xf0>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1c0      	bne.n	800b228 <_printf_float+0xf0>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e7bd      	b.n	800b226 <_printf_float+0xee>
 800b2aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2ae:	d9db      	bls.n	800b268 <_printf_float+0x130>
 800b2b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b2b4:	d118      	bne.n	800b2e8 <_printf_float+0x1b0>
 800b2b6:	2900      	cmp	r1, #0
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	dd0b      	ble.n	800b2d4 <_printf_float+0x19c>
 800b2bc:	6121      	str	r1, [r4, #16]
 800b2be:	b913      	cbnz	r3, 800b2c6 <_printf_float+0x18e>
 800b2c0:	6822      	ldr	r2, [r4, #0]
 800b2c2:	07d0      	lsls	r0, r2, #31
 800b2c4:	d502      	bpl.n	800b2cc <_printf_float+0x194>
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	440b      	add	r3, r1
 800b2ca:	6123      	str	r3, [r4, #16]
 800b2cc:	f04f 0900 	mov.w	r9, #0
 800b2d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b2d2:	e7db      	b.n	800b28c <_printf_float+0x154>
 800b2d4:	b913      	cbnz	r3, 800b2dc <_printf_float+0x1a4>
 800b2d6:	6822      	ldr	r2, [r4, #0]
 800b2d8:	07d2      	lsls	r2, r2, #31
 800b2da:	d501      	bpl.n	800b2e0 <_printf_float+0x1a8>
 800b2dc:	3302      	adds	r3, #2
 800b2de:	e7f4      	b.n	800b2ca <_printf_float+0x192>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e7f2      	b.n	800b2ca <_printf_float+0x192>
 800b2e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b2e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	db05      	blt.n	800b2fa <_printf_float+0x1c2>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	6121      	str	r1, [r4, #16]
 800b2f2:	07d8      	lsls	r0, r3, #31
 800b2f4:	d5ea      	bpl.n	800b2cc <_printf_float+0x194>
 800b2f6:	1c4b      	adds	r3, r1, #1
 800b2f8:	e7e7      	b.n	800b2ca <_printf_float+0x192>
 800b2fa:	2900      	cmp	r1, #0
 800b2fc:	bfd4      	ite	le
 800b2fe:	f1c1 0202 	rsble	r2, r1, #2
 800b302:	2201      	movgt	r2, #1
 800b304:	4413      	add	r3, r2
 800b306:	e7e0      	b.n	800b2ca <_printf_float+0x192>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	055a      	lsls	r2, r3, #21
 800b30c:	d407      	bmi.n	800b31e <_printf_float+0x1e6>
 800b30e:	6923      	ldr	r3, [r4, #16]
 800b310:	4642      	mov	r2, r8
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	d12b      	bne.n	800b374 <_printf_float+0x23c>
 800b31c:	e767      	b.n	800b1ee <_printf_float+0xb6>
 800b31e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b322:	f240 80dd 	bls.w	800b4e0 <_printf_float+0x3a8>
 800b326:	2200      	movs	r2, #0
 800b328:	2300      	movs	r3, #0
 800b32a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b32e:	f7f5 fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b332:	2800      	cmp	r0, #0
 800b334:	d033      	beq.n	800b39e <_printf_float+0x266>
 800b336:	2301      	movs	r3, #1
 800b338:	4a36      	ldr	r2, [pc, #216]	@ (800b414 <_printf_float+0x2dc>)
 800b33a:	4631      	mov	r1, r6
 800b33c:	4628      	mov	r0, r5
 800b33e:	47b8      	blx	r7
 800b340:	3001      	adds	r0, #1
 800b342:	f43f af54 	beq.w	800b1ee <_printf_float+0xb6>
 800b346:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b34a:	4543      	cmp	r3, r8
 800b34c:	db02      	blt.n	800b354 <_printf_float+0x21c>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	07d8      	lsls	r0, r3, #31
 800b352:	d50f      	bpl.n	800b374 <_printf_float+0x23c>
 800b354:	4631      	mov	r1, r6
 800b356:	4628      	mov	r0, r5
 800b358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b35c:	47b8      	blx	r7
 800b35e:	3001      	adds	r0, #1
 800b360:	f43f af45 	beq.w	800b1ee <_printf_float+0xb6>
 800b364:	f04f 0900 	mov.w	r9, #0
 800b368:	f108 38ff 	add.w	r8, r8, #4294967295
 800b36c:	f104 0a1a 	add.w	sl, r4, #26
 800b370:	45c8      	cmp	r8, r9
 800b372:	dc09      	bgt.n	800b388 <_printf_float+0x250>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	079b      	lsls	r3, r3, #30
 800b378:	f100 8103 	bmi.w	800b582 <_printf_float+0x44a>
 800b37c:	68e0      	ldr	r0, [r4, #12]
 800b37e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b380:	4298      	cmp	r0, r3
 800b382:	bfb8      	it	lt
 800b384:	4618      	movlt	r0, r3
 800b386:	e734      	b.n	800b1f2 <_printf_float+0xba>
 800b388:	2301      	movs	r3, #1
 800b38a:	4652      	mov	r2, sl
 800b38c:	4631      	mov	r1, r6
 800b38e:	4628      	mov	r0, r5
 800b390:	47b8      	blx	r7
 800b392:	3001      	adds	r0, #1
 800b394:	f43f af2b 	beq.w	800b1ee <_printf_float+0xb6>
 800b398:	f109 0901 	add.w	r9, r9, #1
 800b39c:	e7e8      	b.n	800b370 <_printf_float+0x238>
 800b39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	dc39      	bgt.n	800b418 <_printf_float+0x2e0>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	4a1b      	ldr	r2, [pc, #108]	@ (800b414 <_printf_float+0x2dc>)
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b8      	blx	r7
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f43f af1d 	beq.w	800b1ee <_printf_float+0xb6>
 800b3b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b3b8:	ea59 0303 	orrs.w	r3, r9, r3
 800b3bc:	d102      	bne.n	800b3c4 <_printf_float+0x28c>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	07d9      	lsls	r1, r3, #31
 800b3c2:	d5d7      	bpl.n	800b374 <_printf_float+0x23c>
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3cc:	47b8      	blx	r7
 800b3ce:	3001      	adds	r0, #1
 800b3d0:	f43f af0d 	beq.w	800b1ee <_printf_float+0xb6>
 800b3d4:	f04f 0a00 	mov.w	sl, #0
 800b3d8:	f104 0b1a 	add.w	fp, r4, #26
 800b3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3de:	425b      	negs	r3, r3
 800b3e0:	4553      	cmp	r3, sl
 800b3e2:	dc01      	bgt.n	800b3e8 <_printf_float+0x2b0>
 800b3e4:	464b      	mov	r3, r9
 800b3e6:	e793      	b.n	800b310 <_printf_float+0x1d8>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	465a      	mov	r2, fp
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f aefb 	beq.w	800b1ee <_printf_float+0xb6>
 800b3f8:	f10a 0a01 	add.w	sl, sl, #1
 800b3fc:	e7ee      	b.n	800b3dc <_printf_float+0x2a4>
 800b3fe:	bf00      	nop
 800b400:	7fefffff 	.word	0x7fefffff
 800b404:	0800da5c 	.word	0x0800da5c
 800b408:	0800da60 	.word	0x0800da60
 800b40c:	0800da64 	.word	0x0800da64
 800b410:	0800da68 	.word	0x0800da68
 800b414:	0800da6c 	.word	0x0800da6c
 800b418:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b41a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b41e:	4553      	cmp	r3, sl
 800b420:	bfa8      	it	ge
 800b422:	4653      	movge	r3, sl
 800b424:	2b00      	cmp	r3, #0
 800b426:	4699      	mov	r9, r3
 800b428:	dc36      	bgt.n	800b498 <_printf_float+0x360>
 800b42a:	f04f 0b00 	mov.w	fp, #0
 800b42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b432:	f104 021a 	add.w	r2, r4, #26
 800b436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b438:	9306      	str	r3, [sp, #24]
 800b43a:	eba3 0309 	sub.w	r3, r3, r9
 800b43e:	455b      	cmp	r3, fp
 800b440:	dc31      	bgt.n	800b4a6 <_printf_float+0x36e>
 800b442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b444:	459a      	cmp	sl, r3
 800b446:	dc3a      	bgt.n	800b4be <_printf_float+0x386>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	07da      	lsls	r2, r3, #31
 800b44c:	d437      	bmi.n	800b4be <_printf_float+0x386>
 800b44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b450:	ebaa 0903 	sub.w	r9, sl, r3
 800b454:	9b06      	ldr	r3, [sp, #24]
 800b456:	ebaa 0303 	sub.w	r3, sl, r3
 800b45a:	4599      	cmp	r9, r3
 800b45c:	bfa8      	it	ge
 800b45e:	4699      	movge	r9, r3
 800b460:	f1b9 0f00 	cmp.w	r9, #0
 800b464:	dc33      	bgt.n	800b4ce <_printf_float+0x396>
 800b466:	f04f 0800 	mov.w	r8, #0
 800b46a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b46e:	f104 0b1a 	add.w	fp, r4, #26
 800b472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b474:	ebaa 0303 	sub.w	r3, sl, r3
 800b478:	eba3 0309 	sub.w	r3, r3, r9
 800b47c:	4543      	cmp	r3, r8
 800b47e:	f77f af79 	ble.w	800b374 <_printf_float+0x23c>
 800b482:	2301      	movs	r3, #1
 800b484:	465a      	mov	r2, fp
 800b486:	4631      	mov	r1, r6
 800b488:	4628      	mov	r0, r5
 800b48a:	47b8      	blx	r7
 800b48c:	3001      	adds	r0, #1
 800b48e:	f43f aeae 	beq.w	800b1ee <_printf_float+0xb6>
 800b492:	f108 0801 	add.w	r8, r8, #1
 800b496:	e7ec      	b.n	800b472 <_printf_float+0x33a>
 800b498:	4642      	mov	r2, r8
 800b49a:	4631      	mov	r1, r6
 800b49c:	4628      	mov	r0, r5
 800b49e:	47b8      	blx	r7
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d1c2      	bne.n	800b42a <_printf_float+0x2f2>
 800b4a4:	e6a3      	b.n	800b1ee <_printf_float+0xb6>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4631      	mov	r1, r6
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	9206      	str	r2, [sp, #24]
 800b4ae:	47b8      	blx	r7
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f43f ae9c 	beq.w	800b1ee <_printf_float+0xb6>
 800b4b6:	f10b 0b01 	add.w	fp, fp, #1
 800b4ba:	9a06      	ldr	r2, [sp, #24]
 800b4bc:	e7bb      	b.n	800b436 <_printf_float+0x2fe>
 800b4be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	47b8      	blx	r7
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d1c0      	bne.n	800b44e <_printf_float+0x316>
 800b4cc:	e68f      	b.n	800b1ee <_printf_float+0xb6>
 800b4ce:	9a06      	ldr	r2, [sp, #24]
 800b4d0:	464b      	mov	r3, r9
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	4442      	add	r2, r8
 800b4d8:	47b8      	blx	r7
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d1c3      	bne.n	800b466 <_printf_float+0x32e>
 800b4de:	e686      	b.n	800b1ee <_printf_float+0xb6>
 800b4e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4e4:	f1ba 0f01 	cmp.w	sl, #1
 800b4e8:	dc01      	bgt.n	800b4ee <_printf_float+0x3b6>
 800b4ea:	07db      	lsls	r3, r3, #31
 800b4ec:	d536      	bpl.n	800b55c <_printf_float+0x424>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f ae78 	beq.w	800b1ee <_printf_float+0xb6>
 800b4fe:	4631      	mov	r1, r6
 800b500:	4628      	mov	r0, r5
 800b502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f ae70 	beq.w	800b1ee <_printf_float+0xb6>
 800b50e:	2200      	movs	r2, #0
 800b510:	2300      	movs	r3, #0
 800b512:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b516:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b51a:	f7f5 fae5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b51e:	b9c0      	cbnz	r0, 800b552 <_printf_float+0x41a>
 800b520:	4653      	mov	r3, sl
 800b522:	f108 0201 	add.w	r2, r8, #1
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	d10c      	bne.n	800b54a <_printf_float+0x412>
 800b530:	e65d      	b.n	800b1ee <_printf_float+0xb6>
 800b532:	2301      	movs	r3, #1
 800b534:	465a      	mov	r2, fp
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	f43f ae56 	beq.w	800b1ee <_printf_float+0xb6>
 800b542:	f108 0801 	add.w	r8, r8, #1
 800b546:	45d0      	cmp	r8, sl
 800b548:	dbf3      	blt.n	800b532 <_printf_float+0x3fa>
 800b54a:	464b      	mov	r3, r9
 800b54c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b550:	e6df      	b.n	800b312 <_printf_float+0x1da>
 800b552:	f04f 0800 	mov.w	r8, #0
 800b556:	f104 0b1a 	add.w	fp, r4, #26
 800b55a:	e7f4      	b.n	800b546 <_printf_float+0x40e>
 800b55c:	2301      	movs	r3, #1
 800b55e:	4642      	mov	r2, r8
 800b560:	e7e1      	b.n	800b526 <_printf_float+0x3ee>
 800b562:	2301      	movs	r3, #1
 800b564:	464a      	mov	r2, r9
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	f43f ae3e 	beq.w	800b1ee <_printf_float+0xb6>
 800b572:	f108 0801 	add.w	r8, r8, #1
 800b576:	68e3      	ldr	r3, [r4, #12]
 800b578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b57a:	1a5b      	subs	r3, r3, r1
 800b57c:	4543      	cmp	r3, r8
 800b57e:	dcf0      	bgt.n	800b562 <_printf_float+0x42a>
 800b580:	e6fc      	b.n	800b37c <_printf_float+0x244>
 800b582:	f04f 0800 	mov.w	r8, #0
 800b586:	f104 0919 	add.w	r9, r4, #25
 800b58a:	e7f4      	b.n	800b576 <_printf_float+0x43e>

0800b58c <_printf_common>:
 800b58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b590:	4616      	mov	r6, r2
 800b592:	4698      	mov	r8, r3
 800b594:	688a      	ldr	r2, [r1, #8]
 800b596:	4607      	mov	r7, r0
 800b598:	690b      	ldr	r3, [r1, #16]
 800b59a:	460c      	mov	r4, r1
 800b59c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	bfb8      	it	lt
 800b5a4:	4613      	movlt	r3, r2
 800b5a6:	6033      	str	r3, [r6, #0]
 800b5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5ac:	b10a      	cbz	r2, 800b5b2 <_printf_common+0x26>
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	6033      	str	r3, [r6, #0]
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	0699      	lsls	r1, r3, #26
 800b5b6:	bf42      	ittt	mi
 800b5b8:	6833      	ldrmi	r3, [r6, #0]
 800b5ba:	3302      	addmi	r3, #2
 800b5bc:	6033      	strmi	r3, [r6, #0]
 800b5be:	6825      	ldr	r5, [r4, #0]
 800b5c0:	f015 0506 	ands.w	r5, r5, #6
 800b5c4:	d106      	bne.n	800b5d4 <_printf_common+0x48>
 800b5c6:	f104 0a19 	add.w	sl, r4, #25
 800b5ca:	68e3      	ldr	r3, [r4, #12]
 800b5cc:	6832      	ldr	r2, [r6, #0]
 800b5ce:	1a9b      	subs	r3, r3, r2
 800b5d0:	42ab      	cmp	r3, r5
 800b5d2:	dc2b      	bgt.n	800b62c <_printf_common+0xa0>
 800b5d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5d8:	6822      	ldr	r2, [r4, #0]
 800b5da:	3b00      	subs	r3, #0
 800b5dc:	bf18      	it	ne
 800b5de:	2301      	movne	r3, #1
 800b5e0:	0692      	lsls	r2, r2, #26
 800b5e2:	d430      	bmi.n	800b646 <_printf_common+0xba>
 800b5e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5e8:	4641      	mov	r1, r8
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	47c8      	blx	r9
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	d023      	beq.n	800b63a <_printf_common+0xae>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	341a      	adds	r4, #26
 800b5f6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b5fa:	f003 0306 	and.w	r3, r3, #6
 800b5fe:	2b04      	cmp	r3, #4
 800b600:	bf0a      	itet	eq
 800b602:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b606:	2500      	movne	r5, #0
 800b608:	6833      	ldreq	r3, [r6, #0]
 800b60a:	f04f 0600 	mov.w	r6, #0
 800b60e:	bf08      	it	eq
 800b610:	1aed      	subeq	r5, r5, r3
 800b612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b616:	bf08      	it	eq
 800b618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b61c:	4293      	cmp	r3, r2
 800b61e:	bfc4      	itt	gt
 800b620:	1a9b      	subgt	r3, r3, r2
 800b622:	18ed      	addgt	r5, r5, r3
 800b624:	42b5      	cmp	r5, r6
 800b626:	d11a      	bne.n	800b65e <_printf_common+0xd2>
 800b628:	2000      	movs	r0, #0
 800b62a:	e008      	b.n	800b63e <_printf_common+0xb2>
 800b62c:	2301      	movs	r3, #1
 800b62e:	4652      	mov	r2, sl
 800b630:	4641      	mov	r1, r8
 800b632:	4638      	mov	r0, r7
 800b634:	47c8      	blx	r9
 800b636:	3001      	adds	r0, #1
 800b638:	d103      	bne.n	800b642 <_printf_common+0xb6>
 800b63a:	f04f 30ff 	mov.w	r0, #4294967295
 800b63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b642:	3501      	adds	r5, #1
 800b644:	e7c1      	b.n	800b5ca <_printf_common+0x3e>
 800b646:	18e1      	adds	r1, r4, r3
 800b648:	1c5a      	adds	r2, r3, #1
 800b64a:	2030      	movs	r0, #48	@ 0x30
 800b64c:	3302      	adds	r3, #2
 800b64e:	4422      	add	r2, r4
 800b650:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b65c:	e7c2      	b.n	800b5e4 <_printf_common+0x58>
 800b65e:	2301      	movs	r3, #1
 800b660:	4622      	mov	r2, r4
 800b662:	4641      	mov	r1, r8
 800b664:	4638      	mov	r0, r7
 800b666:	47c8      	blx	r9
 800b668:	3001      	adds	r0, #1
 800b66a:	d0e6      	beq.n	800b63a <_printf_common+0xae>
 800b66c:	3601      	adds	r6, #1
 800b66e:	e7d9      	b.n	800b624 <_printf_common+0x98>

0800b670 <_printf_i>:
 800b670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b674:	7e0f      	ldrb	r7, [r1, #24]
 800b676:	4691      	mov	r9, r2
 800b678:	4680      	mov	r8, r0
 800b67a:	460c      	mov	r4, r1
 800b67c:	2f78      	cmp	r7, #120	@ 0x78
 800b67e:	469a      	mov	sl, r3
 800b680:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b686:	d807      	bhi.n	800b698 <_printf_i+0x28>
 800b688:	2f62      	cmp	r7, #98	@ 0x62
 800b68a:	d80a      	bhi.n	800b6a2 <_printf_i+0x32>
 800b68c:	2f00      	cmp	r7, #0
 800b68e:	f000 80d2 	beq.w	800b836 <_printf_i+0x1c6>
 800b692:	2f58      	cmp	r7, #88	@ 0x58
 800b694:	f000 80b9 	beq.w	800b80a <_printf_i+0x19a>
 800b698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b69c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6a0:	e03a      	b.n	800b718 <_printf_i+0xa8>
 800b6a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6a6:	2b15      	cmp	r3, #21
 800b6a8:	d8f6      	bhi.n	800b698 <_printf_i+0x28>
 800b6aa:	a101      	add	r1, pc, #4	@ (adr r1, 800b6b0 <_printf_i+0x40>)
 800b6ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6b0:	0800b709 	.word	0x0800b709
 800b6b4:	0800b71d 	.word	0x0800b71d
 800b6b8:	0800b699 	.word	0x0800b699
 800b6bc:	0800b699 	.word	0x0800b699
 800b6c0:	0800b699 	.word	0x0800b699
 800b6c4:	0800b699 	.word	0x0800b699
 800b6c8:	0800b71d 	.word	0x0800b71d
 800b6cc:	0800b699 	.word	0x0800b699
 800b6d0:	0800b699 	.word	0x0800b699
 800b6d4:	0800b699 	.word	0x0800b699
 800b6d8:	0800b699 	.word	0x0800b699
 800b6dc:	0800b81d 	.word	0x0800b81d
 800b6e0:	0800b747 	.word	0x0800b747
 800b6e4:	0800b7d7 	.word	0x0800b7d7
 800b6e8:	0800b699 	.word	0x0800b699
 800b6ec:	0800b699 	.word	0x0800b699
 800b6f0:	0800b83f 	.word	0x0800b83f
 800b6f4:	0800b699 	.word	0x0800b699
 800b6f8:	0800b747 	.word	0x0800b747
 800b6fc:	0800b699 	.word	0x0800b699
 800b700:	0800b699 	.word	0x0800b699
 800b704:	0800b7df 	.word	0x0800b7df
 800b708:	6833      	ldr	r3, [r6, #0]
 800b70a:	1d1a      	adds	r2, r3, #4
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6032      	str	r2, [r6, #0]
 800b710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b718:	2301      	movs	r3, #1
 800b71a:	e09d      	b.n	800b858 <_printf_i+0x1e8>
 800b71c:	6833      	ldr	r3, [r6, #0]
 800b71e:	6820      	ldr	r0, [r4, #0]
 800b720:	1d19      	adds	r1, r3, #4
 800b722:	6031      	str	r1, [r6, #0]
 800b724:	0606      	lsls	r6, r0, #24
 800b726:	d501      	bpl.n	800b72c <_printf_i+0xbc>
 800b728:	681d      	ldr	r5, [r3, #0]
 800b72a:	e003      	b.n	800b734 <_printf_i+0xc4>
 800b72c:	0645      	lsls	r5, r0, #25
 800b72e:	d5fb      	bpl.n	800b728 <_printf_i+0xb8>
 800b730:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b734:	2d00      	cmp	r5, #0
 800b736:	da03      	bge.n	800b740 <_printf_i+0xd0>
 800b738:	232d      	movs	r3, #45	@ 0x2d
 800b73a:	426d      	negs	r5, r5
 800b73c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b740:	4859      	ldr	r0, [pc, #356]	@ (800b8a8 <_printf_i+0x238>)
 800b742:	230a      	movs	r3, #10
 800b744:	e011      	b.n	800b76a <_printf_i+0xfa>
 800b746:	6821      	ldr	r1, [r4, #0]
 800b748:	6833      	ldr	r3, [r6, #0]
 800b74a:	0608      	lsls	r0, r1, #24
 800b74c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b750:	d402      	bmi.n	800b758 <_printf_i+0xe8>
 800b752:	0649      	lsls	r1, r1, #25
 800b754:	bf48      	it	mi
 800b756:	b2ad      	uxthmi	r5, r5
 800b758:	2f6f      	cmp	r7, #111	@ 0x6f
 800b75a:	6033      	str	r3, [r6, #0]
 800b75c:	4852      	ldr	r0, [pc, #328]	@ (800b8a8 <_printf_i+0x238>)
 800b75e:	bf14      	ite	ne
 800b760:	230a      	movne	r3, #10
 800b762:	2308      	moveq	r3, #8
 800b764:	2100      	movs	r1, #0
 800b766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b76a:	6866      	ldr	r6, [r4, #4]
 800b76c:	2e00      	cmp	r6, #0
 800b76e:	60a6      	str	r6, [r4, #8]
 800b770:	bfa2      	ittt	ge
 800b772:	6821      	ldrge	r1, [r4, #0]
 800b774:	f021 0104 	bicge.w	r1, r1, #4
 800b778:	6021      	strge	r1, [r4, #0]
 800b77a:	b90d      	cbnz	r5, 800b780 <_printf_i+0x110>
 800b77c:	2e00      	cmp	r6, #0
 800b77e:	d04b      	beq.n	800b818 <_printf_i+0x1a8>
 800b780:	4616      	mov	r6, r2
 800b782:	fbb5 f1f3 	udiv	r1, r5, r3
 800b786:	fb03 5711 	mls	r7, r3, r1, r5
 800b78a:	5dc7      	ldrb	r7, [r0, r7]
 800b78c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b790:	462f      	mov	r7, r5
 800b792:	460d      	mov	r5, r1
 800b794:	42bb      	cmp	r3, r7
 800b796:	d9f4      	bls.n	800b782 <_printf_i+0x112>
 800b798:	2b08      	cmp	r3, #8
 800b79a:	d10b      	bne.n	800b7b4 <_printf_i+0x144>
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	07df      	lsls	r7, r3, #31
 800b7a0:	d508      	bpl.n	800b7b4 <_printf_i+0x144>
 800b7a2:	6923      	ldr	r3, [r4, #16]
 800b7a4:	6861      	ldr	r1, [r4, #4]
 800b7a6:	4299      	cmp	r1, r3
 800b7a8:	bfde      	ittt	le
 800b7aa:	2330      	movle	r3, #48	@ 0x30
 800b7ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7b4:	1b92      	subs	r2, r2, r6
 800b7b6:	6122      	str	r2, [r4, #16]
 800b7b8:	464b      	mov	r3, r9
 800b7ba:	aa03      	add	r2, sp, #12
 800b7bc:	4621      	mov	r1, r4
 800b7be:	4640      	mov	r0, r8
 800b7c0:	f8cd a000 	str.w	sl, [sp]
 800b7c4:	f7ff fee2 	bl	800b58c <_printf_common>
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	d14a      	bne.n	800b862 <_printf_i+0x1f2>
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	b004      	add	sp, #16
 800b7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	f043 0320 	orr.w	r3, r3, #32
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	2778      	movs	r7, #120	@ 0x78
 800b7e0:	4832      	ldr	r0, [pc, #200]	@ (800b8ac <_printf_i+0x23c>)
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7e8:	061f      	lsls	r7, r3, #24
 800b7ea:	6831      	ldr	r1, [r6, #0]
 800b7ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7f0:	d402      	bmi.n	800b7f8 <_printf_i+0x188>
 800b7f2:	065f      	lsls	r7, r3, #25
 800b7f4:	bf48      	it	mi
 800b7f6:	b2ad      	uxthmi	r5, r5
 800b7f8:	6031      	str	r1, [r6, #0]
 800b7fa:	07d9      	lsls	r1, r3, #31
 800b7fc:	bf44      	itt	mi
 800b7fe:	f043 0320 	orrmi.w	r3, r3, #32
 800b802:	6023      	strmi	r3, [r4, #0]
 800b804:	b11d      	cbz	r5, 800b80e <_printf_i+0x19e>
 800b806:	2310      	movs	r3, #16
 800b808:	e7ac      	b.n	800b764 <_printf_i+0xf4>
 800b80a:	4827      	ldr	r0, [pc, #156]	@ (800b8a8 <_printf_i+0x238>)
 800b80c:	e7e9      	b.n	800b7e2 <_printf_i+0x172>
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	f023 0320 	bic.w	r3, r3, #32
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	e7f6      	b.n	800b806 <_printf_i+0x196>
 800b818:	4616      	mov	r6, r2
 800b81a:	e7bd      	b.n	800b798 <_printf_i+0x128>
 800b81c:	6833      	ldr	r3, [r6, #0]
 800b81e:	6825      	ldr	r5, [r4, #0]
 800b820:	1d18      	adds	r0, r3, #4
 800b822:	6961      	ldr	r1, [r4, #20]
 800b824:	6030      	str	r0, [r6, #0]
 800b826:	062e      	lsls	r6, r5, #24
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	d501      	bpl.n	800b830 <_printf_i+0x1c0>
 800b82c:	6019      	str	r1, [r3, #0]
 800b82e:	e002      	b.n	800b836 <_printf_i+0x1c6>
 800b830:	0668      	lsls	r0, r5, #25
 800b832:	d5fb      	bpl.n	800b82c <_printf_i+0x1bc>
 800b834:	8019      	strh	r1, [r3, #0]
 800b836:	2300      	movs	r3, #0
 800b838:	4616      	mov	r6, r2
 800b83a:	6123      	str	r3, [r4, #16]
 800b83c:	e7bc      	b.n	800b7b8 <_printf_i+0x148>
 800b83e:	6833      	ldr	r3, [r6, #0]
 800b840:	2100      	movs	r1, #0
 800b842:	1d1a      	adds	r2, r3, #4
 800b844:	6032      	str	r2, [r6, #0]
 800b846:	681e      	ldr	r6, [r3, #0]
 800b848:	6862      	ldr	r2, [r4, #4]
 800b84a:	4630      	mov	r0, r6
 800b84c:	f000 f9b5 	bl	800bbba <memchr>
 800b850:	b108      	cbz	r0, 800b856 <_printf_i+0x1e6>
 800b852:	1b80      	subs	r0, r0, r6
 800b854:	6060      	str	r0, [r4, #4]
 800b856:	6863      	ldr	r3, [r4, #4]
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	2300      	movs	r3, #0
 800b85c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b860:	e7aa      	b.n	800b7b8 <_printf_i+0x148>
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	4632      	mov	r2, r6
 800b866:	4649      	mov	r1, r9
 800b868:	4640      	mov	r0, r8
 800b86a:	47d0      	blx	sl
 800b86c:	3001      	adds	r0, #1
 800b86e:	d0ad      	beq.n	800b7cc <_printf_i+0x15c>
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	079b      	lsls	r3, r3, #30
 800b874:	d413      	bmi.n	800b89e <_printf_i+0x22e>
 800b876:	68e0      	ldr	r0, [r4, #12]
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	4298      	cmp	r0, r3
 800b87c:	bfb8      	it	lt
 800b87e:	4618      	movlt	r0, r3
 800b880:	e7a6      	b.n	800b7d0 <_printf_i+0x160>
 800b882:	2301      	movs	r3, #1
 800b884:	4632      	mov	r2, r6
 800b886:	4649      	mov	r1, r9
 800b888:	4640      	mov	r0, r8
 800b88a:	47d0      	blx	sl
 800b88c:	3001      	adds	r0, #1
 800b88e:	d09d      	beq.n	800b7cc <_printf_i+0x15c>
 800b890:	3501      	adds	r5, #1
 800b892:	68e3      	ldr	r3, [r4, #12]
 800b894:	9903      	ldr	r1, [sp, #12]
 800b896:	1a5b      	subs	r3, r3, r1
 800b898:	42ab      	cmp	r3, r5
 800b89a:	dcf2      	bgt.n	800b882 <_printf_i+0x212>
 800b89c:	e7eb      	b.n	800b876 <_printf_i+0x206>
 800b89e:	2500      	movs	r5, #0
 800b8a0:	f104 0619 	add.w	r6, r4, #25
 800b8a4:	e7f5      	b.n	800b892 <_printf_i+0x222>
 800b8a6:	bf00      	nop
 800b8a8:	0800da6e 	.word	0x0800da6e
 800b8ac:	0800da7f 	.word	0x0800da7f

0800b8b0 <std>:
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	b510      	push	{r4, lr}
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	6083      	str	r3, [r0, #8]
 800b8b8:	8181      	strh	r1, [r0, #12]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6643      	str	r3, [r0, #100]	@ 0x64
 800b8be:	81c2      	strh	r2, [r0, #14]
 800b8c0:	2208      	movs	r2, #8
 800b8c2:	6183      	str	r3, [r0, #24]
 800b8c4:	e9c0 3300 	strd	r3, r3, [r0]
 800b8c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8cc:	305c      	adds	r0, #92	@ 0x5c
 800b8ce:	f000 f8f4 	bl	800baba <memset>
 800b8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b908 <std+0x58>)
 800b8d4:	6224      	str	r4, [r4, #32]
 800b8d6:	6263      	str	r3, [r4, #36]	@ 0x24
 800b8d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b90c <std+0x5c>)
 800b8da:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b910 <std+0x60>)
 800b8de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b914 <std+0x64>)
 800b8e2:	6323      	str	r3, [r4, #48]	@ 0x30
 800b8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b918 <std+0x68>)
 800b8e6:	429c      	cmp	r4, r3
 800b8e8:	d006      	beq.n	800b8f8 <std+0x48>
 800b8ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b8ee:	4294      	cmp	r4, r2
 800b8f0:	d002      	beq.n	800b8f8 <std+0x48>
 800b8f2:	33d0      	adds	r3, #208	@ 0xd0
 800b8f4:	429c      	cmp	r4, r3
 800b8f6:	d105      	bne.n	800b904 <std+0x54>
 800b8f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b900:	f000 b958 	b.w	800bbb4 <__retarget_lock_init_recursive>
 800b904:	bd10      	pop	{r4, pc}
 800b906:	bf00      	nop
 800b908:	0800ba35 	.word	0x0800ba35
 800b90c:	0800ba57 	.word	0x0800ba57
 800b910:	0800ba8f 	.word	0x0800ba8f
 800b914:	0800bab3 	.word	0x0800bab3
 800b918:	2000098c 	.word	0x2000098c

0800b91c <stdio_exit_handler>:
 800b91c:	4a02      	ldr	r2, [pc, #8]	@ (800b928 <stdio_exit_handler+0xc>)
 800b91e:	4903      	ldr	r1, [pc, #12]	@ (800b92c <stdio_exit_handler+0x10>)
 800b920:	4803      	ldr	r0, [pc, #12]	@ (800b930 <stdio_exit_handler+0x14>)
 800b922:	f000 b869 	b.w	800b9f8 <_fwalk_sglue>
 800b926:	bf00      	nop
 800b928:	2000000c 	.word	0x2000000c
 800b92c:	0800d291 	.word	0x0800d291
 800b930:	2000001c 	.word	0x2000001c

0800b934 <cleanup_stdio>:
 800b934:	6841      	ldr	r1, [r0, #4]
 800b936:	4b0c      	ldr	r3, [pc, #48]	@ (800b968 <cleanup_stdio+0x34>)
 800b938:	4299      	cmp	r1, r3
 800b93a:	b510      	push	{r4, lr}
 800b93c:	4604      	mov	r4, r0
 800b93e:	d001      	beq.n	800b944 <cleanup_stdio+0x10>
 800b940:	f001 fca6 	bl	800d290 <_fflush_r>
 800b944:	68a1      	ldr	r1, [r4, #8]
 800b946:	4b09      	ldr	r3, [pc, #36]	@ (800b96c <cleanup_stdio+0x38>)
 800b948:	4299      	cmp	r1, r3
 800b94a:	d002      	beq.n	800b952 <cleanup_stdio+0x1e>
 800b94c:	4620      	mov	r0, r4
 800b94e:	f001 fc9f 	bl	800d290 <_fflush_r>
 800b952:	68e1      	ldr	r1, [r4, #12]
 800b954:	4b06      	ldr	r3, [pc, #24]	@ (800b970 <cleanup_stdio+0x3c>)
 800b956:	4299      	cmp	r1, r3
 800b958:	d004      	beq.n	800b964 <cleanup_stdio+0x30>
 800b95a:	4620      	mov	r0, r4
 800b95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b960:	f001 bc96 	b.w	800d290 <_fflush_r>
 800b964:	bd10      	pop	{r4, pc}
 800b966:	bf00      	nop
 800b968:	2000098c 	.word	0x2000098c
 800b96c:	200009f4 	.word	0x200009f4
 800b970:	20000a5c 	.word	0x20000a5c

0800b974 <global_stdio_init.part.0>:
 800b974:	b510      	push	{r4, lr}
 800b976:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a4 <global_stdio_init.part.0+0x30>)
 800b978:	2104      	movs	r1, #4
 800b97a:	4c0b      	ldr	r4, [pc, #44]	@ (800b9a8 <global_stdio_init.part.0+0x34>)
 800b97c:	4a0b      	ldr	r2, [pc, #44]	@ (800b9ac <global_stdio_init.part.0+0x38>)
 800b97e:	4620      	mov	r0, r4
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	2200      	movs	r2, #0
 800b984:	f7ff ff94 	bl	800b8b0 <std>
 800b988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b98c:	2201      	movs	r2, #1
 800b98e:	2109      	movs	r1, #9
 800b990:	f7ff ff8e 	bl	800b8b0 <std>
 800b994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b998:	2202      	movs	r2, #2
 800b99a:	2112      	movs	r1, #18
 800b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a0:	f7ff bf86 	b.w	800b8b0 <std>
 800b9a4:	20000ac4 	.word	0x20000ac4
 800b9a8:	2000098c 	.word	0x2000098c
 800b9ac:	0800b91d 	.word	0x0800b91d

0800b9b0 <__sfp_lock_acquire>:
 800b9b0:	4801      	ldr	r0, [pc, #4]	@ (800b9b8 <__sfp_lock_acquire+0x8>)
 800b9b2:	f000 b900 	b.w	800bbb6 <__retarget_lock_acquire_recursive>
 800b9b6:	bf00      	nop
 800b9b8:	20000acd 	.word	0x20000acd

0800b9bc <__sfp_lock_release>:
 800b9bc:	4801      	ldr	r0, [pc, #4]	@ (800b9c4 <__sfp_lock_release+0x8>)
 800b9be:	f000 b8fb 	b.w	800bbb8 <__retarget_lock_release_recursive>
 800b9c2:	bf00      	nop
 800b9c4:	20000acd 	.word	0x20000acd

0800b9c8 <__sinit>:
 800b9c8:	b510      	push	{r4, lr}
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	f7ff fff0 	bl	800b9b0 <__sfp_lock_acquire>
 800b9d0:	6a23      	ldr	r3, [r4, #32]
 800b9d2:	b11b      	cbz	r3, 800b9dc <__sinit+0x14>
 800b9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d8:	f7ff bff0 	b.w	800b9bc <__sfp_lock_release>
 800b9dc:	4b04      	ldr	r3, [pc, #16]	@ (800b9f0 <__sinit+0x28>)
 800b9de:	6223      	str	r3, [r4, #32]
 800b9e0:	4b04      	ldr	r3, [pc, #16]	@ (800b9f4 <__sinit+0x2c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1f5      	bne.n	800b9d4 <__sinit+0xc>
 800b9e8:	f7ff ffc4 	bl	800b974 <global_stdio_init.part.0>
 800b9ec:	e7f2      	b.n	800b9d4 <__sinit+0xc>
 800b9ee:	bf00      	nop
 800b9f0:	0800b935 	.word	0x0800b935
 800b9f4:	20000ac4 	.word	0x20000ac4

0800b9f8 <_fwalk_sglue>:
 800b9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	4688      	mov	r8, r1
 800ba00:	4614      	mov	r4, r2
 800ba02:	2600      	movs	r6, #0
 800ba04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba08:	f1b9 0901 	subs.w	r9, r9, #1
 800ba0c:	d505      	bpl.n	800ba1a <_fwalk_sglue+0x22>
 800ba0e:	6824      	ldr	r4, [r4, #0]
 800ba10:	2c00      	cmp	r4, #0
 800ba12:	d1f7      	bne.n	800ba04 <_fwalk_sglue+0xc>
 800ba14:	4630      	mov	r0, r6
 800ba16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba1a:	89ab      	ldrh	r3, [r5, #12]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d907      	bls.n	800ba30 <_fwalk_sglue+0x38>
 800ba20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba24:	3301      	adds	r3, #1
 800ba26:	d003      	beq.n	800ba30 <_fwalk_sglue+0x38>
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	47c0      	blx	r8
 800ba2e:	4306      	orrs	r6, r0
 800ba30:	3568      	adds	r5, #104	@ 0x68
 800ba32:	e7e9      	b.n	800ba08 <_fwalk_sglue+0x10>

0800ba34 <__sread>:
 800ba34:	b510      	push	{r4, lr}
 800ba36:	460c      	mov	r4, r1
 800ba38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3c:	f000 f86c 	bl	800bb18 <_read_r>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	bfab      	itete	ge
 800ba44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba46:	89a3      	ldrhlt	r3, [r4, #12]
 800ba48:	181b      	addge	r3, r3, r0
 800ba4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba4e:	bfac      	ite	ge
 800ba50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba52:	81a3      	strhlt	r3, [r4, #12]
 800ba54:	bd10      	pop	{r4, pc}

0800ba56 <__swrite>:
 800ba56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5a:	461f      	mov	r7, r3
 800ba5c:	898b      	ldrh	r3, [r1, #12]
 800ba5e:	4605      	mov	r5, r0
 800ba60:	460c      	mov	r4, r1
 800ba62:	05db      	lsls	r3, r3, #23
 800ba64:	4616      	mov	r6, r2
 800ba66:	d505      	bpl.n	800ba74 <__swrite+0x1e>
 800ba68:	2302      	movs	r3, #2
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba70:	f000 f840 	bl	800baf4 <_lseek_r>
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	4632      	mov	r2, r6
 800ba78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba82:	81a3      	strh	r3, [r4, #12]
 800ba84:	463b      	mov	r3, r7
 800ba86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8a:	f000 b857 	b.w	800bb3c <_write_r>

0800ba8e <__sseek>:
 800ba8e:	b510      	push	{r4, lr}
 800ba90:	460c      	mov	r4, r1
 800ba92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba96:	f000 f82d 	bl	800baf4 <_lseek_r>
 800ba9a:	1c43      	adds	r3, r0, #1
 800ba9c:	89a3      	ldrh	r3, [r4, #12]
 800ba9e:	bf15      	itete	ne
 800baa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800baa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800baa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800baaa:	81a3      	strheq	r3, [r4, #12]
 800baac:	bf18      	it	ne
 800baae:	81a3      	strhne	r3, [r4, #12]
 800bab0:	bd10      	pop	{r4, pc}

0800bab2 <__sclose>:
 800bab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab6:	f000 b80d 	b.w	800bad4 <_close_r>

0800baba <memset>:
 800baba:	4402      	add	r2, r0
 800babc:	4603      	mov	r3, r0
 800babe:	4293      	cmp	r3, r2
 800bac0:	d100      	bne.n	800bac4 <memset+0xa>
 800bac2:	4770      	bx	lr
 800bac4:	f803 1b01 	strb.w	r1, [r3], #1
 800bac8:	e7f9      	b.n	800babe <memset+0x4>
	...

0800bacc <_localeconv_r>:
 800bacc:	4800      	ldr	r0, [pc, #0]	@ (800bad0 <_localeconv_r+0x4>)
 800bace:	4770      	bx	lr
 800bad0:	20000158 	.word	0x20000158

0800bad4 <_close_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	2300      	movs	r3, #0
 800bad8:	4d05      	ldr	r5, [pc, #20]	@ (800baf0 <_close_r+0x1c>)
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	602b      	str	r3, [r5, #0]
 800bae0:	f7f5 ffda 	bl	8001a98 <_close>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_close_r+0x1a>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_close_r+0x1a>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20000ac8 	.word	0x20000ac8

0800baf4 <_lseek_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4604      	mov	r4, r0
 800baf8:	4d06      	ldr	r5, [pc, #24]	@ (800bb14 <_lseek_r+0x20>)
 800bafa:	4608      	mov	r0, r1
 800bafc:	4611      	mov	r1, r2
 800bafe:	2200      	movs	r2, #0
 800bb00:	602a      	str	r2, [r5, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	f7f5 ffef 	bl	8001ae6 <_lseek>
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	d102      	bne.n	800bb12 <_lseek_r+0x1e>
 800bb0c:	682b      	ldr	r3, [r5, #0]
 800bb0e:	b103      	cbz	r3, 800bb12 <_lseek_r+0x1e>
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	20000ac8 	.word	0x20000ac8

0800bb18 <_read_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4d06      	ldr	r5, [pc, #24]	@ (800bb38 <_read_r+0x20>)
 800bb1e:	4608      	mov	r0, r1
 800bb20:	4611      	mov	r1, r2
 800bb22:	2200      	movs	r2, #0
 800bb24:	602a      	str	r2, [r5, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	f7f5 ff7d 	bl	8001a26 <_read>
 800bb2c:	1c43      	adds	r3, r0, #1
 800bb2e:	d102      	bne.n	800bb36 <_read_r+0x1e>
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	b103      	cbz	r3, 800bb36 <_read_r+0x1e>
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	bd38      	pop	{r3, r4, r5, pc}
 800bb38:	20000ac8 	.word	0x20000ac8

0800bb3c <_write_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4d06      	ldr	r5, [pc, #24]	@ (800bb5c <_write_r+0x20>)
 800bb42:	4608      	mov	r0, r1
 800bb44:	4611      	mov	r1, r2
 800bb46:	2200      	movs	r2, #0
 800bb48:	602a      	str	r2, [r5, #0]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f7f5 ff88 	bl	8001a60 <_write>
 800bb50:	1c43      	adds	r3, r0, #1
 800bb52:	d102      	bne.n	800bb5a <_write_r+0x1e>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	b103      	cbz	r3, 800bb5a <_write_r+0x1e>
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	bd38      	pop	{r3, r4, r5, pc}
 800bb5c:	20000ac8 	.word	0x20000ac8

0800bb60 <__errno>:
 800bb60:	4b01      	ldr	r3, [pc, #4]	@ (800bb68 <__errno+0x8>)
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	20000018 	.word	0x20000018

0800bb6c <__libc_init_array>:
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	4d0d      	ldr	r5, [pc, #52]	@ (800bba4 <__libc_init_array+0x38>)
 800bb70:	2600      	movs	r6, #0
 800bb72:	4c0d      	ldr	r4, [pc, #52]	@ (800bba8 <__libc_init_array+0x3c>)
 800bb74:	1b64      	subs	r4, r4, r5
 800bb76:	10a4      	asrs	r4, r4, #2
 800bb78:	42a6      	cmp	r6, r4
 800bb7a:	d109      	bne.n	800bb90 <__libc_init_array+0x24>
 800bb7c:	4d0b      	ldr	r5, [pc, #44]	@ (800bbac <__libc_init_array+0x40>)
 800bb7e:	2600      	movs	r6, #0
 800bb80:	4c0b      	ldr	r4, [pc, #44]	@ (800bbb0 <__libc_init_array+0x44>)
 800bb82:	f001 fed3 	bl	800d92c <_init>
 800bb86:	1b64      	subs	r4, r4, r5
 800bb88:	10a4      	asrs	r4, r4, #2
 800bb8a:	42a6      	cmp	r6, r4
 800bb8c:	d105      	bne.n	800bb9a <__libc_init_array+0x2e>
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb94:	3601      	adds	r6, #1
 800bb96:	4798      	blx	r3
 800bb98:	e7ee      	b.n	800bb78 <__libc_init_array+0xc>
 800bb9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb9e:	3601      	adds	r6, #1
 800bba0:	4798      	blx	r3
 800bba2:	e7f2      	b.n	800bb8a <__libc_init_array+0x1e>
 800bba4:	0800ddd8 	.word	0x0800ddd8
 800bba8:	0800ddd8 	.word	0x0800ddd8
 800bbac:	0800ddd8 	.word	0x0800ddd8
 800bbb0:	0800dddc 	.word	0x0800dddc

0800bbb4 <__retarget_lock_init_recursive>:
 800bbb4:	4770      	bx	lr

0800bbb6 <__retarget_lock_acquire_recursive>:
 800bbb6:	4770      	bx	lr

0800bbb8 <__retarget_lock_release_recursive>:
 800bbb8:	4770      	bx	lr

0800bbba <memchr>:
 800bbba:	b2c9      	uxtb	r1, r1
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	4402      	add	r2, r0
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	d101      	bne.n	800bbcc <memchr+0x12>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	e003      	b.n	800bbd4 <memchr+0x1a>
 800bbcc:	7804      	ldrb	r4, [r0, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	428c      	cmp	r4, r1
 800bbd2:	d1f6      	bne.n	800bbc2 <memchr+0x8>
 800bbd4:	bd10      	pop	{r4, pc}

0800bbd6 <quorem>:
 800bbd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbda:	6903      	ldr	r3, [r0, #16]
 800bbdc:	4607      	mov	r7, r0
 800bbde:	690c      	ldr	r4, [r1, #16]
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	f2c0 8083 	blt.w	800bcec <quorem+0x116>
 800bbe6:	3c01      	subs	r4, #1
 800bbe8:	f100 0514 	add.w	r5, r0, #20
 800bbec:	f101 0814 	add.w	r8, r1, #20
 800bbf0:	00a3      	lsls	r3, r4, #2
 800bbf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc00:	9301      	str	r3, [sp, #4]
 800bc02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc06:	3301      	adds	r3, #1
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc0e:	d331      	bcc.n	800bc74 <quorem+0x9e>
 800bc10:	f04f 0a00 	mov.w	sl, #0
 800bc14:	46c4      	mov	ip, r8
 800bc16:	46ae      	mov	lr, r5
 800bc18:	46d3      	mov	fp, sl
 800bc1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc1e:	b298      	uxth	r0, r3
 800bc20:	45e1      	cmp	r9, ip
 800bc22:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800bc26:	fb06 a000 	mla	r0, r6, r0, sl
 800bc2a:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800bc2e:	b280      	uxth	r0, r0
 800bc30:	fb06 2303 	mla	r3, r6, r3, r2
 800bc34:	f8de 2000 	ldr.w	r2, [lr]
 800bc38:	b292      	uxth	r2, r2
 800bc3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc3e:	eba2 0200 	sub.w	r2, r2, r0
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	f8de 0000 	ldr.w	r0, [lr]
 800bc48:	445a      	add	r2, fp
 800bc4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc4e:	b292      	uxth	r2, r2
 800bc50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc58:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc5c:	f84e 2b04 	str.w	r2, [lr], #4
 800bc60:	d2db      	bcs.n	800bc1a <quorem+0x44>
 800bc62:	9b00      	ldr	r3, [sp, #0]
 800bc64:	58eb      	ldr	r3, [r5, r3]
 800bc66:	b92b      	cbnz	r3, 800bc74 <quorem+0x9e>
 800bc68:	9b01      	ldr	r3, [sp, #4]
 800bc6a:	3b04      	subs	r3, #4
 800bc6c:	429d      	cmp	r5, r3
 800bc6e:	461a      	mov	r2, r3
 800bc70:	d330      	bcc.n	800bcd4 <quorem+0xfe>
 800bc72:	613c      	str	r4, [r7, #16]
 800bc74:	4638      	mov	r0, r7
 800bc76:	f001 f97b 	bl	800cf70 <__mcmp>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	db26      	blt.n	800bccc <quorem+0xf6>
 800bc7e:	4629      	mov	r1, r5
 800bc80:	2000      	movs	r0, #0
 800bc82:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc86:	f8d1 c000 	ldr.w	ip, [r1]
 800bc8a:	fa1f fe82 	uxth.w	lr, r2
 800bc8e:	45c1      	cmp	r9, r8
 800bc90:	fa1f f38c 	uxth.w	r3, ip
 800bc94:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bc98:	eba3 030e 	sub.w	r3, r3, lr
 800bc9c:	4403      	add	r3, r0
 800bc9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bcb0:	f841 3b04 	str.w	r3, [r1], #4
 800bcb4:	d2e5      	bcs.n	800bc82 <quorem+0xac>
 800bcb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcbe:	b922      	cbnz	r2, 800bcca <quorem+0xf4>
 800bcc0:	3b04      	subs	r3, #4
 800bcc2:	429d      	cmp	r5, r3
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	d30b      	bcc.n	800bce0 <quorem+0x10a>
 800bcc8:	613c      	str	r4, [r7, #16]
 800bcca:	3601      	adds	r6, #1
 800bccc:	4630      	mov	r0, r6
 800bcce:	b003      	add	sp, #12
 800bcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd4:	6812      	ldr	r2, [r2, #0]
 800bcd6:	3b04      	subs	r3, #4
 800bcd8:	2a00      	cmp	r2, #0
 800bcda:	d1ca      	bne.n	800bc72 <quorem+0x9c>
 800bcdc:	3c01      	subs	r4, #1
 800bcde:	e7c5      	b.n	800bc6c <quorem+0x96>
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	3b04      	subs	r3, #4
 800bce4:	2a00      	cmp	r2, #0
 800bce6:	d1ef      	bne.n	800bcc8 <quorem+0xf2>
 800bce8:	3c01      	subs	r4, #1
 800bcea:	e7ea      	b.n	800bcc2 <quorem+0xec>
 800bcec:	2000      	movs	r0, #0
 800bcee:	e7ee      	b.n	800bcce <quorem+0xf8>

0800bcf0 <_dtoa_r>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	69c7      	ldr	r7, [r0, #28]
 800bcf6:	b099      	sub	sp, #100	@ 0x64
 800bcf8:	4683      	mov	fp, r0
 800bcfa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bcfc:	9109      	str	r1, [sp, #36]	@ 0x24
 800bcfe:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd00:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd02:	ec55 4b10 	vmov	r4, r5, d0
 800bd06:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd0a:	b97f      	cbnz	r7, 800bd2c <_dtoa_r+0x3c>
 800bd0c:	2010      	movs	r0, #16
 800bd0e:	f000 fdfd 	bl	800c90c <malloc>
 800bd12:	4602      	mov	r2, r0
 800bd14:	f8cb 001c 	str.w	r0, [fp, #28]
 800bd18:	b920      	cbnz	r0, 800bd24 <_dtoa_r+0x34>
 800bd1a:	4ba7      	ldr	r3, [pc, #668]	@ (800bfb8 <_dtoa_r+0x2c8>)
 800bd1c:	21ef      	movs	r1, #239	@ 0xef
 800bd1e:	48a7      	ldr	r0, [pc, #668]	@ (800bfbc <_dtoa_r+0x2cc>)
 800bd20:	f001 fafc 	bl	800d31c <__assert_func>
 800bd24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd28:	6007      	str	r7, [r0, #0]
 800bd2a:	60c7      	str	r7, [r0, #12]
 800bd2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd30:	6819      	ldr	r1, [r3, #0]
 800bd32:	b159      	cbz	r1, 800bd4c <_dtoa_r+0x5c>
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	2301      	movs	r3, #1
 800bd38:	4658      	mov	r0, fp
 800bd3a:	4093      	lsls	r3, r2
 800bd3c:	604a      	str	r2, [r1, #4]
 800bd3e:	608b      	str	r3, [r1, #8]
 800bd40:	f000 feda 	bl	800caf8 <_Bfree>
 800bd44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	601a      	str	r2, [r3, #0]
 800bd4c:	1e2b      	subs	r3, r5, #0
 800bd4e:	bfb7      	itett	lt
 800bd50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd54:	2300      	movge	r3, #0
 800bd56:	2201      	movlt	r2, #1
 800bd58:	9303      	strlt	r3, [sp, #12]
 800bd5a:	bfa8      	it	ge
 800bd5c:	6033      	strge	r3, [r6, #0]
 800bd5e:	9f03      	ldr	r7, [sp, #12]
 800bd60:	4b97      	ldr	r3, [pc, #604]	@ (800bfc0 <_dtoa_r+0x2d0>)
 800bd62:	bfb8      	it	lt
 800bd64:	6032      	strlt	r2, [r6, #0]
 800bd66:	43bb      	bics	r3, r7
 800bd68:	d112      	bne.n	800bd90 <_dtoa_r+0xa0>
 800bd6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd76:	4323      	orrs	r3, r4
 800bd78:	f000 854c 	beq.w	800c814 <_dtoa_r+0xb24>
 800bd7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd7e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bfd4 <_dtoa_r+0x2e4>
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 854e 	beq.w	800c824 <_dtoa_r+0xb34>
 800bd88:	f10a 0303 	add.w	r3, sl, #3
 800bd8c:	f000 bd48 	b.w	800c820 <_dtoa_r+0xb30>
 800bd90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd94:	2200      	movs	r2, #0
 800bd96:	2300      	movs	r3, #0
 800bd98:	ec51 0b17 	vmov	r0, r1, d7
 800bd9c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bda0:	f7f4 fea2 	bl	8000ae8 <__aeabi_dcmpeq>
 800bda4:	4680      	mov	r8, r0
 800bda6:	b158      	cbz	r0, 800bdc0 <_dtoa_r+0xd0>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdb0:	b113      	cbz	r3, 800bdb8 <_dtoa_r+0xc8>
 800bdb2:	4b84      	ldr	r3, [pc, #528]	@ (800bfc4 <_dtoa_r+0x2d4>)
 800bdb4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800bfd8 <_dtoa_r+0x2e8>
 800bdbc:	f000 bd32 	b.w	800c824 <_dtoa_r+0xb34>
 800bdc0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bdc4:	aa16      	add	r2, sp, #88	@ 0x58
 800bdc6:	a917      	add	r1, sp, #92	@ 0x5c
 800bdc8:	4658      	mov	r0, fp
 800bdca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bdce:	f001 f983 	bl	800d0d8 <__d2b>
 800bdd2:	4681      	mov	r9, r0
 800bdd4:	2e00      	cmp	r6, #0
 800bdd6:	d075      	beq.n	800bec4 <_dtoa_r+0x1d4>
 800bdd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdda:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bdde:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bde2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bde6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bdea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdee:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	4b74      	ldr	r3, [pc, #464]	@ (800bfc8 <_dtoa_r+0x2d8>)
 800bdf8:	f7f4 fa56 	bl	80002a8 <__aeabi_dsub>
 800bdfc:	a368      	add	r3, pc, #416	@ (adr r3, 800bfa0 <_dtoa_r+0x2b0>)
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f7f4 fc09 	bl	8000618 <__aeabi_dmul>
 800be06:	a368      	add	r3, pc, #416	@ (adr r3, 800bfa8 <_dtoa_r+0x2b8>)
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f7f4 fa4e 	bl	80002ac <__adddf3>
 800be10:	4604      	mov	r4, r0
 800be12:	460d      	mov	r5, r1
 800be14:	4630      	mov	r0, r6
 800be16:	f7f4 fb95 	bl	8000544 <__aeabi_i2d>
 800be1a:	a365      	add	r3, pc, #404	@ (adr r3, 800bfb0 <_dtoa_r+0x2c0>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 fbfa 	bl	8000618 <__aeabi_dmul>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4620      	mov	r0, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 fa3e 	bl	80002ac <__adddf3>
 800be30:	4604      	mov	r4, r0
 800be32:	460d      	mov	r5, r1
 800be34:	f7f4 fea0 	bl	8000b78 <__aeabi_d2iz>
 800be38:	2200      	movs	r2, #0
 800be3a:	4607      	mov	r7, r0
 800be3c:	2300      	movs	r3, #0
 800be3e:	4620      	mov	r0, r4
 800be40:	4629      	mov	r1, r5
 800be42:	f7f4 fe5b 	bl	8000afc <__aeabi_dcmplt>
 800be46:	b140      	cbz	r0, 800be5a <_dtoa_r+0x16a>
 800be48:	4638      	mov	r0, r7
 800be4a:	f7f4 fb7b 	bl	8000544 <__aeabi_i2d>
 800be4e:	4622      	mov	r2, r4
 800be50:	462b      	mov	r3, r5
 800be52:	f7f4 fe49 	bl	8000ae8 <__aeabi_dcmpeq>
 800be56:	b900      	cbnz	r0, 800be5a <_dtoa_r+0x16a>
 800be58:	3f01      	subs	r7, #1
 800be5a:	2f16      	cmp	r7, #22
 800be5c:	d851      	bhi.n	800bf02 <_dtoa_r+0x212>
 800be5e:	4b5b      	ldr	r3, [pc, #364]	@ (800bfcc <_dtoa_r+0x2dc>)
 800be60:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	f7f4 fe46 	bl	8000afc <__aeabi_dcmplt>
 800be70:	2800      	cmp	r0, #0
 800be72:	d048      	beq.n	800bf06 <_dtoa_r+0x216>
 800be74:	3f01      	subs	r7, #1
 800be76:	2300      	movs	r3, #0
 800be78:	9312      	str	r3, [sp, #72]	@ 0x48
 800be7a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be7c:	1b9b      	subs	r3, r3, r6
 800be7e:	1e5a      	subs	r2, r3, #1
 800be80:	bf46      	itte	mi
 800be82:	f1c3 0801 	rsbmi	r8, r3, #1
 800be86:	2300      	movmi	r3, #0
 800be88:	f04f 0800 	movpl.w	r8, #0
 800be8c:	9208      	str	r2, [sp, #32]
 800be8e:	bf48      	it	mi
 800be90:	9308      	strmi	r3, [sp, #32]
 800be92:	2f00      	cmp	r7, #0
 800be94:	db39      	blt.n	800bf0a <_dtoa_r+0x21a>
 800be96:	9b08      	ldr	r3, [sp, #32]
 800be98:	970f      	str	r7, [sp, #60]	@ 0x3c
 800be9a:	443b      	add	r3, r7
 800be9c:	9308      	str	r3, [sp, #32]
 800be9e:	2300      	movs	r3, #0
 800bea0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea4:	2b09      	cmp	r3, #9
 800bea6:	d864      	bhi.n	800bf72 <_dtoa_r+0x282>
 800bea8:	2b05      	cmp	r3, #5
 800beaa:	bfc5      	ittet	gt
 800beac:	3b04      	subgt	r3, #4
 800beae:	2400      	movgt	r4, #0
 800beb0:	2401      	movle	r4, #1
 800beb2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800beb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb6:	3b02      	subs	r3, #2
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d865      	bhi.n	800bf88 <_dtoa_r+0x298>
 800bebc:	e8df f003 	tbb	[pc, r3]
 800bec0:	5737392c 	.word	0x5737392c
 800bec4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bec8:	441e      	add	r6, r3
 800beca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bece:	2b20      	cmp	r3, #32
 800bed0:	bfc9      	itett	gt
 800bed2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bed6:	f1c3 0320 	rsble	r3, r3, #32
 800beda:	409f      	lslgt	r7, r3
 800bedc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bee0:	bfd8      	it	le
 800bee2:	fa04 f003 	lslle.w	r0, r4, r3
 800bee6:	f106 36ff 	add.w	r6, r6, #4294967295
 800beea:	bfc4      	itt	gt
 800beec:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bef0:	ea47 0003 	orrgt.w	r0, r7, r3
 800bef4:	f7f4 fb16 	bl	8000524 <__aeabi_ui2d>
 800bef8:	2201      	movs	r2, #1
 800befa:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800befe:	9214      	str	r2, [sp, #80]	@ 0x50
 800bf00:	e777      	b.n	800bdf2 <_dtoa_r+0x102>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e7b8      	b.n	800be78 <_dtoa_r+0x188>
 800bf06:	9012      	str	r0, [sp, #72]	@ 0x48
 800bf08:	e7b7      	b.n	800be7a <_dtoa_r+0x18a>
 800bf0a:	427b      	negs	r3, r7
 800bf0c:	eba8 0807 	sub.w	r8, r8, r7
 800bf10:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf12:	2300      	movs	r3, #0
 800bf14:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf16:	e7c4      	b.n	800bea2 <_dtoa_r+0x1b2>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	dc35      	bgt.n	800bf8e <_dtoa_r+0x29e>
 800bf22:	2301      	movs	r3, #1
 800bf24:	461a      	mov	r2, r3
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	9307      	str	r3, [sp, #28]
 800bf2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf2c:	e00b      	b.n	800bf46 <_dtoa_r+0x256>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e7f3      	b.n	800bf1a <_dtoa_r+0x22a>
 800bf32:	2300      	movs	r3, #0
 800bf34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf38:	18fb      	adds	r3, r7, r3
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	9307      	str	r3, [sp, #28]
 800bf42:	bfb8      	it	lt
 800bf44:	2301      	movlt	r3, #1
 800bf46:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	2204      	movs	r2, #4
 800bf4e:	f102 0514 	add.w	r5, r2, #20
 800bf52:	429d      	cmp	r5, r3
 800bf54:	d91f      	bls.n	800bf96 <_dtoa_r+0x2a6>
 800bf56:	6041      	str	r1, [r0, #4]
 800bf58:	4658      	mov	r0, fp
 800bf5a:	f000 fd8d 	bl	800ca78 <_Balloc>
 800bf5e:	4682      	mov	sl, r0
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d13b      	bne.n	800bfdc <_dtoa_r+0x2ec>
 800bf64:	4b1a      	ldr	r3, [pc, #104]	@ (800bfd0 <_dtoa_r+0x2e0>)
 800bf66:	4602      	mov	r2, r0
 800bf68:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf6c:	e6d7      	b.n	800bd1e <_dtoa_r+0x2e>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e7e0      	b.n	800bf34 <_dtoa_r+0x244>
 800bf72:	2401      	movs	r4, #1
 800bf74:	2300      	movs	r3, #0
 800bf76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf78:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf7e:	2200      	movs	r2, #0
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	9307      	str	r3, [sp, #28]
 800bf84:	2312      	movs	r3, #18
 800bf86:	e7d0      	b.n	800bf2a <_dtoa_r+0x23a>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf8c:	e7f5      	b.n	800bf7a <_dtoa_r+0x28a>
 800bf8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	9307      	str	r3, [sp, #28]
 800bf94:	e7d7      	b.n	800bf46 <_dtoa_r+0x256>
 800bf96:	3101      	adds	r1, #1
 800bf98:	0052      	lsls	r2, r2, #1
 800bf9a:	e7d8      	b.n	800bf4e <_dtoa_r+0x25e>
 800bf9c:	f3af 8000 	nop.w
 800bfa0:	636f4361 	.word	0x636f4361
 800bfa4:	3fd287a7 	.word	0x3fd287a7
 800bfa8:	8b60c8b3 	.word	0x8b60c8b3
 800bfac:	3fc68a28 	.word	0x3fc68a28
 800bfb0:	509f79fb 	.word	0x509f79fb
 800bfb4:	3fd34413 	.word	0x3fd34413
 800bfb8:	0800da9d 	.word	0x0800da9d
 800bfbc:	0800dab4 	.word	0x0800dab4
 800bfc0:	7ff00000 	.word	0x7ff00000
 800bfc4:	0800da6d 	.word	0x0800da6d
 800bfc8:	3ff80000 	.word	0x3ff80000
 800bfcc:	0800dbb0 	.word	0x0800dbb0
 800bfd0:	0800db0c 	.word	0x0800db0c
 800bfd4:	0800da99 	.word	0x0800da99
 800bfd8:	0800da6c 	.word	0x0800da6c
 800bfdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfe0:	6018      	str	r0, [r3, #0]
 800bfe2:	9b07      	ldr	r3, [sp, #28]
 800bfe4:	2b0e      	cmp	r3, #14
 800bfe6:	f200 80a4 	bhi.w	800c132 <_dtoa_r+0x442>
 800bfea:	2c00      	cmp	r4, #0
 800bfec:	f000 80a1 	beq.w	800c132 <_dtoa_r+0x442>
 800bff0:	2f00      	cmp	r7, #0
 800bff2:	dd33      	ble.n	800c05c <_dtoa_r+0x36c>
 800bff4:	f007 020f 	and.w	r2, r7, #15
 800bff8:	4bac      	ldr	r3, [pc, #688]	@ (800c2ac <_dtoa_r+0x5bc>)
 800bffa:	05f8      	lsls	r0, r7, #23
 800bffc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c004:	ed93 7b00 	vldr	d7, [r3]
 800c008:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c00c:	d516      	bpl.n	800c03c <_dtoa_r+0x34c>
 800c00e:	4ba8      	ldr	r3, [pc, #672]	@ (800c2b0 <_dtoa_r+0x5c0>)
 800c010:	f004 040f 	and.w	r4, r4, #15
 800c014:	2603      	movs	r6, #3
 800c016:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c01a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c01e:	f7f4 fc25 	bl	800086c <__aeabi_ddiv>
 800c022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c026:	4da2      	ldr	r5, [pc, #648]	@ (800c2b0 <_dtoa_r+0x5c0>)
 800c028:	b954      	cbnz	r4, 800c040 <_dtoa_r+0x350>
 800c02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c032:	f7f4 fc1b 	bl	800086c <__aeabi_ddiv>
 800c036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c03a:	e028      	b.n	800c08e <_dtoa_r+0x39e>
 800c03c:	2602      	movs	r6, #2
 800c03e:	e7f2      	b.n	800c026 <_dtoa_r+0x336>
 800c040:	07e1      	lsls	r1, r4, #31
 800c042:	d508      	bpl.n	800c056 <_dtoa_r+0x366>
 800c044:	3601      	adds	r6, #1
 800c046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c04a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c04e:	f7f4 fae3 	bl	8000618 <__aeabi_dmul>
 800c052:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c056:	1064      	asrs	r4, r4, #1
 800c058:	3508      	adds	r5, #8
 800c05a:	e7e5      	b.n	800c028 <_dtoa_r+0x338>
 800c05c:	f000 80d2 	beq.w	800c204 <_dtoa_r+0x514>
 800c060:	427c      	negs	r4, r7
 800c062:	4b92      	ldr	r3, [pc, #584]	@ (800c2ac <_dtoa_r+0x5bc>)
 800c064:	4d92      	ldr	r5, [pc, #584]	@ (800c2b0 <_dtoa_r+0x5c0>)
 800c066:	2602      	movs	r6, #2
 800c068:	f004 020f 	and.w	r2, r4, #15
 800c06c:	1124      	asrs	r4, r4, #4
 800c06e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07a:	f7f4 facd 	bl	8000618 <__aeabi_dmul>
 800c07e:	2300      	movs	r3, #0
 800c080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c084:	2c00      	cmp	r4, #0
 800c086:	f040 80b2 	bne.w	800c1ee <_dtoa_r+0x4fe>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1d3      	bne.n	800c036 <_dtoa_r+0x346>
 800c08e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c090:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 80b7 	beq.w	800c208 <_dtoa_r+0x518>
 800c09a:	2200      	movs	r2, #0
 800c09c:	4b85      	ldr	r3, [pc, #532]	@ (800c2b4 <_dtoa_r+0x5c4>)
 800c09e:	4620      	mov	r0, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fd2b 	bl	8000afc <__aeabi_dcmplt>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	f000 80ae 	beq.w	800c208 <_dtoa_r+0x518>
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 80aa 	beq.w	800c208 <_dtoa_r+0x518>
 800c0b4:	9b00      	ldr	r3, [sp, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	dd37      	ble.n	800c12a <_dtoa_r+0x43a>
 800c0ba:	1e7b      	subs	r3, r7, #1
 800c0bc:	4620      	mov	r0, r4
 800c0be:	2200      	movs	r2, #0
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	9304      	str	r3, [sp, #16]
 800c0c4:	3601      	adds	r6, #1
 800c0c6:	4b7c      	ldr	r3, [pc, #496]	@ (800c2b8 <_dtoa_r+0x5c8>)
 800c0c8:	f7f4 faa6 	bl	8000618 <__aeabi_dmul>
 800c0cc:	9c00      	ldr	r4, [sp, #0]
 800c0ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7f4 fa36 	bl	8000544 <__aeabi_i2d>
 800c0d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0dc:	f7f4 fa9c 	bl	8000618 <__aeabi_dmul>
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	4b76      	ldr	r3, [pc, #472]	@ (800c2bc <_dtoa_r+0x5cc>)
 800c0e4:	f7f4 f8e2 	bl	80002ac <__adddf3>
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c0ee:	2c00      	cmp	r4, #0
 800c0f0:	f040 808d 	bne.w	800c20e <_dtoa_r+0x51e>
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	4b72      	ldr	r3, [pc, #456]	@ (800c2c0 <_dtoa_r+0x5d0>)
 800c0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fc:	f7f4 f8d4 	bl	80002a8 <__aeabi_dsub>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c108:	462a      	mov	r2, r5
 800c10a:	4633      	mov	r3, r6
 800c10c:	f7f4 fd14 	bl	8000b38 <__aeabi_dcmpgt>
 800c110:	2800      	cmp	r0, #0
 800c112:	f040 828b 	bne.w	800c62c <_dtoa_r+0x93c>
 800c116:	462a      	mov	r2, r5
 800c118:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c120:	f7f4 fcec 	bl	8000afc <__aeabi_dcmplt>
 800c124:	2800      	cmp	r0, #0
 800c126:	f040 8128 	bne.w	800c37a <_dtoa_r+0x68a>
 800c12a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c12e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c132:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c134:	2b00      	cmp	r3, #0
 800c136:	f2c0 815a 	blt.w	800c3ee <_dtoa_r+0x6fe>
 800c13a:	2f0e      	cmp	r7, #14
 800c13c:	f300 8157 	bgt.w	800c3ee <_dtoa_r+0x6fe>
 800c140:	4b5a      	ldr	r3, [pc, #360]	@ (800c2ac <_dtoa_r+0x5bc>)
 800c142:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c146:	ed93 7b00 	vldr	d7, [r3]
 800c14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	ed8d 7b00 	vstr	d7, [sp]
 800c152:	da03      	bge.n	800c15c <_dtoa_r+0x46c>
 800c154:	9b07      	ldr	r3, [sp, #28]
 800c156:	2b00      	cmp	r3, #0
 800c158:	f340 8101 	ble.w	800c35e <_dtoa_r+0x66e>
 800c15c:	4656      	mov	r6, sl
 800c15e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c162:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c166:	4620      	mov	r0, r4
 800c168:	4629      	mov	r1, r5
 800c16a:	f7f4 fb7f 	bl	800086c <__aeabi_ddiv>
 800c16e:	f7f4 fd03 	bl	8000b78 <__aeabi_d2iz>
 800c172:	4680      	mov	r8, r0
 800c174:	f7f4 f9e6 	bl	8000544 <__aeabi_i2d>
 800c178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c17c:	f7f4 fa4c 	bl	8000618 <__aeabi_dmul>
 800c180:	4602      	mov	r2, r0
 800c182:	4620      	mov	r0, r4
 800c184:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c188:	460b      	mov	r3, r1
 800c18a:	4629      	mov	r1, r5
 800c18c:	f7f4 f88c 	bl	80002a8 <__aeabi_dsub>
 800c190:	9d07      	ldr	r5, [sp, #28]
 800c192:	f806 4b01 	strb.w	r4, [r6], #1
 800c196:	eba6 040a 	sub.w	r4, r6, sl
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	42a5      	cmp	r5, r4
 800c1a0:	f040 8117 	bne.w	800c3d2 <_dtoa_r+0x6e2>
 800c1a4:	f7f4 f882 	bl	80002ac <__adddf3>
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1b0:	f7f4 fcc2 	bl	8000b38 <__aeabi_dcmpgt>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f040 80f9 	bne.w	800c3ac <_dtoa_r+0x6bc>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	4629      	mov	r1, r5
 800c1be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1c2:	f7f4 fc91 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1c6:	b118      	cbz	r0, 800c1d0 <_dtoa_r+0x4e0>
 800c1c8:	f018 0f01 	tst.w	r8, #1
 800c1cc:	f040 80ee 	bne.w	800c3ac <_dtoa_r+0x6bc>
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	4658      	mov	r0, fp
 800c1d4:	f000 fc90 	bl	800caf8 <_Bfree>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	3701      	adds	r7, #1
 800c1dc:	7033      	strb	r3, [r6, #0]
 800c1de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1e0:	601f      	str	r7, [r3, #0]
 800c1e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 831d 	beq.w	800c824 <_dtoa_r+0xb34>
 800c1ea:	601e      	str	r6, [r3, #0]
 800c1ec:	e31a      	b.n	800c824 <_dtoa_r+0xb34>
 800c1ee:	07e2      	lsls	r2, r4, #31
 800c1f0:	d505      	bpl.n	800c1fe <_dtoa_r+0x50e>
 800c1f2:	3601      	adds	r6, #1
 800c1f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1f8:	f7f4 fa0e 	bl	8000618 <__aeabi_dmul>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	1064      	asrs	r4, r4, #1
 800c200:	3508      	adds	r5, #8
 800c202:	e73f      	b.n	800c084 <_dtoa_r+0x394>
 800c204:	2602      	movs	r6, #2
 800c206:	e742      	b.n	800c08e <_dtoa_r+0x39e>
 800c208:	9c07      	ldr	r4, [sp, #28]
 800c20a:	9704      	str	r7, [sp, #16]
 800c20c:	e761      	b.n	800c0d2 <_dtoa_r+0x3e2>
 800c20e:	4b27      	ldr	r3, [pc, #156]	@ (800c2ac <_dtoa_r+0x5bc>)
 800c210:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c216:	4454      	add	r4, sl
 800c218:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d053      	beq.n	800c2c8 <_dtoa_r+0x5d8>
 800c220:	2000      	movs	r0, #0
 800c222:	4928      	ldr	r1, [pc, #160]	@ (800c2c4 <_dtoa_r+0x5d4>)
 800c224:	f7f4 fb22 	bl	800086c <__aeabi_ddiv>
 800c228:	4633      	mov	r3, r6
 800c22a:	4656      	mov	r6, sl
 800c22c:	462a      	mov	r2, r5
 800c22e:	f7f4 f83b 	bl	80002a8 <__aeabi_dsub>
 800c232:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c23a:	f7f4 fc9d 	bl	8000b78 <__aeabi_d2iz>
 800c23e:	4605      	mov	r5, r0
 800c240:	f7f4 f980 	bl	8000544 <__aeabi_i2d>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	3530      	adds	r5, #48	@ 0x30
 800c24a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c24e:	f7f4 f82b 	bl	80002a8 <__aeabi_dsub>
 800c252:	4602      	mov	r2, r0
 800c254:	460b      	mov	r3, r1
 800c256:	f806 5b01 	strb.w	r5, [r6], #1
 800c25a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c25e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c262:	f7f4 fc4b 	bl	8000afc <__aeabi_dcmplt>
 800c266:	2800      	cmp	r0, #0
 800c268:	d171      	bne.n	800c34e <_dtoa_r+0x65e>
 800c26a:	2000      	movs	r0, #0
 800c26c:	4911      	ldr	r1, [pc, #68]	@ (800c2b4 <_dtoa_r+0x5c4>)
 800c26e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c272:	f7f4 f819 	bl	80002a8 <__aeabi_dsub>
 800c276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c27a:	f7f4 fc3f 	bl	8000afc <__aeabi_dcmplt>
 800c27e:	2800      	cmp	r0, #0
 800c280:	f040 8095 	bne.w	800c3ae <_dtoa_r+0x6be>
 800c284:	42a6      	cmp	r6, r4
 800c286:	f43f af50 	beq.w	800c12a <_dtoa_r+0x43a>
 800c28a:	2200      	movs	r2, #0
 800c28c:	4b0a      	ldr	r3, [pc, #40]	@ (800c2b8 <_dtoa_r+0x5c8>)
 800c28e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c292:	f7f4 f9c1 	bl	8000618 <__aeabi_dmul>
 800c296:	2200      	movs	r2, #0
 800c298:	4b07      	ldr	r3, [pc, #28]	@ (800c2b8 <_dtoa_r+0x5c8>)
 800c29a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2a2:	f7f4 f9b9 	bl	8000618 <__aeabi_dmul>
 800c2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2aa:	e7c4      	b.n	800c236 <_dtoa_r+0x546>
 800c2ac:	0800dbb0 	.word	0x0800dbb0
 800c2b0:	0800db88 	.word	0x0800db88
 800c2b4:	3ff00000 	.word	0x3ff00000
 800c2b8:	40240000 	.word	0x40240000
 800c2bc:	401c0000 	.word	0x401c0000
 800c2c0:	40140000 	.word	0x40140000
 800c2c4:	3fe00000 	.word	0x3fe00000
 800c2c8:	4631      	mov	r1, r6
 800c2ca:	4656      	mov	r6, sl
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f7f4 f9a3 	bl	8000618 <__aeabi_dmul>
 800c2d2:	9415      	str	r4, [sp, #84]	@ 0x54
 800c2d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2dc:	f7f4 fc4c 	bl	8000b78 <__aeabi_d2iz>
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	f7f4 f92f 	bl	8000544 <__aeabi_i2d>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	3530      	adds	r5, #48	@ 0x30
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2f0:	f7f3 ffda 	bl	80002a8 <__aeabi_dsub>
 800c2f4:	f806 5b01 	strb.w	r5, [r6], #1
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	42a6      	cmp	r6, r4
 800c2fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c302:	f04f 0200 	mov.w	r2, #0
 800c306:	d124      	bne.n	800c352 <_dtoa_r+0x662>
 800c308:	4bac      	ldr	r3, [pc, #688]	@ (800c5bc <_dtoa_r+0x8cc>)
 800c30a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c30e:	f7f3 ffcd 	bl	80002ac <__adddf3>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c31a:	f7f4 fc0d 	bl	8000b38 <__aeabi_dcmpgt>
 800c31e:	2800      	cmp	r0, #0
 800c320:	d145      	bne.n	800c3ae <_dtoa_r+0x6be>
 800c322:	2000      	movs	r0, #0
 800c324:	49a5      	ldr	r1, [pc, #660]	@ (800c5bc <_dtoa_r+0x8cc>)
 800c326:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c32a:	f7f3 ffbd 	bl	80002a8 <__aeabi_dsub>
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c336:	f7f4 fbe1 	bl	8000afc <__aeabi_dcmplt>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	f43f aef5 	beq.w	800c12a <_dtoa_r+0x43a>
 800c340:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c342:	1e73      	subs	r3, r6, #1
 800c344:	9315      	str	r3, [sp, #84]	@ 0x54
 800c346:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c34a:	2b30      	cmp	r3, #48	@ 0x30
 800c34c:	d0f8      	beq.n	800c340 <_dtoa_r+0x650>
 800c34e:	9f04      	ldr	r7, [sp, #16]
 800c350:	e73e      	b.n	800c1d0 <_dtoa_r+0x4e0>
 800c352:	4b9b      	ldr	r3, [pc, #620]	@ (800c5c0 <_dtoa_r+0x8d0>)
 800c354:	f7f4 f960 	bl	8000618 <__aeabi_dmul>
 800c358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c35c:	e7bc      	b.n	800c2d8 <_dtoa_r+0x5e8>
 800c35e:	d10c      	bne.n	800c37a <_dtoa_r+0x68a>
 800c360:	2200      	movs	r2, #0
 800c362:	4b98      	ldr	r3, [pc, #608]	@ (800c5c4 <_dtoa_r+0x8d4>)
 800c364:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c368:	f7f4 f956 	bl	8000618 <__aeabi_dmul>
 800c36c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c370:	f7f4 fbd8 	bl	8000b24 <__aeabi_dcmpge>
 800c374:	2800      	cmp	r0, #0
 800c376:	f000 8157 	beq.w	800c628 <_dtoa_r+0x938>
 800c37a:	2400      	movs	r4, #0
 800c37c:	4625      	mov	r5, r4
 800c37e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c380:	4656      	mov	r6, sl
 800c382:	43db      	mvns	r3, r3
 800c384:	9304      	str	r3, [sp, #16]
 800c386:	2700      	movs	r7, #0
 800c388:	4621      	mov	r1, r4
 800c38a:	4658      	mov	r0, fp
 800c38c:	f000 fbb4 	bl	800caf8 <_Bfree>
 800c390:	2d00      	cmp	r5, #0
 800c392:	d0dc      	beq.n	800c34e <_dtoa_r+0x65e>
 800c394:	b12f      	cbz	r7, 800c3a2 <_dtoa_r+0x6b2>
 800c396:	42af      	cmp	r7, r5
 800c398:	d003      	beq.n	800c3a2 <_dtoa_r+0x6b2>
 800c39a:	4639      	mov	r1, r7
 800c39c:	4658      	mov	r0, fp
 800c39e:	f000 fbab 	bl	800caf8 <_Bfree>
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	4658      	mov	r0, fp
 800c3a6:	f000 fba7 	bl	800caf8 <_Bfree>
 800c3aa:	e7d0      	b.n	800c34e <_dtoa_r+0x65e>
 800c3ac:	9704      	str	r7, [sp, #16]
 800c3ae:	4633      	mov	r3, r6
 800c3b0:	461e      	mov	r6, r3
 800c3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3b6:	2a39      	cmp	r2, #57	@ 0x39
 800c3b8:	d107      	bne.n	800c3ca <_dtoa_r+0x6da>
 800c3ba:	459a      	cmp	sl, r3
 800c3bc:	d1f8      	bne.n	800c3b0 <_dtoa_r+0x6c0>
 800c3be:	9a04      	ldr	r2, [sp, #16]
 800c3c0:	3201      	adds	r2, #1
 800c3c2:	9204      	str	r2, [sp, #16]
 800c3c4:	2230      	movs	r2, #48	@ 0x30
 800c3c6:	f88a 2000 	strb.w	r2, [sl]
 800c3ca:	781a      	ldrb	r2, [r3, #0]
 800c3cc:	3201      	adds	r2, #1
 800c3ce:	701a      	strb	r2, [r3, #0]
 800c3d0:	e7bd      	b.n	800c34e <_dtoa_r+0x65e>
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4b7a      	ldr	r3, [pc, #488]	@ (800c5c0 <_dtoa_r+0x8d0>)
 800c3d6:	f7f4 f91f 	bl	8000618 <__aeabi_dmul>
 800c3da:	2200      	movs	r2, #0
 800c3dc:	2300      	movs	r3, #0
 800c3de:	4604      	mov	r4, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	f7f4 fb81 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f43f aebb 	beq.w	800c162 <_dtoa_r+0x472>
 800c3ec:	e6f0      	b.n	800c1d0 <_dtoa_r+0x4e0>
 800c3ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c3f0:	2a00      	cmp	r2, #0
 800c3f2:	f000 80db 	beq.w	800c5ac <_dtoa_r+0x8bc>
 800c3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3f8:	2a01      	cmp	r2, #1
 800c3fa:	f300 80bf 	bgt.w	800c57c <_dtoa_r+0x88c>
 800c3fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c400:	2a00      	cmp	r2, #0
 800c402:	f000 80b7 	beq.w	800c574 <_dtoa_r+0x884>
 800c406:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c40a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c40c:	4646      	mov	r6, r8
 800c40e:	9a08      	ldr	r2, [sp, #32]
 800c410:	2101      	movs	r1, #1
 800c412:	4658      	mov	r0, fp
 800c414:	4498      	add	r8, r3
 800c416:	441a      	add	r2, r3
 800c418:	9208      	str	r2, [sp, #32]
 800c41a:	f000 fc23 	bl	800cc64 <__i2b>
 800c41e:	4605      	mov	r5, r0
 800c420:	b15e      	cbz	r6, 800c43a <_dtoa_r+0x74a>
 800c422:	9b08      	ldr	r3, [sp, #32]
 800c424:	2b00      	cmp	r3, #0
 800c426:	dd08      	ble.n	800c43a <_dtoa_r+0x74a>
 800c428:	42b3      	cmp	r3, r6
 800c42a:	9a08      	ldr	r2, [sp, #32]
 800c42c:	bfa8      	it	ge
 800c42e:	4633      	movge	r3, r6
 800c430:	eba8 0803 	sub.w	r8, r8, r3
 800c434:	1af6      	subs	r6, r6, r3
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	9308      	str	r3, [sp, #32]
 800c43a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c43c:	b1f3      	cbz	r3, 800c47c <_dtoa_r+0x78c>
 800c43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c440:	2b00      	cmp	r3, #0
 800c442:	f000 80b7 	beq.w	800c5b4 <_dtoa_r+0x8c4>
 800c446:	b18c      	cbz	r4, 800c46c <_dtoa_r+0x77c>
 800c448:	4629      	mov	r1, r5
 800c44a:	4622      	mov	r2, r4
 800c44c:	4658      	mov	r0, fp
 800c44e:	f000 fcc9 	bl	800cde4 <__pow5mult>
 800c452:	464a      	mov	r2, r9
 800c454:	4601      	mov	r1, r0
 800c456:	4605      	mov	r5, r0
 800c458:	4658      	mov	r0, fp
 800c45a:	f000 fc19 	bl	800cc90 <__multiply>
 800c45e:	4649      	mov	r1, r9
 800c460:	9004      	str	r0, [sp, #16]
 800c462:	4658      	mov	r0, fp
 800c464:	f000 fb48 	bl	800caf8 <_Bfree>
 800c468:	9b04      	ldr	r3, [sp, #16]
 800c46a:	4699      	mov	r9, r3
 800c46c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c46e:	1b1a      	subs	r2, r3, r4
 800c470:	d004      	beq.n	800c47c <_dtoa_r+0x78c>
 800c472:	4649      	mov	r1, r9
 800c474:	4658      	mov	r0, fp
 800c476:	f000 fcb5 	bl	800cde4 <__pow5mult>
 800c47a:	4681      	mov	r9, r0
 800c47c:	2101      	movs	r1, #1
 800c47e:	4658      	mov	r0, fp
 800c480:	f000 fbf0 	bl	800cc64 <__i2b>
 800c484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c486:	4604      	mov	r4, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 81cf 	beq.w	800c82c <_dtoa_r+0xb3c>
 800c48e:	461a      	mov	r2, r3
 800c490:	4601      	mov	r1, r0
 800c492:	4658      	mov	r0, fp
 800c494:	f000 fca6 	bl	800cde4 <__pow5mult>
 800c498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c49a:	4604      	mov	r4, r0
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	f300 8095 	bgt.w	800c5cc <_dtoa_r+0x8dc>
 800c4a2:	9b02      	ldr	r3, [sp, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f040 8087 	bne.w	800c5b8 <_dtoa_r+0x8c8>
 800c4aa:	9b03      	ldr	r3, [sp, #12]
 800c4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f040 8089 	bne.w	800c5c8 <_dtoa_r+0x8d8>
 800c4b6:	9b03      	ldr	r3, [sp, #12]
 800c4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4bc:	0d1b      	lsrs	r3, r3, #20
 800c4be:	051b      	lsls	r3, r3, #20
 800c4c0:	b12b      	cbz	r3, 800c4ce <_dtoa_r+0x7de>
 800c4c2:	9b08      	ldr	r3, [sp, #32]
 800c4c4:	f108 0801 	add.w	r8, r8, #1
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	9308      	str	r3, [sp, #32]
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f000 81b0 	beq.w	800c838 <_dtoa_r+0xb48>
 800c4d8:	6923      	ldr	r3, [r4, #16]
 800c4da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4de:	6918      	ldr	r0, [r3, #16]
 800c4e0:	f000 fb74 	bl	800cbcc <__hi0bits>
 800c4e4:	f1c0 0020 	rsb	r0, r0, #32
 800c4e8:	9b08      	ldr	r3, [sp, #32]
 800c4ea:	4418      	add	r0, r3
 800c4ec:	f010 001f 	ands.w	r0, r0, #31
 800c4f0:	d077      	beq.n	800c5e2 <_dtoa_r+0x8f2>
 800c4f2:	f1c0 0320 	rsb	r3, r0, #32
 800c4f6:	2b04      	cmp	r3, #4
 800c4f8:	dd6b      	ble.n	800c5d2 <_dtoa_r+0x8e2>
 800c4fa:	f1c0 001c 	rsb	r0, r0, #28
 800c4fe:	9b08      	ldr	r3, [sp, #32]
 800c500:	4480      	add	r8, r0
 800c502:	4403      	add	r3, r0
 800c504:	4406      	add	r6, r0
 800c506:	9308      	str	r3, [sp, #32]
 800c508:	f1b8 0f00 	cmp.w	r8, #0
 800c50c:	dd05      	ble.n	800c51a <_dtoa_r+0x82a>
 800c50e:	4649      	mov	r1, r9
 800c510:	4642      	mov	r2, r8
 800c512:	4658      	mov	r0, fp
 800c514:	f000 fcc0 	bl	800ce98 <__lshift>
 800c518:	4681      	mov	r9, r0
 800c51a:	9b08      	ldr	r3, [sp, #32]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	dd05      	ble.n	800c52c <_dtoa_r+0x83c>
 800c520:	4621      	mov	r1, r4
 800c522:	461a      	mov	r2, r3
 800c524:	4658      	mov	r0, fp
 800c526:	f000 fcb7 	bl	800ce98 <__lshift>
 800c52a:	4604      	mov	r4, r0
 800c52c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d059      	beq.n	800c5e6 <_dtoa_r+0x8f6>
 800c532:	4621      	mov	r1, r4
 800c534:	4648      	mov	r0, r9
 800c536:	f000 fd1b 	bl	800cf70 <__mcmp>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	da53      	bge.n	800c5e6 <_dtoa_r+0x8f6>
 800c53e:	1e7b      	subs	r3, r7, #1
 800c540:	4649      	mov	r1, r9
 800c542:	220a      	movs	r2, #10
 800c544:	4658      	mov	r0, fp
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	2300      	movs	r3, #0
 800c54a:	f000 faf7 	bl	800cb3c <__multadd>
 800c54e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c550:	4681      	mov	r9, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 8172 	beq.w	800c83c <_dtoa_r+0xb4c>
 800c558:	2300      	movs	r3, #0
 800c55a:	4629      	mov	r1, r5
 800c55c:	220a      	movs	r2, #10
 800c55e:	4658      	mov	r0, fp
 800c560:	f000 faec 	bl	800cb3c <__multadd>
 800c564:	9b00      	ldr	r3, [sp, #0]
 800c566:	4605      	mov	r5, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	dc67      	bgt.n	800c63c <_dtoa_r+0x94c>
 800c56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c56e:	2b02      	cmp	r3, #2
 800c570:	dc41      	bgt.n	800c5f6 <_dtoa_r+0x906>
 800c572:	e063      	b.n	800c63c <_dtoa_r+0x94c>
 800c574:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c576:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c57a:	e746      	b.n	800c40a <_dtoa_r+0x71a>
 800c57c:	9b07      	ldr	r3, [sp, #28]
 800c57e:	1e5c      	subs	r4, r3, #1
 800c580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c582:	42a3      	cmp	r3, r4
 800c584:	bfb7      	itett	lt
 800c586:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c588:	1b1c      	subge	r4, r3, r4
 800c58a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c58c:	1ae3      	sublt	r3, r4, r3
 800c58e:	bfbe      	ittt	lt
 800c590:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c592:	2400      	movlt	r4, #0
 800c594:	18d2      	addlt	r2, r2, r3
 800c596:	9b07      	ldr	r3, [sp, #28]
 800c598:	bfb8      	it	lt
 800c59a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bfb5      	itete	lt
 800c5a0:	eba8 0603 	sublt.w	r6, r8, r3
 800c5a4:	4646      	movge	r6, r8
 800c5a6:	2300      	movlt	r3, #0
 800c5a8:	9b07      	ldrge	r3, [sp, #28]
 800c5aa:	e730      	b.n	800c40e <_dtoa_r+0x71e>
 800c5ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c5ae:	4646      	mov	r6, r8
 800c5b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c5b2:	e735      	b.n	800c420 <_dtoa_r+0x730>
 800c5b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5b6:	e75c      	b.n	800c472 <_dtoa_r+0x782>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e788      	b.n	800c4ce <_dtoa_r+0x7de>
 800c5bc:	3fe00000 	.word	0x3fe00000
 800c5c0:	40240000 	.word	0x40240000
 800c5c4:	40140000 	.word	0x40140000
 800c5c8:	9b02      	ldr	r3, [sp, #8]
 800c5ca:	e780      	b.n	800c4ce <_dtoa_r+0x7de>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5d0:	e782      	b.n	800c4d8 <_dtoa_r+0x7e8>
 800c5d2:	d099      	beq.n	800c508 <_dtoa_r+0x818>
 800c5d4:	331c      	adds	r3, #28
 800c5d6:	9a08      	ldr	r2, [sp, #32]
 800c5d8:	441a      	add	r2, r3
 800c5da:	4498      	add	r8, r3
 800c5dc:	441e      	add	r6, r3
 800c5de:	9208      	str	r2, [sp, #32]
 800c5e0:	e792      	b.n	800c508 <_dtoa_r+0x818>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	e7f6      	b.n	800c5d4 <_dtoa_r+0x8e4>
 800c5e6:	9b07      	ldr	r3, [sp, #28]
 800c5e8:	9704      	str	r7, [sp, #16]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dc20      	bgt.n	800c630 <_dtoa_r+0x940>
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	dd1e      	ble.n	800c634 <_dtoa_r+0x944>
 800c5f6:	9b00      	ldr	r3, [sp, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f47f aec0 	bne.w	800c37e <_dtoa_r+0x68e>
 800c5fe:	4621      	mov	r1, r4
 800c600:	2205      	movs	r2, #5
 800c602:	4658      	mov	r0, fp
 800c604:	f000 fa9a 	bl	800cb3c <__multadd>
 800c608:	4601      	mov	r1, r0
 800c60a:	4604      	mov	r4, r0
 800c60c:	4648      	mov	r0, r9
 800c60e:	f000 fcaf 	bl	800cf70 <__mcmp>
 800c612:	2800      	cmp	r0, #0
 800c614:	f77f aeb3 	ble.w	800c37e <_dtoa_r+0x68e>
 800c618:	2331      	movs	r3, #49	@ 0x31
 800c61a:	4656      	mov	r6, sl
 800c61c:	f806 3b01 	strb.w	r3, [r6], #1
 800c620:	9b04      	ldr	r3, [sp, #16]
 800c622:	3301      	adds	r3, #1
 800c624:	9304      	str	r3, [sp, #16]
 800c626:	e6ae      	b.n	800c386 <_dtoa_r+0x696>
 800c628:	9c07      	ldr	r4, [sp, #28]
 800c62a:	9704      	str	r7, [sp, #16]
 800c62c:	4625      	mov	r5, r4
 800c62e:	e7f3      	b.n	800c618 <_dtoa_r+0x928>
 800c630:	9b07      	ldr	r3, [sp, #28]
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 8104 	beq.w	800c844 <_dtoa_r+0xb54>
 800c63c:	2e00      	cmp	r6, #0
 800c63e:	dd05      	ble.n	800c64c <_dtoa_r+0x95c>
 800c640:	4629      	mov	r1, r5
 800c642:	4632      	mov	r2, r6
 800c644:	4658      	mov	r0, fp
 800c646:	f000 fc27 	bl	800ce98 <__lshift>
 800c64a:	4605      	mov	r5, r0
 800c64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d05a      	beq.n	800c708 <_dtoa_r+0xa18>
 800c652:	6869      	ldr	r1, [r5, #4]
 800c654:	4658      	mov	r0, fp
 800c656:	f000 fa0f 	bl	800ca78 <_Balloc>
 800c65a:	4606      	mov	r6, r0
 800c65c:	b928      	cbnz	r0, 800c66a <_dtoa_r+0x97a>
 800c65e:	4b84      	ldr	r3, [pc, #528]	@ (800c870 <_dtoa_r+0xb80>)
 800c660:	4602      	mov	r2, r0
 800c662:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c666:	f7ff bb5a 	b.w	800bd1e <_dtoa_r+0x2e>
 800c66a:	692a      	ldr	r2, [r5, #16]
 800c66c:	f105 010c 	add.w	r1, r5, #12
 800c670:	300c      	adds	r0, #12
 800c672:	3202      	adds	r2, #2
 800c674:	0092      	lsls	r2, r2, #2
 800c676:	f000 fe43 	bl	800d300 <memcpy>
 800c67a:	2201      	movs	r2, #1
 800c67c:	4631      	mov	r1, r6
 800c67e:	4658      	mov	r0, fp
 800c680:	f000 fc0a 	bl	800ce98 <__lshift>
 800c684:	f10a 0301 	add.w	r3, sl, #1
 800c688:	462f      	mov	r7, r5
 800c68a:	4605      	mov	r5, r0
 800c68c:	9307      	str	r3, [sp, #28]
 800c68e:	9b00      	ldr	r3, [sp, #0]
 800c690:	4453      	add	r3, sl
 800c692:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c694:	9b02      	ldr	r3, [sp, #8]
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c69c:	9b07      	ldr	r3, [sp, #28]
 800c69e:	4621      	mov	r1, r4
 800c6a0:	4648      	mov	r0, r9
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	f7ff fa96 	bl	800bbd6 <quorem>
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	9002      	str	r0, [sp, #8]
 800c6ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c6b2:	4648      	mov	r0, r9
 800c6b4:	f000 fc5c 	bl	800cf70 <__mcmp>
 800c6b8:	462a      	mov	r2, r5
 800c6ba:	9008      	str	r0, [sp, #32]
 800c6bc:	4621      	mov	r1, r4
 800c6be:	4658      	mov	r0, fp
 800c6c0:	f000 fc72 	bl	800cfa8 <__mdiff>
 800c6c4:	68c2      	ldr	r2, [r0, #12]
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	bb02      	cbnz	r2, 800c70c <_dtoa_r+0xa1c>
 800c6ca:	4601      	mov	r1, r0
 800c6cc:	4648      	mov	r0, r9
 800c6ce:	f000 fc4f 	bl	800cf70 <__mcmp>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	4631      	mov	r1, r6
 800c6d6:	4658      	mov	r0, fp
 800c6d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6da:	f000 fa0d 	bl	800caf8 <_Bfree>
 800c6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6e2:	9e07      	ldr	r6, [sp, #28]
 800c6e4:	ea43 0102 	orr.w	r1, r3, r2
 800c6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ea:	4319      	orrs	r1, r3
 800c6ec:	d110      	bne.n	800c710 <_dtoa_r+0xa20>
 800c6ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6f2:	d029      	beq.n	800c748 <_dtoa_r+0xa58>
 800c6f4:	9b08      	ldr	r3, [sp, #32]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dd02      	ble.n	800c700 <_dtoa_r+0xa10>
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c700:	9b00      	ldr	r3, [sp, #0]
 800c702:	f883 8000 	strb.w	r8, [r3]
 800c706:	e63f      	b.n	800c388 <_dtoa_r+0x698>
 800c708:	4628      	mov	r0, r5
 800c70a:	e7bb      	b.n	800c684 <_dtoa_r+0x994>
 800c70c:	2201      	movs	r2, #1
 800c70e:	e7e1      	b.n	800c6d4 <_dtoa_r+0x9e4>
 800c710:	9b08      	ldr	r3, [sp, #32]
 800c712:	2b00      	cmp	r3, #0
 800c714:	db04      	blt.n	800c720 <_dtoa_r+0xa30>
 800c716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c718:	430b      	orrs	r3, r1
 800c71a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c71c:	430b      	orrs	r3, r1
 800c71e:	d120      	bne.n	800c762 <_dtoa_r+0xa72>
 800c720:	2a00      	cmp	r2, #0
 800c722:	dded      	ble.n	800c700 <_dtoa_r+0xa10>
 800c724:	4649      	mov	r1, r9
 800c726:	2201      	movs	r2, #1
 800c728:	4658      	mov	r0, fp
 800c72a:	f000 fbb5 	bl	800ce98 <__lshift>
 800c72e:	4621      	mov	r1, r4
 800c730:	4681      	mov	r9, r0
 800c732:	f000 fc1d 	bl	800cf70 <__mcmp>
 800c736:	2800      	cmp	r0, #0
 800c738:	dc03      	bgt.n	800c742 <_dtoa_r+0xa52>
 800c73a:	d1e1      	bne.n	800c700 <_dtoa_r+0xa10>
 800c73c:	f018 0f01 	tst.w	r8, #1
 800c740:	d0de      	beq.n	800c700 <_dtoa_r+0xa10>
 800c742:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c746:	d1d8      	bne.n	800c6fa <_dtoa_r+0xa0a>
 800c748:	2339      	movs	r3, #57	@ 0x39
 800c74a:	9a00      	ldr	r2, [sp, #0]
 800c74c:	7013      	strb	r3, [r2, #0]
 800c74e:	4633      	mov	r3, r6
 800c750:	461e      	mov	r6, r3
 800c752:	3b01      	subs	r3, #1
 800c754:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c758:	2a39      	cmp	r2, #57	@ 0x39
 800c75a:	d052      	beq.n	800c802 <_dtoa_r+0xb12>
 800c75c:	3201      	adds	r2, #1
 800c75e:	701a      	strb	r2, [r3, #0]
 800c760:	e612      	b.n	800c388 <_dtoa_r+0x698>
 800c762:	2a00      	cmp	r2, #0
 800c764:	dd07      	ble.n	800c776 <_dtoa_r+0xa86>
 800c766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c76a:	d0ed      	beq.n	800c748 <_dtoa_r+0xa58>
 800c76c:	f108 0301 	add.w	r3, r8, #1
 800c770:	9a00      	ldr	r2, [sp, #0]
 800c772:	7013      	strb	r3, [r2, #0]
 800c774:	e608      	b.n	800c388 <_dtoa_r+0x698>
 800c776:	9b07      	ldr	r3, [sp, #28]
 800c778:	9a07      	ldr	r2, [sp, #28]
 800c77a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c77e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c780:	4293      	cmp	r3, r2
 800c782:	d028      	beq.n	800c7d6 <_dtoa_r+0xae6>
 800c784:	4649      	mov	r1, r9
 800c786:	2300      	movs	r3, #0
 800c788:	220a      	movs	r2, #10
 800c78a:	4658      	mov	r0, fp
 800c78c:	f000 f9d6 	bl	800cb3c <__multadd>
 800c790:	42af      	cmp	r7, r5
 800c792:	4681      	mov	r9, r0
 800c794:	f04f 0300 	mov.w	r3, #0
 800c798:	f04f 020a 	mov.w	r2, #10
 800c79c:	4639      	mov	r1, r7
 800c79e:	4658      	mov	r0, fp
 800c7a0:	d107      	bne.n	800c7b2 <_dtoa_r+0xac2>
 800c7a2:	f000 f9cb 	bl	800cb3c <__multadd>
 800c7a6:	4607      	mov	r7, r0
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	9b07      	ldr	r3, [sp, #28]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	9307      	str	r3, [sp, #28]
 800c7b0:	e774      	b.n	800c69c <_dtoa_r+0x9ac>
 800c7b2:	f000 f9c3 	bl	800cb3c <__multadd>
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	220a      	movs	r2, #10
 800c7be:	4658      	mov	r0, fp
 800c7c0:	f000 f9bc 	bl	800cb3c <__multadd>
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	e7f0      	b.n	800c7aa <_dtoa_r+0xaba>
 800c7c8:	9b00      	ldr	r3, [sp, #0]
 800c7ca:	2700      	movs	r7, #0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	bfcc      	ite	gt
 800c7d0:	461e      	movgt	r6, r3
 800c7d2:	2601      	movle	r6, #1
 800c7d4:	4456      	add	r6, sl
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	2201      	movs	r2, #1
 800c7da:	4658      	mov	r0, fp
 800c7dc:	f000 fb5c 	bl	800ce98 <__lshift>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4681      	mov	r9, r0
 800c7e4:	f000 fbc4 	bl	800cf70 <__mcmp>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	dcb0      	bgt.n	800c74e <_dtoa_r+0xa5e>
 800c7ec:	d102      	bne.n	800c7f4 <_dtoa_r+0xb04>
 800c7ee:	f018 0f01 	tst.w	r8, #1
 800c7f2:	d1ac      	bne.n	800c74e <_dtoa_r+0xa5e>
 800c7f4:	4633      	mov	r3, r6
 800c7f6:	461e      	mov	r6, r3
 800c7f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7fc:	2a30      	cmp	r2, #48	@ 0x30
 800c7fe:	d0fa      	beq.n	800c7f6 <_dtoa_r+0xb06>
 800c800:	e5c2      	b.n	800c388 <_dtoa_r+0x698>
 800c802:	459a      	cmp	sl, r3
 800c804:	d1a4      	bne.n	800c750 <_dtoa_r+0xa60>
 800c806:	9b04      	ldr	r3, [sp, #16]
 800c808:	3301      	adds	r3, #1
 800c80a:	9304      	str	r3, [sp, #16]
 800c80c:	2331      	movs	r3, #49	@ 0x31
 800c80e:	f88a 3000 	strb.w	r3, [sl]
 800c812:	e5b9      	b.n	800c388 <_dtoa_r+0x698>
 800c814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c816:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c874 <_dtoa_r+0xb84>
 800c81a:	b11b      	cbz	r3, 800c824 <_dtoa_r+0xb34>
 800c81c:	f10a 0308 	add.w	r3, sl, #8
 800c820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	4650      	mov	r0, sl
 800c826:	b019      	add	sp, #100	@ 0x64
 800c828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c82e:	2b01      	cmp	r3, #1
 800c830:	f77f ae37 	ble.w	800c4a2 <_dtoa_r+0x7b2>
 800c834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c836:	930a      	str	r3, [sp, #40]	@ 0x28
 800c838:	2001      	movs	r0, #1
 800c83a:	e655      	b.n	800c4e8 <_dtoa_r+0x7f8>
 800c83c:	9b00      	ldr	r3, [sp, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f77f aed6 	ble.w	800c5f0 <_dtoa_r+0x900>
 800c844:	4656      	mov	r6, sl
 800c846:	4621      	mov	r1, r4
 800c848:	4648      	mov	r0, r9
 800c84a:	f7ff f9c4 	bl	800bbd6 <quorem>
 800c84e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c852:	9b00      	ldr	r3, [sp, #0]
 800c854:	f806 8b01 	strb.w	r8, [r6], #1
 800c858:	eba6 020a 	sub.w	r2, r6, sl
 800c85c:	4293      	cmp	r3, r2
 800c85e:	ddb3      	ble.n	800c7c8 <_dtoa_r+0xad8>
 800c860:	4649      	mov	r1, r9
 800c862:	2300      	movs	r3, #0
 800c864:	220a      	movs	r2, #10
 800c866:	4658      	mov	r0, fp
 800c868:	f000 f968 	bl	800cb3c <__multadd>
 800c86c:	4681      	mov	r9, r0
 800c86e:	e7ea      	b.n	800c846 <_dtoa_r+0xb56>
 800c870:	0800db0c 	.word	0x0800db0c
 800c874:	0800da90 	.word	0x0800da90

0800c878 <_free_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4605      	mov	r5, r0
 800c87c:	2900      	cmp	r1, #0
 800c87e:	d041      	beq.n	800c904 <_free_r+0x8c>
 800c880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c884:	1f0c      	subs	r4, r1, #4
 800c886:	2b00      	cmp	r3, #0
 800c888:	bfb8      	it	lt
 800c88a:	18e4      	addlt	r4, r4, r3
 800c88c:	f000 f8e8 	bl	800ca60 <__malloc_lock>
 800c890:	4a1d      	ldr	r2, [pc, #116]	@ (800c908 <_free_r+0x90>)
 800c892:	6813      	ldr	r3, [r2, #0]
 800c894:	b933      	cbnz	r3, 800c8a4 <_free_r+0x2c>
 800c896:	6063      	str	r3, [r4, #4]
 800c898:	6014      	str	r4, [r2, #0]
 800c89a:	4628      	mov	r0, r5
 800c89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8a0:	f000 b8e4 	b.w	800ca6c <__malloc_unlock>
 800c8a4:	42a3      	cmp	r3, r4
 800c8a6:	d908      	bls.n	800c8ba <_free_r+0x42>
 800c8a8:	6820      	ldr	r0, [r4, #0]
 800c8aa:	1821      	adds	r1, r4, r0
 800c8ac:	428b      	cmp	r3, r1
 800c8ae:	bf01      	itttt	eq
 800c8b0:	6819      	ldreq	r1, [r3, #0]
 800c8b2:	685b      	ldreq	r3, [r3, #4]
 800c8b4:	1809      	addeq	r1, r1, r0
 800c8b6:	6021      	streq	r1, [r4, #0]
 800c8b8:	e7ed      	b.n	800c896 <_free_r+0x1e>
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	b10b      	cbz	r3, 800c8c4 <_free_r+0x4c>
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	d9fa      	bls.n	800c8ba <_free_r+0x42>
 800c8c4:	6811      	ldr	r1, [r2, #0]
 800c8c6:	1850      	adds	r0, r2, r1
 800c8c8:	42a0      	cmp	r0, r4
 800c8ca:	d10b      	bne.n	800c8e4 <_free_r+0x6c>
 800c8cc:	6820      	ldr	r0, [r4, #0]
 800c8ce:	4401      	add	r1, r0
 800c8d0:	1850      	adds	r0, r2, r1
 800c8d2:	6011      	str	r1, [r2, #0]
 800c8d4:	4283      	cmp	r3, r0
 800c8d6:	d1e0      	bne.n	800c89a <_free_r+0x22>
 800c8d8:	6818      	ldr	r0, [r3, #0]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	4408      	add	r0, r1
 800c8de:	6053      	str	r3, [r2, #4]
 800c8e0:	6010      	str	r0, [r2, #0]
 800c8e2:	e7da      	b.n	800c89a <_free_r+0x22>
 800c8e4:	d902      	bls.n	800c8ec <_free_r+0x74>
 800c8e6:	230c      	movs	r3, #12
 800c8e8:	602b      	str	r3, [r5, #0]
 800c8ea:	e7d6      	b.n	800c89a <_free_r+0x22>
 800c8ec:	6820      	ldr	r0, [r4, #0]
 800c8ee:	1821      	adds	r1, r4, r0
 800c8f0:	428b      	cmp	r3, r1
 800c8f2:	bf02      	ittt	eq
 800c8f4:	6819      	ldreq	r1, [r3, #0]
 800c8f6:	685b      	ldreq	r3, [r3, #4]
 800c8f8:	1809      	addeq	r1, r1, r0
 800c8fa:	6063      	str	r3, [r4, #4]
 800c8fc:	bf08      	it	eq
 800c8fe:	6021      	streq	r1, [r4, #0]
 800c900:	6054      	str	r4, [r2, #4]
 800c902:	e7ca      	b.n	800c89a <_free_r+0x22>
 800c904:	bd38      	pop	{r3, r4, r5, pc}
 800c906:	bf00      	nop
 800c908:	20000ad4 	.word	0x20000ad4

0800c90c <malloc>:
 800c90c:	4b02      	ldr	r3, [pc, #8]	@ (800c918 <malloc+0xc>)
 800c90e:	4601      	mov	r1, r0
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	f000 b825 	b.w	800c960 <_malloc_r>
 800c916:	bf00      	nop
 800c918:	20000018 	.word	0x20000018

0800c91c <sbrk_aligned>:
 800c91c:	b570      	push	{r4, r5, r6, lr}
 800c91e:	4e0f      	ldr	r6, [pc, #60]	@ (800c95c <sbrk_aligned+0x40>)
 800c920:	460c      	mov	r4, r1
 800c922:	4605      	mov	r5, r0
 800c924:	6831      	ldr	r1, [r6, #0]
 800c926:	b911      	cbnz	r1, 800c92e <sbrk_aligned+0x12>
 800c928:	f000 fcda 	bl	800d2e0 <_sbrk_r>
 800c92c:	6030      	str	r0, [r6, #0]
 800c92e:	4621      	mov	r1, r4
 800c930:	4628      	mov	r0, r5
 800c932:	f000 fcd5 	bl	800d2e0 <_sbrk_r>
 800c936:	1c43      	adds	r3, r0, #1
 800c938:	d103      	bne.n	800c942 <sbrk_aligned+0x26>
 800c93a:	f04f 34ff 	mov.w	r4, #4294967295
 800c93e:	4620      	mov	r0, r4
 800c940:	bd70      	pop	{r4, r5, r6, pc}
 800c942:	1cc4      	adds	r4, r0, #3
 800c944:	f024 0403 	bic.w	r4, r4, #3
 800c948:	42a0      	cmp	r0, r4
 800c94a:	d0f8      	beq.n	800c93e <sbrk_aligned+0x22>
 800c94c:	1a21      	subs	r1, r4, r0
 800c94e:	4628      	mov	r0, r5
 800c950:	f000 fcc6 	bl	800d2e0 <_sbrk_r>
 800c954:	3001      	adds	r0, #1
 800c956:	d1f2      	bne.n	800c93e <sbrk_aligned+0x22>
 800c958:	e7ef      	b.n	800c93a <sbrk_aligned+0x1e>
 800c95a:	bf00      	nop
 800c95c:	20000ad0 	.word	0x20000ad0

0800c960 <_malloc_r>:
 800c960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c964:	1ccd      	adds	r5, r1, #3
 800c966:	4606      	mov	r6, r0
 800c968:	f025 0503 	bic.w	r5, r5, #3
 800c96c:	3508      	adds	r5, #8
 800c96e:	2d0c      	cmp	r5, #12
 800c970:	bf38      	it	cc
 800c972:	250c      	movcc	r5, #12
 800c974:	2d00      	cmp	r5, #0
 800c976:	db01      	blt.n	800c97c <_malloc_r+0x1c>
 800c978:	42a9      	cmp	r1, r5
 800c97a:	d904      	bls.n	800c986 <_malloc_r+0x26>
 800c97c:	230c      	movs	r3, #12
 800c97e:	6033      	str	r3, [r6, #0]
 800c980:	2000      	movs	r0, #0
 800c982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca5c <_malloc_r+0xfc>
 800c98a:	f000 f869 	bl	800ca60 <__malloc_lock>
 800c98e:	f8d8 3000 	ldr.w	r3, [r8]
 800c992:	461c      	mov	r4, r3
 800c994:	bb44      	cbnz	r4, 800c9e8 <_malloc_r+0x88>
 800c996:	4629      	mov	r1, r5
 800c998:	4630      	mov	r0, r6
 800c99a:	f7ff ffbf 	bl	800c91c <sbrk_aligned>
 800c99e:	1c43      	adds	r3, r0, #1
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	d158      	bne.n	800ca56 <_malloc_r+0xf6>
 800c9a4:	f8d8 4000 	ldr.w	r4, [r8]
 800c9a8:	4627      	mov	r7, r4
 800c9aa:	2f00      	cmp	r7, #0
 800c9ac:	d143      	bne.n	800ca36 <_malloc_r+0xd6>
 800c9ae:	2c00      	cmp	r4, #0
 800c9b0:	d04b      	beq.n	800ca4a <_malloc_r+0xea>
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	eb04 0903 	add.w	r9, r4, r3
 800c9bc:	f000 fc90 	bl	800d2e0 <_sbrk_r>
 800c9c0:	4581      	cmp	r9, r0
 800c9c2:	d142      	bne.n	800ca4a <_malloc_r+0xea>
 800c9c4:	6821      	ldr	r1, [r4, #0]
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	1a6d      	subs	r5, r5, r1
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f7ff ffa6 	bl	800c91c <sbrk_aligned>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d03a      	beq.n	800ca4a <_malloc_r+0xea>
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	442b      	add	r3, r5
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	f8d8 3000 	ldr.w	r3, [r8]
 800c9de:	685a      	ldr	r2, [r3, #4]
 800c9e0:	bb62      	cbnz	r2, 800ca3c <_malloc_r+0xdc>
 800c9e2:	f8c8 7000 	str.w	r7, [r8]
 800c9e6:	e00f      	b.n	800ca08 <_malloc_r+0xa8>
 800c9e8:	6822      	ldr	r2, [r4, #0]
 800c9ea:	1b52      	subs	r2, r2, r5
 800c9ec:	d420      	bmi.n	800ca30 <_malloc_r+0xd0>
 800c9ee:	2a0b      	cmp	r2, #11
 800c9f0:	d917      	bls.n	800ca22 <_malloc_r+0xc2>
 800c9f2:	1961      	adds	r1, r4, r5
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	6025      	str	r5, [r4, #0]
 800c9f8:	bf18      	it	ne
 800c9fa:	6059      	strne	r1, [r3, #4]
 800c9fc:	6863      	ldr	r3, [r4, #4]
 800c9fe:	bf08      	it	eq
 800ca00:	f8c8 1000 	streq.w	r1, [r8]
 800ca04:	5162      	str	r2, [r4, r5]
 800ca06:	604b      	str	r3, [r1, #4]
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f000 f82f 	bl	800ca6c <__malloc_unlock>
 800ca0e:	f104 000b 	add.w	r0, r4, #11
 800ca12:	1d23      	adds	r3, r4, #4
 800ca14:	f020 0007 	bic.w	r0, r0, #7
 800ca18:	1ac2      	subs	r2, r0, r3
 800ca1a:	bf1c      	itt	ne
 800ca1c:	1a1b      	subne	r3, r3, r0
 800ca1e:	50a3      	strne	r3, [r4, r2]
 800ca20:	e7af      	b.n	800c982 <_malloc_r+0x22>
 800ca22:	6862      	ldr	r2, [r4, #4]
 800ca24:	42a3      	cmp	r3, r4
 800ca26:	bf0c      	ite	eq
 800ca28:	f8c8 2000 	streq.w	r2, [r8]
 800ca2c:	605a      	strne	r2, [r3, #4]
 800ca2e:	e7eb      	b.n	800ca08 <_malloc_r+0xa8>
 800ca30:	4623      	mov	r3, r4
 800ca32:	6864      	ldr	r4, [r4, #4]
 800ca34:	e7ae      	b.n	800c994 <_malloc_r+0x34>
 800ca36:	463c      	mov	r4, r7
 800ca38:	687f      	ldr	r7, [r7, #4]
 800ca3a:	e7b6      	b.n	800c9aa <_malloc_r+0x4a>
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	42a3      	cmp	r3, r4
 800ca42:	d1fb      	bne.n	800ca3c <_malloc_r+0xdc>
 800ca44:	2300      	movs	r3, #0
 800ca46:	6053      	str	r3, [r2, #4]
 800ca48:	e7de      	b.n	800ca08 <_malloc_r+0xa8>
 800ca4a:	230c      	movs	r3, #12
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	6033      	str	r3, [r6, #0]
 800ca50:	f000 f80c 	bl	800ca6c <__malloc_unlock>
 800ca54:	e794      	b.n	800c980 <_malloc_r+0x20>
 800ca56:	6005      	str	r5, [r0, #0]
 800ca58:	e7d6      	b.n	800ca08 <_malloc_r+0xa8>
 800ca5a:	bf00      	nop
 800ca5c:	20000ad4 	.word	0x20000ad4

0800ca60 <__malloc_lock>:
 800ca60:	4801      	ldr	r0, [pc, #4]	@ (800ca68 <__malloc_lock+0x8>)
 800ca62:	f7ff b8a8 	b.w	800bbb6 <__retarget_lock_acquire_recursive>
 800ca66:	bf00      	nop
 800ca68:	20000acc 	.word	0x20000acc

0800ca6c <__malloc_unlock>:
 800ca6c:	4801      	ldr	r0, [pc, #4]	@ (800ca74 <__malloc_unlock+0x8>)
 800ca6e:	f7ff b8a3 	b.w	800bbb8 <__retarget_lock_release_recursive>
 800ca72:	bf00      	nop
 800ca74:	20000acc 	.word	0x20000acc

0800ca78 <_Balloc>:
 800ca78:	b570      	push	{r4, r5, r6, lr}
 800ca7a:	69c6      	ldr	r6, [r0, #28]
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	460d      	mov	r5, r1
 800ca80:	b976      	cbnz	r6, 800caa0 <_Balloc+0x28>
 800ca82:	2010      	movs	r0, #16
 800ca84:	f7ff ff42 	bl	800c90c <malloc>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	61e0      	str	r0, [r4, #28]
 800ca8c:	b920      	cbnz	r0, 800ca98 <_Balloc+0x20>
 800ca8e:	4b18      	ldr	r3, [pc, #96]	@ (800caf0 <_Balloc+0x78>)
 800ca90:	216b      	movs	r1, #107	@ 0x6b
 800ca92:	4818      	ldr	r0, [pc, #96]	@ (800caf4 <_Balloc+0x7c>)
 800ca94:	f000 fc42 	bl	800d31c <__assert_func>
 800ca98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca9c:	6006      	str	r6, [r0, #0]
 800ca9e:	60c6      	str	r6, [r0, #12]
 800caa0:	69e6      	ldr	r6, [r4, #28]
 800caa2:	68f3      	ldr	r3, [r6, #12]
 800caa4:	b183      	cbz	r3, 800cac8 <_Balloc+0x50>
 800caa6:	69e3      	ldr	r3, [r4, #28]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800caae:	b9b8      	cbnz	r0, 800cae0 <_Balloc+0x68>
 800cab0:	2101      	movs	r1, #1
 800cab2:	4620      	mov	r0, r4
 800cab4:	fa01 f605 	lsl.w	r6, r1, r5
 800cab8:	1d72      	adds	r2, r6, #5
 800caba:	0092      	lsls	r2, r2, #2
 800cabc:	f000 fc4c 	bl	800d358 <_calloc_r>
 800cac0:	b160      	cbz	r0, 800cadc <_Balloc+0x64>
 800cac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cac6:	e00e      	b.n	800cae6 <_Balloc+0x6e>
 800cac8:	2221      	movs	r2, #33	@ 0x21
 800caca:	2104      	movs	r1, #4
 800cacc:	4620      	mov	r0, r4
 800cace:	f000 fc43 	bl	800d358 <_calloc_r>
 800cad2:	69e3      	ldr	r3, [r4, #28]
 800cad4:	60f0      	str	r0, [r6, #12]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e4      	bne.n	800caa6 <_Balloc+0x2e>
 800cadc:	2000      	movs	r0, #0
 800cade:	bd70      	pop	{r4, r5, r6, pc}
 800cae0:	6802      	ldr	r2, [r0, #0]
 800cae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cae6:	2300      	movs	r3, #0
 800cae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caec:	e7f7      	b.n	800cade <_Balloc+0x66>
 800caee:	bf00      	nop
 800caf0:	0800da9d 	.word	0x0800da9d
 800caf4:	0800db1d 	.word	0x0800db1d

0800caf8 <_Bfree>:
 800caf8:	b570      	push	{r4, r5, r6, lr}
 800cafa:	69c6      	ldr	r6, [r0, #28]
 800cafc:	4605      	mov	r5, r0
 800cafe:	460c      	mov	r4, r1
 800cb00:	b976      	cbnz	r6, 800cb20 <_Bfree+0x28>
 800cb02:	2010      	movs	r0, #16
 800cb04:	f7ff ff02 	bl	800c90c <malloc>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	61e8      	str	r0, [r5, #28]
 800cb0c:	b920      	cbnz	r0, 800cb18 <_Bfree+0x20>
 800cb0e:	4b09      	ldr	r3, [pc, #36]	@ (800cb34 <_Bfree+0x3c>)
 800cb10:	218f      	movs	r1, #143	@ 0x8f
 800cb12:	4809      	ldr	r0, [pc, #36]	@ (800cb38 <_Bfree+0x40>)
 800cb14:	f000 fc02 	bl	800d31c <__assert_func>
 800cb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb1c:	6006      	str	r6, [r0, #0]
 800cb1e:	60c6      	str	r6, [r0, #12]
 800cb20:	b13c      	cbz	r4, 800cb32 <_Bfree+0x3a>
 800cb22:	69eb      	ldr	r3, [r5, #28]
 800cb24:	6862      	ldr	r2, [r4, #4]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb2c:	6021      	str	r1, [r4, #0]
 800cb2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
 800cb34:	0800da9d 	.word	0x0800da9d
 800cb38:	0800db1d 	.word	0x0800db1d

0800cb3c <__multadd>:
 800cb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb40:	f101 0c14 	add.w	ip, r1, #20
 800cb44:	4607      	mov	r7, r0
 800cb46:	460c      	mov	r4, r1
 800cb48:	461e      	mov	r6, r3
 800cb4a:	690d      	ldr	r5, [r1, #16]
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	f8dc 3000 	ldr.w	r3, [ip]
 800cb52:	3001      	adds	r0, #1
 800cb54:	b299      	uxth	r1, r3
 800cb56:	4285      	cmp	r5, r0
 800cb58:	fb02 6101 	mla	r1, r2, r1, r6
 800cb5c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb60:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800cb64:	b289      	uxth	r1, r1
 800cb66:	fb02 3306 	mla	r3, r2, r6, r3
 800cb6a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb72:	f84c 1b04 	str.w	r1, [ip], #4
 800cb76:	dcea      	bgt.n	800cb4e <__multadd+0x12>
 800cb78:	b30e      	cbz	r6, 800cbbe <__multadd+0x82>
 800cb7a:	68a3      	ldr	r3, [r4, #8]
 800cb7c:	42ab      	cmp	r3, r5
 800cb7e:	dc19      	bgt.n	800cbb4 <__multadd+0x78>
 800cb80:	6861      	ldr	r1, [r4, #4]
 800cb82:	4638      	mov	r0, r7
 800cb84:	3101      	adds	r1, #1
 800cb86:	f7ff ff77 	bl	800ca78 <_Balloc>
 800cb8a:	4680      	mov	r8, r0
 800cb8c:	b928      	cbnz	r0, 800cb9a <__multadd+0x5e>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	4b0c      	ldr	r3, [pc, #48]	@ (800cbc4 <__multadd+0x88>)
 800cb92:	21ba      	movs	r1, #186	@ 0xba
 800cb94:	480c      	ldr	r0, [pc, #48]	@ (800cbc8 <__multadd+0x8c>)
 800cb96:	f000 fbc1 	bl	800d31c <__assert_func>
 800cb9a:	6922      	ldr	r2, [r4, #16]
 800cb9c:	f104 010c 	add.w	r1, r4, #12
 800cba0:	300c      	adds	r0, #12
 800cba2:	3202      	adds	r2, #2
 800cba4:	0092      	lsls	r2, r2, #2
 800cba6:	f000 fbab 	bl	800d300 <memcpy>
 800cbaa:	4621      	mov	r1, r4
 800cbac:	4644      	mov	r4, r8
 800cbae:	4638      	mov	r0, r7
 800cbb0:	f7ff ffa2 	bl	800caf8 <_Bfree>
 800cbb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbb8:	3501      	adds	r5, #1
 800cbba:	615e      	str	r6, [r3, #20]
 800cbbc:	6125      	str	r5, [r4, #16]
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc4:	0800db0c 	.word	0x0800db0c
 800cbc8:	0800db1d 	.word	0x0800db1d

0800cbcc <__hi0bits>:
 800cbcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	bf36      	itet	cc
 800cbd4:	0403      	lslcc	r3, r0, #16
 800cbd6:	2000      	movcs	r0, #0
 800cbd8:	2010      	movcc	r0, #16
 800cbda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbde:	bf3c      	itt	cc
 800cbe0:	021b      	lslcc	r3, r3, #8
 800cbe2:	3008      	addcc	r0, #8
 800cbe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbe8:	bf3c      	itt	cc
 800cbea:	011b      	lslcc	r3, r3, #4
 800cbec:	3004      	addcc	r0, #4
 800cbee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbf2:	bf3c      	itt	cc
 800cbf4:	009b      	lslcc	r3, r3, #2
 800cbf6:	3002      	addcc	r0, #2
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	db05      	blt.n	800cc08 <__hi0bits+0x3c>
 800cbfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc00:	f100 0001 	add.w	r0, r0, #1
 800cc04:	bf08      	it	eq
 800cc06:	2020      	moveq	r0, #32
 800cc08:	4770      	bx	lr

0800cc0a <__lo0bits>:
 800cc0a:	6803      	ldr	r3, [r0, #0]
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	f013 0007 	ands.w	r0, r3, #7
 800cc12:	d00b      	beq.n	800cc2c <__lo0bits+0x22>
 800cc14:	07d9      	lsls	r1, r3, #31
 800cc16:	d421      	bmi.n	800cc5c <__lo0bits+0x52>
 800cc18:	0798      	lsls	r0, r3, #30
 800cc1a:	bf47      	ittee	mi
 800cc1c:	085b      	lsrmi	r3, r3, #1
 800cc1e:	2001      	movmi	r0, #1
 800cc20:	089b      	lsrpl	r3, r3, #2
 800cc22:	2002      	movpl	r0, #2
 800cc24:	bf4c      	ite	mi
 800cc26:	6013      	strmi	r3, [r2, #0]
 800cc28:	6013      	strpl	r3, [r2, #0]
 800cc2a:	4770      	bx	lr
 800cc2c:	b299      	uxth	r1, r3
 800cc2e:	b909      	cbnz	r1, 800cc34 <__lo0bits+0x2a>
 800cc30:	0c1b      	lsrs	r3, r3, #16
 800cc32:	2010      	movs	r0, #16
 800cc34:	b2d9      	uxtb	r1, r3
 800cc36:	b909      	cbnz	r1, 800cc3c <__lo0bits+0x32>
 800cc38:	3008      	adds	r0, #8
 800cc3a:	0a1b      	lsrs	r3, r3, #8
 800cc3c:	0719      	lsls	r1, r3, #28
 800cc3e:	bf04      	itt	eq
 800cc40:	091b      	lsreq	r3, r3, #4
 800cc42:	3004      	addeq	r0, #4
 800cc44:	0799      	lsls	r1, r3, #30
 800cc46:	bf04      	itt	eq
 800cc48:	089b      	lsreq	r3, r3, #2
 800cc4a:	3002      	addeq	r0, #2
 800cc4c:	07d9      	lsls	r1, r3, #31
 800cc4e:	d403      	bmi.n	800cc58 <__lo0bits+0x4e>
 800cc50:	085b      	lsrs	r3, r3, #1
 800cc52:	f100 0001 	add.w	r0, r0, #1
 800cc56:	d003      	beq.n	800cc60 <__lo0bits+0x56>
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	4770      	bx	lr
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	4770      	bx	lr
 800cc60:	2020      	movs	r0, #32
 800cc62:	4770      	bx	lr

0800cc64 <__i2b>:
 800cc64:	b510      	push	{r4, lr}
 800cc66:	460c      	mov	r4, r1
 800cc68:	2101      	movs	r1, #1
 800cc6a:	f7ff ff05 	bl	800ca78 <_Balloc>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	b928      	cbnz	r0, 800cc7e <__i2b+0x1a>
 800cc72:	4b05      	ldr	r3, [pc, #20]	@ (800cc88 <__i2b+0x24>)
 800cc74:	f240 1145 	movw	r1, #325	@ 0x145
 800cc78:	4804      	ldr	r0, [pc, #16]	@ (800cc8c <__i2b+0x28>)
 800cc7a:	f000 fb4f 	bl	800d31c <__assert_func>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	6144      	str	r4, [r0, #20]
 800cc82:	6103      	str	r3, [r0, #16]
 800cc84:	bd10      	pop	{r4, pc}
 800cc86:	bf00      	nop
 800cc88:	0800db0c 	.word	0x0800db0c
 800cc8c:	0800db1d 	.word	0x0800db1d

0800cc90 <__multiply>:
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	4614      	mov	r4, r2
 800cc96:	690a      	ldr	r2, [r1, #16]
 800cc98:	460f      	mov	r7, r1
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	6923      	ldr	r3, [r4, #16]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	bfa2      	ittt	ge
 800cca2:	4623      	movge	r3, r4
 800cca4:	460c      	movge	r4, r1
 800cca6:	461f      	movge	r7, r3
 800cca8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ccac:	68a3      	ldr	r3, [r4, #8]
 800ccae:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ccb2:	6861      	ldr	r1, [r4, #4]
 800ccb4:	eb0a 0609 	add.w	r6, sl, r9
 800ccb8:	42b3      	cmp	r3, r6
 800ccba:	bfb8      	it	lt
 800ccbc:	3101      	addlt	r1, #1
 800ccbe:	f7ff fedb 	bl	800ca78 <_Balloc>
 800ccc2:	b930      	cbnz	r0, 800ccd2 <__multiply+0x42>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	4b45      	ldr	r3, [pc, #276]	@ (800cddc <__multiply+0x14c>)
 800ccc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cccc:	4844      	ldr	r0, [pc, #272]	@ (800cde0 <__multiply+0x150>)
 800ccce:	f000 fb25 	bl	800d31c <__assert_func>
 800ccd2:	f100 0514 	add.w	r5, r0, #20
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ccdc:	462b      	mov	r3, r5
 800ccde:	4543      	cmp	r3, r8
 800cce0:	d321      	bcc.n	800cd26 <__multiply+0x96>
 800cce2:	f107 0114 	add.w	r1, r7, #20
 800cce6:	f104 0214 	add.w	r2, r4, #20
 800ccea:	f104 0715 	add.w	r7, r4, #21
 800ccee:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ccf2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ccf6:	9302      	str	r3, [sp, #8]
 800ccf8:	1b13      	subs	r3, r2, r4
 800ccfa:	3b15      	subs	r3, #21
 800ccfc:	f023 0303 	bic.w	r3, r3, #3
 800cd00:	3304      	adds	r3, #4
 800cd02:	42ba      	cmp	r2, r7
 800cd04:	bf38      	it	cc
 800cd06:	2304      	movcc	r3, #4
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	9b02      	ldr	r3, [sp, #8]
 800cd0c:	9103      	str	r1, [sp, #12]
 800cd0e:	428b      	cmp	r3, r1
 800cd10:	d80c      	bhi.n	800cd2c <__multiply+0x9c>
 800cd12:	2e00      	cmp	r6, #0
 800cd14:	dd03      	ble.n	800cd1e <__multiply+0x8e>
 800cd16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d05b      	beq.n	800cdd6 <__multiply+0x146>
 800cd1e:	6106      	str	r6, [r0, #16]
 800cd20:	b005      	add	sp, #20
 800cd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd26:	f843 2b04 	str.w	r2, [r3], #4
 800cd2a:	e7d8      	b.n	800ccde <__multiply+0x4e>
 800cd2c:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd30:	f1ba 0f00 	cmp.w	sl, #0
 800cd34:	d024      	beq.n	800cd80 <__multiply+0xf0>
 800cd36:	f104 0e14 	add.w	lr, r4, #20
 800cd3a:	46a9      	mov	r9, r5
 800cd3c:	f04f 0c00 	mov.w	ip, #0
 800cd40:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd44:	f8d9 3000 	ldr.w	r3, [r9]
 800cd48:	fa1f fb87 	uxth.w	fp, r7
 800cd4c:	4572      	cmp	r2, lr
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cd58:	f8d9 7000 	ldr.w	r7, [r9]
 800cd5c:	4463      	add	r3, ip
 800cd5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd62:	fb0a c70b 	mla	r7, sl, fp, ip
 800cd66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd74:	f849 3b04 	str.w	r3, [r9], #4
 800cd78:	d8e2      	bhi.n	800cd40 <__multiply+0xb0>
 800cd7a:	9b01      	ldr	r3, [sp, #4]
 800cd7c:	f845 c003 	str.w	ip, [r5, r3]
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	3104      	adds	r1, #4
 800cd84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd88:	f1b9 0f00 	cmp.w	r9, #0
 800cd8c:	d021      	beq.n	800cdd2 <__multiply+0x142>
 800cd8e:	682b      	ldr	r3, [r5, #0]
 800cd90:	f104 0c14 	add.w	ip, r4, #20
 800cd94:	46ae      	mov	lr, r5
 800cd96:	f04f 0a00 	mov.w	sl, #0
 800cd9a:	f8bc b000 	ldrh.w	fp, [ip]
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cda4:	fb09 770b 	mla	r7, r9, fp, r7
 800cda8:	4457      	add	r7, sl
 800cdaa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cdae:	f84e 3b04 	str.w	r3, [lr], #4
 800cdb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cdb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdba:	f8be 3000 	ldrh.w	r3, [lr]
 800cdbe:	4562      	cmp	r2, ip
 800cdc0:	fb09 330a 	mla	r3, r9, sl, r3
 800cdc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cdc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdcc:	d8e5      	bhi.n	800cd9a <__multiply+0x10a>
 800cdce:	9f01      	ldr	r7, [sp, #4]
 800cdd0:	51eb      	str	r3, [r5, r7]
 800cdd2:	3504      	adds	r5, #4
 800cdd4:	e799      	b.n	800cd0a <__multiply+0x7a>
 800cdd6:	3e01      	subs	r6, #1
 800cdd8:	e79b      	b.n	800cd12 <__multiply+0x82>
 800cdda:	bf00      	nop
 800cddc:	0800db0c 	.word	0x0800db0c
 800cde0:	0800db1d 	.word	0x0800db1d

0800cde4 <__pow5mult>:
 800cde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde8:	4615      	mov	r5, r2
 800cdea:	f012 0203 	ands.w	r2, r2, #3
 800cdee:	4607      	mov	r7, r0
 800cdf0:	460e      	mov	r6, r1
 800cdf2:	d007      	beq.n	800ce04 <__pow5mult+0x20>
 800cdf4:	3a01      	subs	r2, #1
 800cdf6:	4c25      	ldr	r4, [pc, #148]	@ (800ce8c <__pow5mult+0xa8>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdfe:	f7ff fe9d 	bl	800cb3c <__multadd>
 800ce02:	4606      	mov	r6, r0
 800ce04:	10ad      	asrs	r5, r5, #2
 800ce06:	d03d      	beq.n	800ce84 <__pow5mult+0xa0>
 800ce08:	69fc      	ldr	r4, [r7, #28]
 800ce0a:	b97c      	cbnz	r4, 800ce2c <__pow5mult+0x48>
 800ce0c:	2010      	movs	r0, #16
 800ce0e:	f7ff fd7d 	bl	800c90c <malloc>
 800ce12:	4602      	mov	r2, r0
 800ce14:	61f8      	str	r0, [r7, #28]
 800ce16:	b928      	cbnz	r0, 800ce24 <__pow5mult+0x40>
 800ce18:	4b1d      	ldr	r3, [pc, #116]	@ (800ce90 <__pow5mult+0xac>)
 800ce1a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce1e:	481d      	ldr	r0, [pc, #116]	@ (800ce94 <__pow5mult+0xb0>)
 800ce20:	f000 fa7c 	bl	800d31c <__assert_func>
 800ce24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce28:	6004      	str	r4, [r0, #0]
 800ce2a:	60c4      	str	r4, [r0, #12]
 800ce2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce34:	b94c      	cbnz	r4, 800ce4a <__pow5mult+0x66>
 800ce36:	f240 2171 	movw	r1, #625	@ 0x271
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	f7ff ff12 	bl	800cc64 <__i2b>
 800ce40:	2300      	movs	r3, #0
 800ce42:	4604      	mov	r4, r0
 800ce44:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce48:	6003      	str	r3, [r0, #0]
 800ce4a:	f04f 0900 	mov.w	r9, #0
 800ce4e:	07eb      	lsls	r3, r5, #31
 800ce50:	d50a      	bpl.n	800ce68 <__pow5mult+0x84>
 800ce52:	4631      	mov	r1, r6
 800ce54:	4622      	mov	r2, r4
 800ce56:	4638      	mov	r0, r7
 800ce58:	f7ff ff1a 	bl	800cc90 <__multiply>
 800ce5c:	4680      	mov	r8, r0
 800ce5e:	4631      	mov	r1, r6
 800ce60:	4638      	mov	r0, r7
 800ce62:	4646      	mov	r6, r8
 800ce64:	f7ff fe48 	bl	800caf8 <_Bfree>
 800ce68:	106d      	asrs	r5, r5, #1
 800ce6a:	d00b      	beq.n	800ce84 <__pow5mult+0xa0>
 800ce6c:	6820      	ldr	r0, [r4, #0]
 800ce6e:	b938      	cbnz	r0, 800ce80 <__pow5mult+0x9c>
 800ce70:	4622      	mov	r2, r4
 800ce72:	4621      	mov	r1, r4
 800ce74:	4638      	mov	r0, r7
 800ce76:	f7ff ff0b 	bl	800cc90 <__multiply>
 800ce7a:	6020      	str	r0, [r4, #0]
 800ce7c:	f8c0 9000 	str.w	r9, [r0]
 800ce80:	4604      	mov	r4, r0
 800ce82:	e7e4      	b.n	800ce4e <__pow5mult+0x6a>
 800ce84:	4630      	mov	r0, r6
 800ce86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce8a:	bf00      	nop
 800ce8c:	0800db78 	.word	0x0800db78
 800ce90:	0800da9d 	.word	0x0800da9d
 800ce94:	0800db1d 	.word	0x0800db1d

0800ce98 <__lshift>:
 800ce98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	4607      	mov	r7, r0
 800cea0:	4691      	mov	r9, r2
 800cea2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	6849      	ldr	r1, [r1, #4]
 800ceaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ceae:	68a3      	ldr	r3, [r4, #8]
 800ceb0:	f108 0601 	add.w	r6, r8, #1
 800ceb4:	42b3      	cmp	r3, r6
 800ceb6:	db0b      	blt.n	800ced0 <__lshift+0x38>
 800ceb8:	4638      	mov	r0, r7
 800ceba:	f7ff fddd 	bl	800ca78 <_Balloc>
 800cebe:	4605      	mov	r5, r0
 800cec0:	b948      	cbnz	r0, 800ced6 <__lshift+0x3e>
 800cec2:	4602      	mov	r2, r0
 800cec4:	4b28      	ldr	r3, [pc, #160]	@ (800cf68 <__lshift+0xd0>)
 800cec6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ceca:	4828      	ldr	r0, [pc, #160]	@ (800cf6c <__lshift+0xd4>)
 800cecc:	f000 fa26 	bl	800d31c <__assert_func>
 800ced0:	3101      	adds	r1, #1
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	e7ee      	b.n	800ceb4 <__lshift+0x1c>
 800ced6:	2300      	movs	r3, #0
 800ced8:	f100 0114 	add.w	r1, r0, #20
 800cedc:	f100 0210 	add.w	r2, r0, #16
 800cee0:	4618      	mov	r0, r3
 800cee2:	4553      	cmp	r3, sl
 800cee4:	db33      	blt.n	800cf4e <__lshift+0xb6>
 800cee6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ceea:	f104 0314 	add.w	r3, r4, #20
 800ceee:	6920      	ldr	r0, [r4, #16]
 800cef0:	f019 091f 	ands.w	r9, r9, #31
 800cef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cef8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cefc:	d02b      	beq.n	800cf56 <__lshift+0xbe>
 800cefe:	f1c9 0e20 	rsb	lr, r9, #32
 800cf02:	468a      	mov	sl, r1
 800cf04:	2200      	movs	r2, #0
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	fa00 f009 	lsl.w	r0, r0, r9
 800cf0c:	4310      	orrs	r0, r2
 800cf0e:	f84a 0b04 	str.w	r0, [sl], #4
 800cf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf16:	459c      	cmp	ip, r3
 800cf18:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf1c:	d8f3      	bhi.n	800cf06 <__lshift+0x6e>
 800cf1e:	ebac 0304 	sub.w	r3, ip, r4
 800cf22:	f104 0015 	add.w	r0, r4, #21
 800cf26:	3b15      	subs	r3, #21
 800cf28:	f023 0303 	bic.w	r3, r3, #3
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	4584      	cmp	ip, r0
 800cf30:	bf38      	it	cc
 800cf32:	2304      	movcc	r3, #4
 800cf34:	50ca      	str	r2, [r1, r3]
 800cf36:	b10a      	cbz	r2, 800cf3c <__lshift+0xa4>
 800cf38:	f108 0602 	add.w	r6, r8, #2
 800cf3c:	3e01      	subs	r6, #1
 800cf3e:	4638      	mov	r0, r7
 800cf40:	4621      	mov	r1, r4
 800cf42:	612e      	str	r6, [r5, #16]
 800cf44:	f7ff fdd8 	bl	800caf8 <_Bfree>
 800cf48:	4628      	mov	r0, r5
 800cf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4e:	3301      	adds	r3, #1
 800cf50:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf54:	e7c5      	b.n	800cee2 <__lshift+0x4a>
 800cf56:	3904      	subs	r1, #4
 800cf58:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf5c:	459c      	cmp	ip, r3
 800cf5e:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf62:	d8f9      	bhi.n	800cf58 <__lshift+0xc0>
 800cf64:	e7ea      	b.n	800cf3c <__lshift+0xa4>
 800cf66:	bf00      	nop
 800cf68:	0800db0c 	.word	0x0800db0c
 800cf6c:	0800db1d 	.word	0x0800db1d

0800cf70 <__mcmp>:
 800cf70:	4603      	mov	r3, r0
 800cf72:	690a      	ldr	r2, [r1, #16]
 800cf74:	6900      	ldr	r0, [r0, #16]
 800cf76:	1a80      	subs	r0, r0, r2
 800cf78:	b530      	push	{r4, r5, lr}
 800cf7a:	d10e      	bne.n	800cf9a <__mcmp+0x2a>
 800cf7c:	3314      	adds	r3, #20
 800cf7e:	3114      	adds	r1, #20
 800cf80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf90:	4295      	cmp	r5, r2
 800cf92:	d003      	beq.n	800cf9c <__mcmp+0x2c>
 800cf94:	d205      	bcs.n	800cfa2 <__mcmp+0x32>
 800cf96:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9a:	bd30      	pop	{r4, r5, pc}
 800cf9c:	42a3      	cmp	r3, r4
 800cf9e:	d3f3      	bcc.n	800cf88 <__mcmp+0x18>
 800cfa0:	e7fb      	b.n	800cf9a <__mcmp+0x2a>
 800cfa2:	2001      	movs	r0, #1
 800cfa4:	e7f9      	b.n	800cf9a <__mcmp+0x2a>
	...

0800cfa8 <__mdiff>:
 800cfa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfac:	4689      	mov	r9, r1
 800cfae:	4606      	mov	r6, r0
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4614      	mov	r4, r2
 800cfb4:	4648      	mov	r0, r9
 800cfb6:	f7ff ffdb 	bl	800cf70 <__mcmp>
 800cfba:	1e05      	subs	r5, r0, #0
 800cfbc:	d112      	bne.n	800cfe4 <__mdiff+0x3c>
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7ff fd59 	bl	800ca78 <_Balloc>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	b928      	cbnz	r0, 800cfd6 <__mdiff+0x2e>
 800cfca:	4b41      	ldr	r3, [pc, #260]	@ (800d0d0 <__mdiff+0x128>)
 800cfcc:	f240 2137 	movw	r1, #567	@ 0x237
 800cfd0:	4840      	ldr	r0, [pc, #256]	@ (800d0d4 <__mdiff+0x12c>)
 800cfd2:	f000 f9a3 	bl	800d31c <__assert_func>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cfdc:	4610      	mov	r0, r2
 800cfde:	b003      	add	sp, #12
 800cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe4:	bfbc      	itt	lt
 800cfe6:	464b      	movlt	r3, r9
 800cfe8:	46a1      	movlt	r9, r4
 800cfea:	4630      	mov	r0, r6
 800cfec:	bfb8      	it	lt
 800cfee:	2501      	movlt	r5, #1
 800cff0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cff4:	bfb4      	ite	lt
 800cff6:	461c      	movlt	r4, r3
 800cff8:	2500      	movge	r5, #0
 800cffa:	f7ff fd3d 	bl	800ca78 <_Balloc>
 800cffe:	4602      	mov	r2, r0
 800d000:	b918      	cbnz	r0, 800d00a <__mdiff+0x62>
 800d002:	4b33      	ldr	r3, [pc, #204]	@ (800d0d0 <__mdiff+0x128>)
 800d004:	f240 2145 	movw	r1, #581	@ 0x245
 800d008:	e7e2      	b.n	800cfd0 <__mdiff+0x28>
 800d00a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d00e:	f104 0e14 	add.w	lr, r4, #20
 800d012:	6926      	ldr	r6, [r4, #16]
 800d014:	f100 0b14 	add.w	fp, r0, #20
 800d018:	60c5      	str	r5, [r0, #12]
 800d01a:	f109 0514 	add.w	r5, r9, #20
 800d01e:	f109 0310 	add.w	r3, r9, #16
 800d022:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d026:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d02a:	46d9      	mov	r9, fp
 800d02c:	f04f 0c00 	mov.w	ip, #0
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	9b01      	ldr	r3, [sp, #4]
 800d034:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d038:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d03c:	4576      	cmp	r6, lr
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	fa1f f38a 	uxth.w	r3, sl
 800d044:	4619      	mov	r1, r3
 800d046:	b283      	uxth	r3, r0
 800d048:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d04c:	eba1 0303 	sub.w	r3, r1, r3
 800d050:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d054:	4463      	add	r3, ip
 800d056:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d060:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d064:	f849 3b04 	str.w	r3, [r9], #4
 800d068:	d8e3      	bhi.n	800d032 <__mdiff+0x8a>
 800d06a:	1b33      	subs	r3, r6, r4
 800d06c:	3415      	adds	r4, #21
 800d06e:	3b15      	subs	r3, #21
 800d070:	f023 0303 	bic.w	r3, r3, #3
 800d074:	3304      	adds	r3, #4
 800d076:	42a6      	cmp	r6, r4
 800d078:	bf38      	it	cc
 800d07a:	2304      	movcc	r3, #4
 800d07c:	441d      	add	r5, r3
 800d07e:	445b      	add	r3, fp
 800d080:	462c      	mov	r4, r5
 800d082:	461e      	mov	r6, r3
 800d084:	4544      	cmp	r4, r8
 800d086:	d30e      	bcc.n	800d0a6 <__mdiff+0xfe>
 800d088:	f108 0103 	add.w	r1, r8, #3
 800d08c:	1b49      	subs	r1, r1, r5
 800d08e:	3d03      	subs	r5, #3
 800d090:	f021 0103 	bic.w	r1, r1, #3
 800d094:	45a8      	cmp	r8, r5
 800d096:	bf38      	it	cc
 800d098:	2100      	movcc	r1, #0
 800d09a:	440b      	add	r3, r1
 800d09c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0a0:	b199      	cbz	r1, 800d0ca <__mdiff+0x122>
 800d0a2:	6117      	str	r7, [r2, #16]
 800d0a4:	e79a      	b.n	800cfdc <__mdiff+0x34>
 800d0a6:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0aa:	46e6      	mov	lr, ip
 800d0ac:	fa1f fc81 	uxth.w	ip, r1
 800d0b0:	0c08      	lsrs	r0, r1, #16
 800d0b2:	4471      	add	r1, lr
 800d0b4:	44f4      	add	ip, lr
 800d0b6:	b289      	uxth	r1, r1
 800d0b8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0c4:	f846 1b04 	str.w	r1, [r6], #4
 800d0c8:	e7dc      	b.n	800d084 <__mdiff+0xdc>
 800d0ca:	3f01      	subs	r7, #1
 800d0cc:	e7e6      	b.n	800d09c <__mdiff+0xf4>
 800d0ce:	bf00      	nop
 800d0d0:	0800db0c 	.word	0x0800db0c
 800d0d4:	0800db1d 	.word	0x0800db1d

0800d0d8 <__d2b>:
 800d0d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0dc:	460f      	mov	r7, r1
 800d0de:	2101      	movs	r1, #1
 800d0e0:	4616      	mov	r6, r2
 800d0e2:	ec59 8b10 	vmov	r8, r9, d0
 800d0e6:	f7ff fcc7 	bl	800ca78 <_Balloc>
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	b930      	cbnz	r0, 800d0fc <__d2b+0x24>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	4b23      	ldr	r3, [pc, #140]	@ (800d180 <__d2b+0xa8>)
 800d0f2:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0f6:	4823      	ldr	r0, [pc, #140]	@ (800d184 <__d2b+0xac>)
 800d0f8:	f000 f910 	bl	800d31c <__assert_func>
 800d0fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d104:	b10d      	cbz	r5, 800d10a <__d2b+0x32>
 800d106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d10a:	9301      	str	r3, [sp, #4]
 800d10c:	f1b8 0300 	subs.w	r3, r8, #0
 800d110:	d023      	beq.n	800d15a <__d2b+0x82>
 800d112:	4668      	mov	r0, sp
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	f7ff fd78 	bl	800cc0a <__lo0bits>
 800d11a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d11e:	b1d0      	cbz	r0, 800d156 <__d2b+0x7e>
 800d120:	f1c0 0320 	rsb	r3, r0, #32
 800d124:	fa02 f303 	lsl.w	r3, r2, r3
 800d128:	40c2      	lsrs	r2, r0
 800d12a:	430b      	orrs	r3, r1
 800d12c:	9201      	str	r2, [sp, #4]
 800d12e:	6163      	str	r3, [r4, #20]
 800d130:	9b01      	ldr	r3, [sp, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	61a3      	str	r3, [r4, #24]
 800d136:	bf0c      	ite	eq
 800d138:	2201      	moveq	r2, #1
 800d13a:	2202      	movne	r2, #2
 800d13c:	6122      	str	r2, [r4, #16]
 800d13e:	b1a5      	cbz	r5, 800d16a <__d2b+0x92>
 800d140:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d144:	4405      	add	r5, r0
 800d146:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d14a:	603d      	str	r5, [r7, #0]
 800d14c:	6030      	str	r0, [r6, #0]
 800d14e:	4620      	mov	r0, r4
 800d150:	b003      	add	sp, #12
 800d152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d156:	6161      	str	r1, [r4, #20]
 800d158:	e7ea      	b.n	800d130 <__d2b+0x58>
 800d15a:	a801      	add	r0, sp, #4
 800d15c:	f7ff fd55 	bl	800cc0a <__lo0bits>
 800d160:	9b01      	ldr	r3, [sp, #4]
 800d162:	3020      	adds	r0, #32
 800d164:	2201      	movs	r2, #1
 800d166:	6163      	str	r3, [r4, #20]
 800d168:	e7e8      	b.n	800d13c <__d2b+0x64>
 800d16a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d16e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d172:	6038      	str	r0, [r7, #0]
 800d174:	6918      	ldr	r0, [r3, #16]
 800d176:	f7ff fd29 	bl	800cbcc <__hi0bits>
 800d17a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d17e:	e7e5      	b.n	800d14c <__d2b+0x74>
 800d180:	0800db0c 	.word	0x0800db0c
 800d184:	0800db1d 	.word	0x0800db1d

0800d188 <__sflush_r>:
 800d188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d190:	0716      	lsls	r6, r2, #28
 800d192:	4605      	mov	r5, r0
 800d194:	460c      	mov	r4, r1
 800d196:	d454      	bmi.n	800d242 <__sflush_r+0xba>
 800d198:	684b      	ldr	r3, [r1, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	dc02      	bgt.n	800d1a4 <__sflush_r+0x1c>
 800d19e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	dd48      	ble.n	800d236 <__sflush_r+0xae>
 800d1a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1a6:	2e00      	cmp	r6, #0
 800d1a8:	d045      	beq.n	800d236 <__sflush_r+0xae>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1b0:	682f      	ldr	r7, [r5, #0]
 800d1b2:	6a21      	ldr	r1, [r4, #32]
 800d1b4:	602b      	str	r3, [r5, #0]
 800d1b6:	d030      	beq.n	800d21a <__sflush_r+0x92>
 800d1b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1ba:	89a3      	ldrh	r3, [r4, #12]
 800d1bc:	0759      	lsls	r1, r3, #29
 800d1be:	d505      	bpl.n	800d1cc <__sflush_r+0x44>
 800d1c0:	6863      	ldr	r3, [r4, #4]
 800d1c2:	1ad2      	subs	r2, r2, r3
 800d1c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1c6:	b10b      	cbz	r3, 800d1cc <__sflush_r+0x44>
 800d1c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1ca:	1ad2      	subs	r2, r2, r3
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1d0:	6a21      	ldr	r1, [r4, #32]
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	47b0      	blx	r6
 800d1d6:	1c43      	adds	r3, r0, #1
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	d106      	bne.n	800d1ea <__sflush_r+0x62>
 800d1dc:	6829      	ldr	r1, [r5, #0]
 800d1de:	291d      	cmp	r1, #29
 800d1e0:	d82b      	bhi.n	800d23a <__sflush_r+0xb2>
 800d1e2:	4a2a      	ldr	r2, [pc, #168]	@ (800d28c <__sflush_r+0x104>)
 800d1e4:	410a      	asrs	r2, r1
 800d1e6:	07d6      	lsls	r6, r2, #31
 800d1e8:	d427      	bmi.n	800d23a <__sflush_r+0xb2>
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	04d9      	lsls	r1, r3, #19
 800d1ee:	6062      	str	r2, [r4, #4]
 800d1f0:	6922      	ldr	r2, [r4, #16]
 800d1f2:	6022      	str	r2, [r4, #0]
 800d1f4:	d504      	bpl.n	800d200 <__sflush_r+0x78>
 800d1f6:	1c42      	adds	r2, r0, #1
 800d1f8:	d101      	bne.n	800d1fe <__sflush_r+0x76>
 800d1fa:	682b      	ldr	r3, [r5, #0]
 800d1fc:	b903      	cbnz	r3, 800d200 <__sflush_r+0x78>
 800d1fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800d200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d202:	602f      	str	r7, [r5, #0]
 800d204:	b1b9      	cbz	r1, 800d236 <__sflush_r+0xae>
 800d206:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d20a:	4299      	cmp	r1, r3
 800d20c:	d002      	beq.n	800d214 <__sflush_r+0x8c>
 800d20e:	4628      	mov	r0, r5
 800d210:	f7ff fb32 	bl	800c878 <_free_r>
 800d214:	2300      	movs	r3, #0
 800d216:	6363      	str	r3, [r4, #52]	@ 0x34
 800d218:	e00d      	b.n	800d236 <__sflush_r+0xae>
 800d21a:	2301      	movs	r3, #1
 800d21c:	4628      	mov	r0, r5
 800d21e:	47b0      	blx	r6
 800d220:	4602      	mov	r2, r0
 800d222:	1c50      	adds	r0, r2, #1
 800d224:	d1c9      	bne.n	800d1ba <__sflush_r+0x32>
 800d226:	682b      	ldr	r3, [r5, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d0c6      	beq.n	800d1ba <__sflush_r+0x32>
 800d22c:	2b1d      	cmp	r3, #29
 800d22e:	d001      	beq.n	800d234 <__sflush_r+0xac>
 800d230:	2b16      	cmp	r3, #22
 800d232:	d11d      	bne.n	800d270 <__sflush_r+0xe8>
 800d234:	602f      	str	r7, [r5, #0]
 800d236:	2000      	movs	r0, #0
 800d238:	e021      	b.n	800d27e <__sflush_r+0xf6>
 800d23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d23e:	b21b      	sxth	r3, r3
 800d240:	e01a      	b.n	800d278 <__sflush_r+0xf0>
 800d242:	690f      	ldr	r7, [r1, #16]
 800d244:	2f00      	cmp	r7, #0
 800d246:	d0f6      	beq.n	800d236 <__sflush_r+0xae>
 800d248:	0793      	lsls	r3, r2, #30
 800d24a:	680e      	ldr	r6, [r1, #0]
 800d24c:	600f      	str	r7, [r1, #0]
 800d24e:	bf0c      	ite	eq
 800d250:	694b      	ldreq	r3, [r1, #20]
 800d252:	2300      	movne	r3, #0
 800d254:	eba6 0807 	sub.w	r8, r6, r7
 800d258:	608b      	str	r3, [r1, #8]
 800d25a:	f1b8 0f00 	cmp.w	r8, #0
 800d25e:	ddea      	ble.n	800d236 <__sflush_r+0xae>
 800d260:	4643      	mov	r3, r8
 800d262:	463a      	mov	r2, r7
 800d264:	6a21      	ldr	r1, [r4, #32]
 800d266:	4628      	mov	r0, r5
 800d268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d26a:	47b0      	blx	r6
 800d26c:	2800      	cmp	r0, #0
 800d26e:	dc08      	bgt.n	800d282 <__sflush_r+0xfa>
 800d270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d278:	f04f 30ff 	mov.w	r0, #4294967295
 800d27c:	81a3      	strh	r3, [r4, #12]
 800d27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d282:	4407      	add	r7, r0
 800d284:	eba8 0800 	sub.w	r8, r8, r0
 800d288:	e7e7      	b.n	800d25a <__sflush_r+0xd2>
 800d28a:	bf00      	nop
 800d28c:	dfbffffe 	.word	0xdfbffffe

0800d290 <_fflush_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	690b      	ldr	r3, [r1, #16]
 800d294:	4605      	mov	r5, r0
 800d296:	460c      	mov	r4, r1
 800d298:	b913      	cbnz	r3, 800d2a0 <_fflush_r+0x10>
 800d29a:	2500      	movs	r5, #0
 800d29c:	4628      	mov	r0, r5
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	b118      	cbz	r0, 800d2aa <_fflush_r+0x1a>
 800d2a2:	6a03      	ldr	r3, [r0, #32]
 800d2a4:	b90b      	cbnz	r3, 800d2aa <_fflush_r+0x1a>
 800d2a6:	f7fe fb8f 	bl	800b9c8 <__sinit>
 800d2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0f3      	beq.n	800d29a <_fflush_r+0xa>
 800d2b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2b4:	07d0      	lsls	r0, r2, #31
 800d2b6:	d404      	bmi.n	800d2c2 <_fflush_r+0x32>
 800d2b8:	0599      	lsls	r1, r3, #22
 800d2ba:	d402      	bmi.n	800d2c2 <_fflush_r+0x32>
 800d2bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2be:	f7fe fc7a 	bl	800bbb6 <__retarget_lock_acquire_recursive>
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	4621      	mov	r1, r4
 800d2c6:	f7ff ff5f 	bl	800d188 <__sflush_r>
 800d2ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2cc:	4605      	mov	r5, r0
 800d2ce:	07da      	lsls	r2, r3, #31
 800d2d0:	d4e4      	bmi.n	800d29c <_fflush_r+0xc>
 800d2d2:	89a3      	ldrh	r3, [r4, #12]
 800d2d4:	059b      	lsls	r3, r3, #22
 800d2d6:	d4e1      	bmi.n	800d29c <_fflush_r+0xc>
 800d2d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2da:	f7fe fc6d 	bl	800bbb8 <__retarget_lock_release_recursive>
 800d2de:	e7dd      	b.n	800d29c <_fflush_r+0xc>

0800d2e0 <_sbrk_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	4d05      	ldr	r5, [pc, #20]	@ (800d2fc <_sbrk_r+0x1c>)
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	602b      	str	r3, [r5, #0]
 800d2ec:	f7f4 fc08 	bl	8001b00 <_sbrk>
 800d2f0:	1c43      	adds	r3, r0, #1
 800d2f2:	d102      	bne.n	800d2fa <_sbrk_r+0x1a>
 800d2f4:	682b      	ldr	r3, [r5, #0]
 800d2f6:	b103      	cbz	r3, 800d2fa <_sbrk_r+0x1a>
 800d2f8:	6023      	str	r3, [r4, #0]
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	20000ac8 	.word	0x20000ac8

0800d300 <memcpy>:
 800d300:	440a      	add	r2, r1
 800d302:	1e43      	subs	r3, r0, #1
 800d304:	4291      	cmp	r1, r2
 800d306:	d100      	bne.n	800d30a <memcpy+0xa>
 800d308:	4770      	bx	lr
 800d30a:	b510      	push	{r4, lr}
 800d30c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d310:	4291      	cmp	r1, r2
 800d312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d316:	d1f9      	bne.n	800d30c <memcpy+0xc>
 800d318:	bd10      	pop	{r4, pc}
	...

0800d31c <__assert_func>:
 800d31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d31e:	4614      	mov	r4, r2
 800d320:	461a      	mov	r2, r3
 800d322:	4b09      	ldr	r3, [pc, #36]	@ (800d348 <__assert_func+0x2c>)
 800d324:	4605      	mov	r5, r0
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68d8      	ldr	r0, [r3, #12]
 800d32a:	b954      	cbnz	r4, 800d342 <__assert_func+0x26>
 800d32c:	4b07      	ldr	r3, [pc, #28]	@ (800d34c <__assert_func+0x30>)
 800d32e:	461c      	mov	r4, r3
 800d330:	9100      	str	r1, [sp, #0]
 800d332:	4907      	ldr	r1, [pc, #28]	@ (800d350 <__assert_func+0x34>)
 800d334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d338:	462b      	mov	r3, r5
 800d33a:	f000 f841 	bl	800d3c0 <fiprintf>
 800d33e:	f000 f851 	bl	800d3e4 <abort>
 800d342:	4b04      	ldr	r3, [pc, #16]	@ (800d354 <__assert_func+0x38>)
 800d344:	e7f4      	b.n	800d330 <__assert_func+0x14>
 800d346:	bf00      	nop
 800d348:	20000018 	.word	0x20000018
 800d34c:	0800dcbd 	.word	0x0800dcbd
 800d350:	0800dc8f 	.word	0x0800dc8f
 800d354:	0800dc82 	.word	0x0800dc82

0800d358 <_calloc_r>:
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	fba1 5402 	umull	r5, r4, r1, r2
 800d35e:	b93c      	cbnz	r4, 800d370 <_calloc_r+0x18>
 800d360:	4629      	mov	r1, r5
 800d362:	f7ff fafd 	bl	800c960 <_malloc_r>
 800d366:	4606      	mov	r6, r0
 800d368:	b928      	cbnz	r0, 800d376 <_calloc_r+0x1e>
 800d36a:	2600      	movs	r6, #0
 800d36c:	4630      	mov	r0, r6
 800d36e:	bd70      	pop	{r4, r5, r6, pc}
 800d370:	220c      	movs	r2, #12
 800d372:	6002      	str	r2, [r0, #0]
 800d374:	e7f9      	b.n	800d36a <_calloc_r+0x12>
 800d376:	462a      	mov	r2, r5
 800d378:	4621      	mov	r1, r4
 800d37a:	f7fe fb9e 	bl	800baba <memset>
 800d37e:	e7f5      	b.n	800d36c <_calloc_r+0x14>

0800d380 <__ascii_mbtowc>:
 800d380:	b082      	sub	sp, #8
 800d382:	b901      	cbnz	r1, 800d386 <__ascii_mbtowc+0x6>
 800d384:	a901      	add	r1, sp, #4
 800d386:	b142      	cbz	r2, 800d39a <__ascii_mbtowc+0x1a>
 800d388:	b14b      	cbz	r3, 800d39e <__ascii_mbtowc+0x1e>
 800d38a:	7813      	ldrb	r3, [r2, #0]
 800d38c:	600b      	str	r3, [r1, #0]
 800d38e:	7812      	ldrb	r2, [r2, #0]
 800d390:	1e10      	subs	r0, r2, #0
 800d392:	bf18      	it	ne
 800d394:	2001      	movne	r0, #1
 800d396:	b002      	add	sp, #8
 800d398:	4770      	bx	lr
 800d39a:	4610      	mov	r0, r2
 800d39c:	e7fb      	b.n	800d396 <__ascii_mbtowc+0x16>
 800d39e:	f06f 0001 	mvn.w	r0, #1
 800d3a2:	e7f8      	b.n	800d396 <__ascii_mbtowc+0x16>

0800d3a4 <__ascii_wctomb>:
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	b141      	cbz	r1, 800d3bc <__ascii_wctomb+0x18>
 800d3aa:	2aff      	cmp	r2, #255	@ 0xff
 800d3ac:	d904      	bls.n	800d3b8 <__ascii_wctomb+0x14>
 800d3ae:	228a      	movs	r2, #138	@ 0x8a
 800d3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	4770      	bx	lr
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	700a      	strb	r2, [r1, #0]
 800d3bc:	4770      	bx	lr
	...

0800d3c0 <fiprintf>:
 800d3c0:	b40e      	push	{r1, r2, r3}
 800d3c2:	b503      	push	{r0, r1, lr}
 800d3c4:	ab03      	add	r3, sp, #12
 800d3c6:	4601      	mov	r1, r0
 800d3c8:	4805      	ldr	r0, [pc, #20]	@ (800d3e0 <fiprintf+0x20>)
 800d3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ce:	6800      	ldr	r0, [r0, #0]
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	f000 f837 	bl	800d444 <_vfiprintf_r>
 800d3d6:	b002      	add	sp, #8
 800d3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3dc:	b003      	add	sp, #12
 800d3de:	4770      	bx	lr
 800d3e0:	20000018 	.word	0x20000018

0800d3e4 <abort>:
 800d3e4:	2006      	movs	r0, #6
 800d3e6:	b508      	push	{r3, lr}
 800d3e8:	f000 fa00 	bl	800d7ec <raise>
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	f7f4 fb0f 	bl	8001a10 <_exit>

0800d3f2 <__sfputc_r>:
 800d3f2:	6893      	ldr	r3, [r2, #8]
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	6093      	str	r3, [r2, #8]
 800d3fa:	b410      	push	{r4}
 800d3fc:	da08      	bge.n	800d410 <__sfputc_r+0x1e>
 800d3fe:	6994      	ldr	r4, [r2, #24]
 800d400:	42a3      	cmp	r3, r4
 800d402:	db01      	blt.n	800d408 <__sfputc_r+0x16>
 800d404:	290a      	cmp	r1, #10
 800d406:	d103      	bne.n	800d410 <__sfputc_r+0x1e>
 800d408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d40c:	f000 b932 	b.w	800d674 <__swbuf_r>
 800d410:	6813      	ldr	r3, [r2, #0]
 800d412:	1c58      	adds	r0, r3, #1
 800d414:	6010      	str	r0, [r2, #0]
 800d416:	4608      	mov	r0, r1
 800d418:	7019      	strb	r1, [r3, #0]
 800d41a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <__sfputs_r>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	4606      	mov	r6, r0
 800d424:	460f      	mov	r7, r1
 800d426:	4614      	mov	r4, r2
 800d428:	18d5      	adds	r5, r2, r3
 800d42a:	42ac      	cmp	r4, r5
 800d42c:	d101      	bne.n	800d432 <__sfputs_r+0x12>
 800d42e:	2000      	movs	r0, #0
 800d430:	e007      	b.n	800d442 <__sfputs_r+0x22>
 800d432:	463a      	mov	r2, r7
 800d434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d438:	4630      	mov	r0, r6
 800d43a:	f7ff ffda 	bl	800d3f2 <__sfputc_r>
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	d1f3      	bne.n	800d42a <__sfputs_r+0xa>
 800d442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d444 <_vfiprintf_r>:
 800d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d448:	460d      	mov	r5, r1
 800d44a:	b09d      	sub	sp, #116	@ 0x74
 800d44c:	4614      	mov	r4, r2
 800d44e:	4698      	mov	r8, r3
 800d450:	4606      	mov	r6, r0
 800d452:	b118      	cbz	r0, 800d45c <_vfiprintf_r+0x18>
 800d454:	6a03      	ldr	r3, [r0, #32]
 800d456:	b90b      	cbnz	r3, 800d45c <_vfiprintf_r+0x18>
 800d458:	f7fe fab6 	bl	800b9c8 <__sinit>
 800d45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d45e:	07d9      	lsls	r1, r3, #31
 800d460:	d405      	bmi.n	800d46e <_vfiprintf_r+0x2a>
 800d462:	89ab      	ldrh	r3, [r5, #12]
 800d464:	059a      	lsls	r2, r3, #22
 800d466:	d402      	bmi.n	800d46e <_vfiprintf_r+0x2a>
 800d468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d46a:	f7fe fba4 	bl	800bbb6 <__retarget_lock_acquire_recursive>
 800d46e:	89ab      	ldrh	r3, [r5, #12]
 800d470:	071b      	lsls	r3, r3, #28
 800d472:	d501      	bpl.n	800d478 <_vfiprintf_r+0x34>
 800d474:	692b      	ldr	r3, [r5, #16]
 800d476:	b99b      	cbnz	r3, 800d4a0 <_vfiprintf_r+0x5c>
 800d478:	4629      	mov	r1, r5
 800d47a:	4630      	mov	r0, r6
 800d47c:	f000 f938 	bl	800d6f0 <__swsetup_r>
 800d480:	b170      	cbz	r0, 800d4a0 <_vfiprintf_r+0x5c>
 800d482:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d484:	07dc      	lsls	r4, r3, #31
 800d486:	d504      	bpl.n	800d492 <_vfiprintf_r+0x4e>
 800d488:	f04f 30ff 	mov.w	r0, #4294967295
 800d48c:	b01d      	add	sp, #116	@ 0x74
 800d48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	0598      	lsls	r0, r3, #22
 800d496:	d4f7      	bmi.n	800d488 <_vfiprintf_r+0x44>
 800d498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d49a:	f7fe fb8d 	bl	800bbb8 <__retarget_lock_release_recursive>
 800d49e:	e7f3      	b.n	800d488 <_vfiprintf_r+0x44>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4a6:	f04f 0901 	mov.w	r9, #1
 800d4aa:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d660 <_vfiprintf_r+0x21c>
 800d4ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4b0:	2320      	movs	r3, #32
 800d4b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4b6:	2330      	movs	r3, #48	@ 0x30
 800d4b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4bc:	4623      	mov	r3, r4
 800d4be:	469a      	mov	sl, r3
 800d4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4c4:	b10a      	cbz	r2, 800d4ca <_vfiprintf_r+0x86>
 800d4c6:	2a25      	cmp	r2, #37	@ 0x25
 800d4c8:	d1f9      	bne.n	800d4be <_vfiprintf_r+0x7a>
 800d4ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ce:	d00b      	beq.n	800d4e8 <_vfiprintf_r+0xa4>
 800d4d0:	465b      	mov	r3, fp
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	f7ff ffa2 	bl	800d420 <__sfputs_r>
 800d4dc:	3001      	adds	r0, #1
 800d4de:	f000 80a7 	beq.w	800d630 <_vfiprintf_r+0x1ec>
 800d4e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4e4:	445a      	add	r2, fp
 800d4e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f000 809f 	beq.w	800d630 <_vfiprintf_r+0x1ec>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f8:	f10a 0a01 	add.w	sl, sl, #1
 800d4fc:	9304      	str	r3, [sp, #16]
 800d4fe:	9307      	str	r3, [sp, #28]
 800d500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d504:	931a      	str	r3, [sp, #104]	@ 0x68
 800d506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d50a:	4654      	mov	r4, sl
 800d50c:	2205      	movs	r2, #5
 800d50e:	4854      	ldr	r0, [pc, #336]	@ (800d660 <_vfiprintf_r+0x21c>)
 800d510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d514:	f7fe fb51 	bl	800bbba <memchr>
 800d518:	9a04      	ldr	r2, [sp, #16]
 800d51a:	b9d8      	cbnz	r0, 800d554 <_vfiprintf_r+0x110>
 800d51c:	06d1      	lsls	r1, r2, #27
 800d51e:	bf44      	itt	mi
 800d520:	2320      	movmi	r3, #32
 800d522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d526:	0713      	lsls	r3, r2, #28
 800d528:	bf44      	itt	mi
 800d52a:	232b      	movmi	r3, #43	@ 0x2b
 800d52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d530:	f89a 3000 	ldrb.w	r3, [sl]
 800d534:	2b2a      	cmp	r3, #42	@ 0x2a
 800d536:	d015      	beq.n	800d564 <_vfiprintf_r+0x120>
 800d538:	9a07      	ldr	r2, [sp, #28]
 800d53a:	4654      	mov	r4, sl
 800d53c:	2000      	movs	r0, #0
 800d53e:	f04f 0c0a 	mov.w	ip, #10
 800d542:	4621      	mov	r1, r4
 800d544:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d548:	3b30      	subs	r3, #48	@ 0x30
 800d54a:	2b09      	cmp	r3, #9
 800d54c:	d94b      	bls.n	800d5e6 <_vfiprintf_r+0x1a2>
 800d54e:	b1b0      	cbz	r0, 800d57e <_vfiprintf_r+0x13a>
 800d550:	9207      	str	r2, [sp, #28]
 800d552:	e014      	b.n	800d57e <_vfiprintf_r+0x13a>
 800d554:	eba0 0308 	sub.w	r3, r0, r8
 800d558:	46a2      	mov	sl, r4
 800d55a:	fa09 f303 	lsl.w	r3, r9, r3
 800d55e:	4313      	orrs	r3, r2
 800d560:	9304      	str	r3, [sp, #16]
 800d562:	e7d2      	b.n	800d50a <_vfiprintf_r+0xc6>
 800d564:	9b03      	ldr	r3, [sp, #12]
 800d566:	1d19      	adds	r1, r3, #4
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	9103      	str	r1, [sp, #12]
 800d56e:	bfbb      	ittet	lt
 800d570:	425b      	neglt	r3, r3
 800d572:	f042 0202 	orrlt.w	r2, r2, #2
 800d576:	9307      	strge	r3, [sp, #28]
 800d578:	9307      	strlt	r3, [sp, #28]
 800d57a:	bfb8      	it	lt
 800d57c:	9204      	strlt	r2, [sp, #16]
 800d57e:	7823      	ldrb	r3, [r4, #0]
 800d580:	2b2e      	cmp	r3, #46	@ 0x2e
 800d582:	d10a      	bne.n	800d59a <_vfiprintf_r+0x156>
 800d584:	7863      	ldrb	r3, [r4, #1]
 800d586:	2b2a      	cmp	r3, #42	@ 0x2a
 800d588:	d132      	bne.n	800d5f0 <_vfiprintf_r+0x1ac>
 800d58a:	9b03      	ldr	r3, [sp, #12]
 800d58c:	3402      	adds	r4, #2
 800d58e:	1d1a      	adds	r2, r3, #4
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d596:	9203      	str	r2, [sp, #12]
 800d598:	9305      	str	r3, [sp, #20]
 800d59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d670 <_vfiprintf_r+0x22c>
 800d59e:	2203      	movs	r2, #3
 800d5a0:	7821      	ldrb	r1, [r4, #0]
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	f7fe fb09 	bl	800bbba <memchr>
 800d5a8:	b138      	cbz	r0, 800d5ba <_vfiprintf_r+0x176>
 800d5aa:	eba0 000a 	sub.w	r0, r0, sl
 800d5ae:	2240      	movs	r2, #64	@ 0x40
 800d5b0:	9b04      	ldr	r3, [sp, #16]
 800d5b2:	3401      	adds	r4, #1
 800d5b4:	4082      	lsls	r2, r0
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	9304      	str	r3, [sp, #16]
 800d5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5be:	2206      	movs	r2, #6
 800d5c0:	4828      	ldr	r0, [pc, #160]	@ (800d664 <_vfiprintf_r+0x220>)
 800d5c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5c6:	f7fe faf8 	bl	800bbba <memchr>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d03f      	beq.n	800d64e <_vfiprintf_r+0x20a>
 800d5ce:	4b26      	ldr	r3, [pc, #152]	@ (800d668 <_vfiprintf_r+0x224>)
 800d5d0:	bb1b      	cbnz	r3, 800d61a <_vfiprintf_r+0x1d6>
 800d5d2:	9b03      	ldr	r3, [sp, #12]
 800d5d4:	3307      	adds	r3, #7
 800d5d6:	f023 0307 	bic.w	r3, r3, #7
 800d5da:	3308      	adds	r3, #8
 800d5dc:	9303      	str	r3, [sp, #12]
 800d5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5e0:	443b      	add	r3, r7
 800d5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5e4:	e76a      	b.n	800d4bc <_vfiprintf_r+0x78>
 800d5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	e7a8      	b.n	800d542 <_vfiprintf_r+0xfe>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	3401      	adds	r4, #1
 800d5f4:	f04f 0c0a 	mov.w	ip, #10
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	9305      	str	r3, [sp, #20]
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d602:	3a30      	subs	r2, #48	@ 0x30
 800d604:	2a09      	cmp	r2, #9
 800d606:	d903      	bls.n	800d610 <_vfiprintf_r+0x1cc>
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d0c6      	beq.n	800d59a <_vfiprintf_r+0x156>
 800d60c:	9105      	str	r1, [sp, #20]
 800d60e:	e7c4      	b.n	800d59a <_vfiprintf_r+0x156>
 800d610:	fb0c 2101 	mla	r1, ip, r1, r2
 800d614:	4604      	mov	r4, r0
 800d616:	2301      	movs	r3, #1
 800d618:	e7f0      	b.n	800d5fc <_vfiprintf_r+0x1b8>
 800d61a:	ab03      	add	r3, sp, #12
 800d61c:	462a      	mov	r2, r5
 800d61e:	a904      	add	r1, sp, #16
 800d620:	4630      	mov	r0, r6
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	4b11      	ldr	r3, [pc, #68]	@ (800d66c <_vfiprintf_r+0x228>)
 800d626:	f7fd fd87 	bl	800b138 <_printf_float>
 800d62a:	4607      	mov	r7, r0
 800d62c:	1c78      	adds	r0, r7, #1
 800d62e:	d1d6      	bne.n	800d5de <_vfiprintf_r+0x19a>
 800d630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d632:	07d9      	lsls	r1, r3, #31
 800d634:	d405      	bmi.n	800d642 <_vfiprintf_r+0x1fe>
 800d636:	89ab      	ldrh	r3, [r5, #12]
 800d638:	059a      	lsls	r2, r3, #22
 800d63a:	d402      	bmi.n	800d642 <_vfiprintf_r+0x1fe>
 800d63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d63e:	f7fe fabb 	bl	800bbb8 <__retarget_lock_release_recursive>
 800d642:	89ab      	ldrh	r3, [r5, #12]
 800d644:	065b      	lsls	r3, r3, #25
 800d646:	f53f af1f 	bmi.w	800d488 <_vfiprintf_r+0x44>
 800d64a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d64c:	e71e      	b.n	800d48c <_vfiprintf_r+0x48>
 800d64e:	ab03      	add	r3, sp, #12
 800d650:	462a      	mov	r2, r5
 800d652:	a904      	add	r1, sp, #16
 800d654:	4630      	mov	r0, r6
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	4b04      	ldr	r3, [pc, #16]	@ (800d66c <_vfiprintf_r+0x228>)
 800d65a:	f7fe f809 	bl	800b670 <_printf_i>
 800d65e:	e7e4      	b.n	800d62a <_vfiprintf_r+0x1e6>
 800d660:	0800ddbf 	.word	0x0800ddbf
 800d664:	0800ddc9 	.word	0x0800ddc9
 800d668:	0800b139 	.word	0x0800b139
 800d66c:	0800d421 	.word	0x0800d421
 800d670:	0800ddc5 	.word	0x0800ddc5

0800d674 <__swbuf_r>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	460e      	mov	r6, r1
 800d678:	4614      	mov	r4, r2
 800d67a:	4605      	mov	r5, r0
 800d67c:	b118      	cbz	r0, 800d686 <__swbuf_r+0x12>
 800d67e:	6a03      	ldr	r3, [r0, #32]
 800d680:	b90b      	cbnz	r3, 800d686 <__swbuf_r+0x12>
 800d682:	f7fe f9a1 	bl	800b9c8 <__sinit>
 800d686:	69a3      	ldr	r3, [r4, #24]
 800d688:	60a3      	str	r3, [r4, #8]
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	071a      	lsls	r2, r3, #28
 800d68e:	d501      	bpl.n	800d694 <__swbuf_r+0x20>
 800d690:	6923      	ldr	r3, [r4, #16]
 800d692:	b943      	cbnz	r3, 800d6a6 <__swbuf_r+0x32>
 800d694:	4621      	mov	r1, r4
 800d696:	4628      	mov	r0, r5
 800d698:	f000 f82a 	bl	800d6f0 <__swsetup_r>
 800d69c:	b118      	cbz	r0, 800d6a6 <__swbuf_r+0x32>
 800d69e:	f04f 37ff 	mov.w	r7, #4294967295
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	b2f6      	uxtb	r6, r6
 800d6aa:	6922      	ldr	r2, [r4, #16]
 800d6ac:	4637      	mov	r7, r6
 800d6ae:	1a98      	subs	r0, r3, r2
 800d6b0:	6963      	ldr	r3, [r4, #20]
 800d6b2:	4283      	cmp	r3, r0
 800d6b4:	dc05      	bgt.n	800d6c2 <__swbuf_r+0x4e>
 800d6b6:	4621      	mov	r1, r4
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	f7ff fde9 	bl	800d290 <_fflush_r>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d1ed      	bne.n	800d69e <__swbuf_r+0x2a>
 800d6c2:	68a3      	ldr	r3, [r4, #8]
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	60a3      	str	r3, [r4, #8]
 800d6c8:	6823      	ldr	r3, [r4, #0]
 800d6ca:	1c5a      	adds	r2, r3, #1
 800d6cc:	6022      	str	r2, [r4, #0]
 800d6ce:	701e      	strb	r6, [r3, #0]
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	6962      	ldr	r2, [r4, #20]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d004      	beq.n	800d6e2 <__swbuf_r+0x6e>
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	07db      	lsls	r3, r3, #31
 800d6dc:	d5e1      	bpl.n	800d6a2 <__swbuf_r+0x2e>
 800d6de:	2e0a      	cmp	r6, #10
 800d6e0:	d1df      	bne.n	800d6a2 <__swbuf_r+0x2e>
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f7ff fdd3 	bl	800d290 <_fflush_r>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d0d9      	beq.n	800d6a2 <__swbuf_r+0x2e>
 800d6ee:	e7d6      	b.n	800d69e <__swbuf_r+0x2a>

0800d6f0 <__swsetup_r>:
 800d6f0:	b538      	push	{r3, r4, r5, lr}
 800d6f2:	4b29      	ldr	r3, [pc, #164]	@ (800d798 <__swsetup_r+0xa8>)
 800d6f4:	4605      	mov	r5, r0
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	b118      	cbz	r0, 800d704 <__swsetup_r+0x14>
 800d6fc:	6a03      	ldr	r3, [r0, #32]
 800d6fe:	b90b      	cbnz	r3, 800d704 <__swsetup_r+0x14>
 800d700:	f7fe f962 	bl	800b9c8 <__sinit>
 800d704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d708:	0719      	lsls	r1, r3, #28
 800d70a:	d422      	bmi.n	800d752 <__swsetup_r+0x62>
 800d70c:	06da      	lsls	r2, r3, #27
 800d70e:	d407      	bmi.n	800d720 <__swsetup_r+0x30>
 800d710:	2209      	movs	r2, #9
 800d712:	602a      	str	r2, [r5, #0]
 800d714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d718:	f04f 30ff 	mov.w	r0, #4294967295
 800d71c:	81a3      	strh	r3, [r4, #12]
 800d71e:	e033      	b.n	800d788 <__swsetup_r+0x98>
 800d720:	0758      	lsls	r0, r3, #29
 800d722:	d512      	bpl.n	800d74a <__swsetup_r+0x5a>
 800d724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d726:	b141      	cbz	r1, 800d73a <__swsetup_r+0x4a>
 800d728:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d72c:	4299      	cmp	r1, r3
 800d72e:	d002      	beq.n	800d736 <__swsetup_r+0x46>
 800d730:	4628      	mov	r0, r5
 800d732:	f7ff f8a1 	bl	800c878 <_free_r>
 800d736:	2300      	movs	r3, #0
 800d738:	6363      	str	r3, [r4, #52]	@ 0x34
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d740:	81a3      	strh	r3, [r4, #12]
 800d742:	2300      	movs	r3, #0
 800d744:	6063      	str	r3, [r4, #4]
 800d746:	6923      	ldr	r3, [r4, #16]
 800d748:	6023      	str	r3, [r4, #0]
 800d74a:	89a3      	ldrh	r3, [r4, #12]
 800d74c:	f043 0308 	orr.w	r3, r3, #8
 800d750:	81a3      	strh	r3, [r4, #12]
 800d752:	6923      	ldr	r3, [r4, #16]
 800d754:	b94b      	cbnz	r3, 800d76a <__swsetup_r+0x7a>
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d75c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d760:	d003      	beq.n	800d76a <__swsetup_r+0x7a>
 800d762:	4621      	mov	r1, r4
 800d764:	4628      	mov	r0, r5
 800d766:	f000 f882 	bl	800d86e <__smakebuf_r>
 800d76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d76e:	f013 0201 	ands.w	r2, r3, #1
 800d772:	d00a      	beq.n	800d78a <__swsetup_r+0x9a>
 800d774:	2200      	movs	r2, #0
 800d776:	60a2      	str	r2, [r4, #8]
 800d778:	6962      	ldr	r2, [r4, #20]
 800d77a:	4252      	negs	r2, r2
 800d77c:	61a2      	str	r2, [r4, #24]
 800d77e:	6922      	ldr	r2, [r4, #16]
 800d780:	b942      	cbnz	r2, 800d794 <__swsetup_r+0xa4>
 800d782:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d786:	d1c5      	bne.n	800d714 <__swsetup_r+0x24>
 800d788:	bd38      	pop	{r3, r4, r5, pc}
 800d78a:	0799      	lsls	r1, r3, #30
 800d78c:	bf58      	it	pl
 800d78e:	6962      	ldrpl	r2, [r4, #20]
 800d790:	60a2      	str	r2, [r4, #8]
 800d792:	e7f4      	b.n	800d77e <__swsetup_r+0x8e>
 800d794:	2000      	movs	r0, #0
 800d796:	e7f7      	b.n	800d788 <__swsetup_r+0x98>
 800d798:	20000018 	.word	0x20000018

0800d79c <_raise_r>:
 800d79c:	291f      	cmp	r1, #31
 800d79e:	b538      	push	{r3, r4, r5, lr}
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	d904      	bls.n	800d7b0 <_raise_r+0x14>
 800d7a6:	2316      	movs	r3, #22
 800d7a8:	6003      	str	r3, [r0, #0]
 800d7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ae:	bd38      	pop	{r3, r4, r5, pc}
 800d7b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7b2:	b112      	cbz	r2, 800d7ba <_raise_r+0x1e>
 800d7b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7b8:	b94b      	cbnz	r3, 800d7ce <_raise_r+0x32>
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f000 f830 	bl	800d820 <_getpid_r>
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ca:	f000 b817 	b.w	800d7fc <_kill_r>
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d00a      	beq.n	800d7e8 <_raise_r+0x4c>
 800d7d2:	1c59      	adds	r1, r3, #1
 800d7d4:	d103      	bne.n	800d7de <_raise_r+0x42>
 800d7d6:	2316      	movs	r3, #22
 800d7d8:	6003      	str	r3, [r0, #0]
 800d7da:	2001      	movs	r0, #1
 800d7dc:	e7e7      	b.n	800d7ae <_raise_r+0x12>
 800d7de:	2100      	movs	r1, #0
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7e6:	4798      	blx	r3
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	e7e0      	b.n	800d7ae <_raise_r+0x12>

0800d7ec <raise>:
 800d7ec:	4b02      	ldr	r3, [pc, #8]	@ (800d7f8 <raise+0xc>)
 800d7ee:	4601      	mov	r1, r0
 800d7f0:	6818      	ldr	r0, [r3, #0]
 800d7f2:	f7ff bfd3 	b.w	800d79c <_raise_r>
 800d7f6:	bf00      	nop
 800d7f8:	20000018 	.word	0x20000018

0800d7fc <_kill_r>:
 800d7fc:	b538      	push	{r3, r4, r5, lr}
 800d7fe:	2300      	movs	r3, #0
 800d800:	4d06      	ldr	r5, [pc, #24]	@ (800d81c <_kill_r+0x20>)
 800d802:	4604      	mov	r4, r0
 800d804:	4608      	mov	r0, r1
 800d806:	4611      	mov	r1, r2
 800d808:	602b      	str	r3, [r5, #0]
 800d80a:	f7f4 f8f1 	bl	80019f0 <_kill>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	d102      	bne.n	800d818 <_kill_r+0x1c>
 800d812:	682b      	ldr	r3, [r5, #0]
 800d814:	b103      	cbz	r3, 800d818 <_kill_r+0x1c>
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	bd38      	pop	{r3, r4, r5, pc}
 800d81a:	bf00      	nop
 800d81c:	20000ac8 	.word	0x20000ac8

0800d820 <_getpid_r>:
 800d820:	f7f4 b8de 	b.w	80019e0 <_getpid>

0800d824 <__swhatbuf_r>:
 800d824:	b570      	push	{r4, r5, r6, lr}
 800d826:	460c      	mov	r4, r1
 800d828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d82c:	b096      	sub	sp, #88	@ 0x58
 800d82e:	4615      	mov	r5, r2
 800d830:	2900      	cmp	r1, #0
 800d832:	461e      	mov	r6, r3
 800d834:	da0c      	bge.n	800d850 <__swhatbuf_r+0x2c>
 800d836:	89a3      	ldrh	r3, [r4, #12]
 800d838:	2100      	movs	r1, #0
 800d83a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d83e:	bf14      	ite	ne
 800d840:	2340      	movne	r3, #64	@ 0x40
 800d842:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d846:	2000      	movs	r0, #0
 800d848:	6031      	str	r1, [r6, #0]
 800d84a:	602b      	str	r3, [r5, #0]
 800d84c:	b016      	add	sp, #88	@ 0x58
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
 800d850:	466a      	mov	r2, sp
 800d852:	f000 f849 	bl	800d8e8 <_fstat_r>
 800d856:	2800      	cmp	r0, #0
 800d858:	dbed      	blt.n	800d836 <__swhatbuf_r+0x12>
 800d85a:	9901      	ldr	r1, [sp, #4]
 800d85c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d860:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d864:	4259      	negs	r1, r3
 800d866:	4159      	adcs	r1, r3
 800d868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d86c:	e7eb      	b.n	800d846 <__swhatbuf_r+0x22>

0800d86e <__smakebuf_r>:
 800d86e:	898b      	ldrh	r3, [r1, #12]
 800d870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d872:	079d      	lsls	r5, r3, #30
 800d874:	4606      	mov	r6, r0
 800d876:	460c      	mov	r4, r1
 800d878:	d507      	bpl.n	800d88a <__smakebuf_r+0x1c>
 800d87a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d87e:	6023      	str	r3, [r4, #0]
 800d880:	6123      	str	r3, [r4, #16]
 800d882:	2301      	movs	r3, #1
 800d884:	6163      	str	r3, [r4, #20]
 800d886:	b003      	add	sp, #12
 800d888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d88a:	ab01      	add	r3, sp, #4
 800d88c:	466a      	mov	r2, sp
 800d88e:	f7ff ffc9 	bl	800d824 <__swhatbuf_r>
 800d892:	9f00      	ldr	r7, [sp, #0]
 800d894:	4605      	mov	r5, r0
 800d896:	4630      	mov	r0, r6
 800d898:	4639      	mov	r1, r7
 800d89a:	f7ff f861 	bl	800c960 <_malloc_r>
 800d89e:	b948      	cbnz	r0, 800d8b4 <__smakebuf_r+0x46>
 800d8a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a4:	059a      	lsls	r2, r3, #22
 800d8a6:	d4ee      	bmi.n	800d886 <__smakebuf_r+0x18>
 800d8a8:	f023 0303 	bic.w	r3, r3, #3
 800d8ac:	f043 0302 	orr.w	r3, r3, #2
 800d8b0:	81a3      	strh	r3, [r4, #12]
 800d8b2:	e7e2      	b.n	800d87a <__smakebuf_r+0xc>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	6020      	str	r0, [r4, #0]
 800d8b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8bc:	81a3      	strh	r3, [r4, #12]
 800d8be:	9b01      	ldr	r3, [sp, #4]
 800d8c0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8c4:	b15b      	cbz	r3, 800d8de <__smakebuf_r+0x70>
 800d8c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	f000 f81e 	bl	800d90c <_isatty_r>
 800d8d0:	b128      	cbz	r0, 800d8de <__smakebuf_r+0x70>
 800d8d2:	89a3      	ldrh	r3, [r4, #12]
 800d8d4:	f023 0303 	bic.w	r3, r3, #3
 800d8d8:	f043 0301 	orr.w	r3, r3, #1
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	89a3      	ldrh	r3, [r4, #12]
 800d8e0:	431d      	orrs	r5, r3
 800d8e2:	81a5      	strh	r5, [r4, #12]
 800d8e4:	e7cf      	b.n	800d886 <__smakebuf_r+0x18>
	...

0800d8e8 <_fstat_r>:
 800d8e8:	b538      	push	{r3, r4, r5, lr}
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	4d06      	ldr	r5, [pc, #24]	@ (800d908 <_fstat_r+0x20>)
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	4608      	mov	r0, r1
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	602b      	str	r3, [r5, #0]
 800d8f6:	f7f4 f8db 	bl	8001ab0 <_fstat>
 800d8fa:	1c43      	adds	r3, r0, #1
 800d8fc:	d102      	bne.n	800d904 <_fstat_r+0x1c>
 800d8fe:	682b      	ldr	r3, [r5, #0]
 800d900:	b103      	cbz	r3, 800d904 <_fstat_r+0x1c>
 800d902:	6023      	str	r3, [r4, #0]
 800d904:	bd38      	pop	{r3, r4, r5, pc}
 800d906:	bf00      	nop
 800d908:	20000ac8 	.word	0x20000ac8

0800d90c <_isatty_r>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	2300      	movs	r3, #0
 800d910:	4d05      	ldr	r5, [pc, #20]	@ (800d928 <_isatty_r+0x1c>)
 800d912:	4604      	mov	r4, r0
 800d914:	4608      	mov	r0, r1
 800d916:	602b      	str	r3, [r5, #0]
 800d918:	f7f4 f8da 	bl	8001ad0 <_isatty>
 800d91c:	1c43      	adds	r3, r0, #1
 800d91e:	d102      	bne.n	800d926 <_isatty_r+0x1a>
 800d920:	682b      	ldr	r3, [r5, #0]
 800d922:	b103      	cbz	r3, 800d926 <_isatty_r+0x1a>
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	bd38      	pop	{r3, r4, r5, pc}
 800d928:	20000ac8 	.word	0x20000ac8

0800d92c <_init>:
 800d92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92e:	bf00      	nop
 800d930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d932:	bc08      	pop	{r3}
 800d934:	469e      	mov	lr, r3
 800d936:	4770      	bx	lr

0800d938 <_fini>:
 800d938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93a:	bf00      	nop
 800d93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d93e:	bc08      	pop	{r3}
 800d940:	469e      	mov	lr, r3
 800d942:	4770      	bx	lr
